'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsMRP_RPT"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsMRP_RPT
    Inherits Global.System.Data.DataSet
    
    Private tableTableReport As TableReportDataTable
    
    Private tableGeneral As GeneralDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TableReport")) Is Nothing) Then
                MyBase.Tables.Add(New TableReportDataTable(ds.Tables("TableReport")))
            End If
            If (Not (ds.Tables("General")) Is Nothing) Then
                MyBase.Tables.Add(New GeneralDataTable(ds.Tables("General")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TableReport() As TableReportDataTable
        Get
            Return Me.tableTableReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property General() As GeneralDataTable
        Get
            Return Me.tableGeneral
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsMRP_RPT = CType(MyBase.Clone,dsMRP_RPT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TableReport")) Is Nothing) Then
                MyBase.Tables.Add(New TableReportDataTable(ds.Tables("TableReport")))
            End If
            If (Not (ds.Tables("General")) Is Nothing) Then
                MyBase.Tables.Add(New GeneralDataTable(ds.Tables("General")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTableReport = CType(MyBase.Tables("TableReport"),TableReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTableReport) Is Nothing) Then
                Me.tableTableReport.InitVars
            End If
        End If
        Me.tableGeneral = CType(MyBase.Tables("General"),GeneralDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGeneral) Is Nothing) Then
                Me.tableGeneral.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsMRP_RPT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsMRP_RPT.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTableReport = New TableReportDataTable
        MyBase.Tables.Add(Me.tableTableReport)
        Me.tableGeneral = New GeneralDataTable
        MyBase.Tables.Add(Me.tableGeneral)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTableReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGeneral() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsMRP_RPT = New dsMRP_RPT
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TableReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TableReportRowChangeEvent)
    
    Public Delegate Sub GeneralRowChangeEventHandler(ByVal sender As Object, ByVal e As GeneralRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TableReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnMinStock As Global.System.Data.DataColumn
        
        Private columnOnHandQty As Global.System.Data.DataColumn
        
        Private columnSupplyQty As Global.System.Data.DataColumn
        
        Private columnDemandQty As Global.System.Data.DataColumn
        
        Private columnOverDueSupply As Global.System.Data.DataColumn
        
        Private columnOverDueDemand As Global.System.Data.DataColumn
        
        Private columnFirst30Supply As Global.System.Data.DataColumn
        
        Private columnFirst30Demand As Global.System.Data.DataColumn
        
        Private columnSecond30Supply As Global.System.Data.DataColumn
        
        Private columnSecond30Demand As Global.System.Data.DataColumn
        
        Private columnThird30Supply As Global.System.Data.DataColumn
        
        Private columnThird30Demand As Global.System.Data.DataColumn
        
        Private columnFourth30Supply As Global.System.Data.DataColumn
        
        Private columnFourth30Demand As Global.System.Data.DataColumn
        
        Private columnFifth30Supply As Global.System.Data.DataColumn
        
        Private columnFifth30Demand As Global.System.Data.DataColumn
        
        Private columnSixth30Supply As Global.System.Data.DataColumn
        
        Private columnSixth30Demand As Global.System.Data.DataColumn
        
        Private columnSeventh30Supply As Global.System.Data.DataColumn
        
        Private columnSeventh30Demand As Global.System.Data.DataColumn
        
        Private columnEight30Supply As Global.System.Data.DataColumn
        
        Private columnEight30Demand As Global.System.Data.DataColumn
        
        Private columnNineth30Supply As Global.System.Data.DataColumn
        
        Private columnNineth30Demand As Global.System.Data.DataColumn
        
        Private columnTen30Supply As Global.System.Data.DataColumn
        
        Private columnTen30Demand As Global.System.Data.DataColumn
        
        Private columnEleven30Supply As Global.System.Data.DataColumn
        
        Private columnEleven30Demand As Global.System.Data.DataColumn
        
        Private columnTwelve30Supply As Global.System.Data.DataColumn
        
        Private columnTwelve30Demand As Global.System.Data.DataColumn
        
        Private columnOverTwelveSupply As Global.System.Data.DataColumn
        
        Private columnOverTwelveDemand As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TableReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OnHandQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOnHandQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupplyQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplyQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemandQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemandQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OverDueSupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverDueSupply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OverDueDemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverDueDemand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Second30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecond30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Second30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecond30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Third30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThird30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Third30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThird30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fourth30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFourth30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fourth30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFourth30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fifth30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFifth30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fifth30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFifth30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sixth30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSixth30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sixth30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSixth30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Seventh30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeventh30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Seventh30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeventh30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Eight30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEight30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Eight30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEight30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nineth30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNineth30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nineth30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNineth30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ten30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTen30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ten30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTen30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Eleven30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEleven30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Eleven30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEleven30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Twelve30SupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTwelve30Supply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Twelve30DemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTwelve30Demand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OverTwelveSupplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverTwelveSupply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OverTwelveDemandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverTwelveDemand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TableReportRow
            Get
                Return CType(Me.Rows(index),TableReportRow)
            End Get
        End Property
        
        Public Event TableReportRowChanging As TableReportRowChangeEventHandler
        
        Public Event TableReportRowChanged As TableReportRowChangeEventHandler
        
        Public Event TableReportRowDeleting As TableReportRowChangeEventHandler
        
        Public Event TableReportRowDeleted As TableReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTableReportRow(ByVal row As TableReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTableReportRow( _
                    ByVal ItemCode As String,  _
                    ByVal ItemName As String,  _
                    ByVal MinStock As String,  _
                    ByVal OnHandQty As String,  _
                    ByVal SupplyQty As String,  _
                    ByVal DemandQty As String,  _
                    ByVal OverDueSupply As String,  _
                    ByVal OverDueDemand As String,  _
                    ByVal First30Supply As String,  _
                    ByVal First30Demand As String,  _
                    ByVal Second30Supply As String,  _
                    ByVal Second30Demand As String,  _
                    ByVal Third30Supply As String,  _
                    ByVal Third30Demand As String,  _
                    ByVal Fourth30Supply As String,  _
                    ByVal Fourth30Demand As String,  _
                    ByVal Fifth30Supply As String,  _
                    ByVal Fifth30Demand As String,  _
                    ByVal Sixth30Supply As String,  _
                    ByVal Sixth30Demand As String,  _
                    ByVal Seventh30Supply As String,  _
                    ByVal Seventh30Demand As String,  _
                    ByVal Eight30Supply As String,  _
                    ByVal Eight30Demand As String,  _
                    ByVal Nineth30Supply As String,  _
                    ByVal Nineth30Demand As String,  _
                    ByVal Ten30Supply As String,  _
                    ByVal Ten30Demand As String,  _
                    ByVal Eleven30Supply As String,  _
                    ByVal Eleven30Demand As String,  _
                    ByVal Twelve30Supply As String,  _
                    ByVal Twelve30Demand As String,  _
                    ByVal OverTwelveSupply As String,  _
                    ByVal OverTwelveDemand As String) As TableReportRow
            Dim rowTableReportRow As TableReportRow = CType(Me.NewRow,TableReportRow)
            Dim columnValuesArray() As Object = New Object() {ItemCode, ItemName, MinStock, OnHandQty, SupplyQty, DemandQty, OverDueSupply, OverDueDemand, First30Supply, First30Demand, Second30Supply, Second30Demand, Third30Supply, Third30Demand, Fourth30Supply, Fourth30Demand, Fifth30Supply, Fifth30Demand, Sixth30Supply, Sixth30Demand, Seventh30Supply, Seventh30Demand, Eight30Supply, Eight30Demand, Nineth30Supply, Nineth30Demand, Ten30Supply, Ten30Demand, Eleven30Supply, Eleven30Demand, Twelve30Supply, Twelve30Demand, OverTwelveSupply, OverTwelveDemand}
            rowTableReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTableReportRow)
            Return rowTableReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TableReportDataTable = CType(MyBase.Clone,TableReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TableReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnMinStock = MyBase.Columns("MinStock")
            Me.columnOnHandQty = MyBase.Columns("OnHandQty")
            Me.columnSupplyQty = MyBase.Columns("SupplyQty")
            Me.columnDemandQty = MyBase.Columns("DemandQty")
            Me.columnOverDueSupply = MyBase.Columns("OverDueSupply")
            Me.columnOverDueDemand = MyBase.Columns("OverDueDemand")
            Me.columnFirst30Supply = MyBase.Columns("First30Supply")
            Me.columnFirst30Demand = MyBase.Columns("First30Demand")
            Me.columnSecond30Supply = MyBase.Columns("Second30Supply")
            Me.columnSecond30Demand = MyBase.Columns("Second30Demand")
            Me.columnThird30Supply = MyBase.Columns("Third30Supply")
            Me.columnThird30Demand = MyBase.Columns("Third30Demand")
            Me.columnFourth30Supply = MyBase.Columns("Fourth30Supply")
            Me.columnFourth30Demand = MyBase.Columns("Fourth30Demand")
            Me.columnFifth30Supply = MyBase.Columns("Fifth30Supply")
            Me.columnFifth30Demand = MyBase.Columns("Fifth30Demand")
            Me.columnSixth30Supply = MyBase.Columns("Sixth30Supply")
            Me.columnSixth30Demand = MyBase.Columns("Sixth30Demand")
            Me.columnSeventh30Supply = MyBase.Columns("Seventh30Supply")
            Me.columnSeventh30Demand = MyBase.Columns("Seventh30Demand")
            Me.columnEight30Supply = MyBase.Columns("Eight30Supply")
            Me.columnEight30Demand = MyBase.Columns("Eight30Demand")
            Me.columnNineth30Supply = MyBase.Columns("Nineth30Supply")
            Me.columnNineth30Demand = MyBase.Columns("Nineth30Demand")
            Me.columnTen30Supply = MyBase.Columns("Ten30Supply")
            Me.columnTen30Demand = MyBase.Columns("Ten30Demand")
            Me.columnEleven30Supply = MyBase.Columns("Eleven30Supply")
            Me.columnEleven30Demand = MyBase.Columns("Eleven30Demand")
            Me.columnTwelve30Supply = MyBase.Columns("Twelve30Supply")
            Me.columnTwelve30Demand = MyBase.Columns("Twelve30Demand")
            Me.columnOverTwelveSupply = MyBase.Columns("OverTwelveSupply")
            Me.columnOverTwelveDemand = MyBase.Columns("OverTwelveDemand")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnMinStock = New Global.System.Data.DataColumn("MinStock", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStock)
            Me.columnOnHandQty = New Global.System.Data.DataColumn("OnHandQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOnHandQty)
            Me.columnSupplyQty = New Global.System.Data.DataColumn("SupplyQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplyQty)
            Me.columnDemandQty = New Global.System.Data.DataColumn("DemandQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemandQty)
            Me.columnOverDueSupply = New Global.System.Data.DataColumn("OverDueSupply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverDueSupply)
            Me.columnOverDueDemand = New Global.System.Data.DataColumn("OverDueDemand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverDueDemand)
            Me.columnFirst30Supply = New Global.System.Data.DataColumn("First30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst30Supply)
            Me.columnFirst30Demand = New Global.System.Data.DataColumn("First30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst30Demand)
            Me.columnSecond30Supply = New Global.System.Data.DataColumn("Second30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecond30Supply)
            Me.columnSecond30Demand = New Global.System.Data.DataColumn("Second30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecond30Demand)
            Me.columnThird30Supply = New Global.System.Data.DataColumn("Third30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThird30Supply)
            Me.columnThird30Demand = New Global.System.Data.DataColumn("Third30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThird30Demand)
            Me.columnFourth30Supply = New Global.System.Data.DataColumn("Fourth30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFourth30Supply)
            Me.columnFourth30Demand = New Global.System.Data.DataColumn("Fourth30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFourth30Demand)
            Me.columnFifth30Supply = New Global.System.Data.DataColumn("Fifth30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFifth30Supply)
            Me.columnFifth30Demand = New Global.System.Data.DataColumn("Fifth30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFifth30Demand)
            Me.columnSixth30Supply = New Global.System.Data.DataColumn("Sixth30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSixth30Supply)
            Me.columnSixth30Demand = New Global.System.Data.DataColumn("Sixth30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSixth30Demand)
            Me.columnSeventh30Supply = New Global.System.Data.DataColumn("Seventh30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeventh30Supply)
            Me.columnSeventh30Demand = New Global.System.Data.DataColumn("Seventh30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeventh30Demand)
            Me.columnEight30Supply = New Global.System.Data.DataColumn("Eight30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEight30Supply)
            Me.columnEight30Demand = New Global.System.Data.DataColumn("Eight30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEight30Demand)
            Me.columnNineth30Supply = New Global.System.Data.DataColumn("Nineth30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNineth30Supply)
            Me.columnNineth30Demand = New Global.System.Data.DataColumn("Nineth30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNineth30Demand)
            Me.columnTen30Supply = New Global.System.Data.DataColumn("Ten30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTen30Supply)
            Me.columnTen30Demand = New Global.System.Data.DataColumn("Ten30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTen30Demand)
            Me.columnEleven30Supply = New Global.System.Data.DataColumn("Eleven30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEleven30Supply)
            Me.columnEleven30Demand = New Global.System.Data.DataColumn("Eleven30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEleven30Demand)
            Me.columnTwelve30Supply = New Global.System.Data.DataColumn("Twelve30Supply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTwelve30Supply)
            Me.columnTwelve30Demand = New Global.System.Data.DataColumn("Twelve30Demand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTwelve30Demand)
            Me.columnOverTwelveSupply = New Global.System.Data.DataColumn("OverTwelveSupply", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverTwelveSupply)
            Me.columnOverTwelveDemand = New Global.System.Data.DataColumn("OverTwelveDemand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverTwelveDemand)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTableReportRow() As TableReportRow
            Return CType(Me.NewRow,TableReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TableReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TableReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TableReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TableReportRowChanged(Me, New TableReportRowChangeEvent(CType(e.Row,TableReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TableReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TableReportRowChanging(Me, New TableReportRowChangeEvent(CType(e.Row,TableReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TableReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TableReportRowDeleted(Me, New TableReportRowChangeEvent(CType(e.Row,TableReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TableReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TableReportRowDeleting(Me, New TableReportRowChangeEvent(CType(e.Row,TableReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTableReportRow(ByVal row As TableReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsMRP_RPT = New dsMRP_RPT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TableReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GeneralDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnItemFrom As Global.System.Data.DataColumn
        
        Private columnItemTo As Global.System.Data.DataColumn
        
        Private columnItemGroupFrom As Global.System.Data.DataColumn
        
        Private columnItemGroupTo As Global.System.Data.DataColumn
        
        Private columnForeCast As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "General"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemGroupFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemGroupFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemGroupToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemGroupTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ForeCastColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForeCast
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GeneralRow
            Get
                Return CType(Me.Rows(index),GeneralRow)
            End Get
        End Property
        
        Public Event GeneralRowChanging As GeneralRowChangeEventHandler
        
        Public Event GeneralRowChanged As GeneralRowChangeEventHandler
        
        Public Event GeneralRowDeleting As GeneralRowChangeEventHandler
        
        Public Event GeneralRowDeleted As GeneralRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGeneralRow(ByVal row As GeneralRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGeneralRow(ByVal Company As String, ByVal ItemFrom As String, ByVal ItemTo As String, ByVal ItemGroupFrom As String, ByVal ItemGroupTo As String, ByVal ForeCast As String) As GeneralRow
            Dim rowGeneralRow As GeneralRow = CType(Me.NewRow,GeneralRow)
            Dim columnValuesArray() As Object = New Object() {Company, ItemFrom, ItemTo, ItemGroupFrom, ItemGroupTo, ForeCast}
            rowGeneralRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGeneralRow)
            Return rowGeneralRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GeneralDataTable = CType(MyBase.Clone,GeneralDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GeneralDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnItemFrom = MyBase.Columns("ItemFrom")
            Me.columnItemTo = MyBase.Columns("ItemTo")
            Me.columnItemGroupFrom = MyBase.Columns("ItemGroupFrom")
            Me.columnItemGroupTo = MyBase.Columns("ItemGroupTo")
            Me.columnForeCast = MyBase.Columns("ForeCast")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnItemFrom = New Global.System.Data.DataColumn("ItemFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemFrom)
            Me.columnItemTo = New Global.System.Data.DataColumn("ItemTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemTo)
            Me.columnItemGroupFrom = New Global.System.Data.DataColumn("ItemGroupFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemGroupFrom)
            Me.columnItemGroupTo = New Global.System.Data.DataColumn("ItemGroupTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemGroupTo)
            Me.columnForeCast = New Global.System.Data.DataColumn("ForeCast", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForeCast)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGeneralRow() As GeneralRow
            Return CType(Me.NewRow,GeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GeneralRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GeneralRowChangedEvent) Is Nothing) Then
                RaiseEvent GeneralRowChanged(Me, New GeneralRowChangeEvent(CType(e.Row,GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GeneralRowChangingEvent) Is Nothing) Then
                RaiseEvent GeneralRowChanging(Me, New GeneralRowChangeEvent(CType(e.Row,GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GeneralRowDeletedEvent) Is Nothing) Then
                RaiseEvent GeneralRowDeleted(Me, New GeneralRowChangeEvent(CType(e.Row,GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GeneralRowDeletingEvent) Is Nothing) Then
                RaiseEvent GeneralRowDeleting(Me, New GeneralRowChangeEvent(CType(e.Row,GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGeneralRow(ByVal row As GeneralRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsMRP_RPT = New dsMRP_RPT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GeneralDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TableReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTableReport As TableReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTableReport = CType(Me.Table,TableReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStock() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.MinStockColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MinStock' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.MinStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OnHandQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.OnHandQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OnHandQty' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.OnHandQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupplyQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.SupplyQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupplyQty' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.SupplyQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DemandQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.DemandQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DemandQty' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.DemandQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OverDueSupply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.OverDueSupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OverDueSupply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.OverDueSupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OverDueDemand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.OverDueDemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OverDueDemand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.OverDueDemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.First30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'First30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.First30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.First30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'First30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.First30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Second30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Second30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Second30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Second30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Second30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Second30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Second30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Second30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Third30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Third30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Third30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Third30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Third30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Third30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Third30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Third30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fourth30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Fourth30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fourth30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Fourth30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fourth30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Fourth30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fourth30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Fourth30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fifth30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Fifth30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fifth30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Fifth30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fifth30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Fifth30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fifth30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Fifth30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sixth30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Sixth30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sixth30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Sixth30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sixth30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Sixth30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sixth30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Sixth30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Seventh30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Seventh30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Seventh30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Seventh30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Seventh30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Seventh30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Seventh30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Seventh30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eight30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Eight30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eight30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Eight30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eight30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Eight30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eight30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Eight30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nineth30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Nineth30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nineth30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Nineth30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nineth30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Nineth30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nineth30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Nineth30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ten30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Ten30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ten30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Ten30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ten30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Ten30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ten30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Ten30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eleven30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Eleven30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eleven30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Eleven30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eleven30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Eleven30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eleven30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Eleven30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Twelve30Supply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Twelve30SupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Twelve30Supply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Twelve30SupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Twelve30Demand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.Twelve30DemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Twelve30Demand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.Twelve30DemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OverTwelveSupply() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.OverTwelveSupplyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OverTwelveSupply' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.OverTwelveSupplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OverTwelveDemand() As String
            Get
                Try 
                    Return CType(Me(Me.tableTableReport.OverTwelveDemandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OverTwelveDemand' in table 'TableReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableReport.OverTwelveDemandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableTableReport.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableTableReport.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinStockNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.MinStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinStockNull()
            Me(Me.tableTableReport.MinStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOnHandQtyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.OnHandQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOnHandQtyNull()
            Me(Me.tableTableReport.OnHandQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplyQtyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.SupplyQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplyQtyNull()
            Me(Me.tableTableReport.SupplyQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemandQtyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.DemandQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemandQtyNull()
            Me(Me.tableTableReport.DemandQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOverDueSupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.OverDueSupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOverDueSupplyNull()
            Me(Me.tableTableReport.OverDueSupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOverDueDemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.OverDueDemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOverDueDemandNull()
            Me(Me.tableTableReport.OverDueDemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirst30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.First30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirst30SupplyNull()
            Me(Me.tableTableReport.First30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirst30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.First30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirst30DemandNull()
            Me(Me.tableTableReport.First30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecond30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Second30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecond30SupplyNull()
            Me(Me.tableTableReport.Second30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecond30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Second30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecond30DemandNull()
            Me(Me.tableTableReport.Second30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsThird30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Third30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetThird30SupplyNull()
            Me(Me.tableTableReport.Third30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsThird30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Third30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetThird30DemandNull()
            Me(Me.tableTableReport.Third30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFourth30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Fourth30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFourth30SupplyNull()
            Me(Me.tableTableReport.Fourth30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFourth30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Fourth30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFourth30DemandNull()
            Me(Me.tableTableReport.Fourth30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFifth30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Fifth30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFifth30SupplyNull()
            Me(Me.tableTableReport.Fifth30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFifth30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Fifth30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFifth30DemandNull()
            Me(Me.tableTableReport.Fifth30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSixth30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Sixth30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSixth30SupplyNull()
            Me(Me.tableTableReport.Sixth30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSixth30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Sixth30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSixth30DemandNull()
            Me(Me.tableTableReport.Sixth30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeventh30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Seventh30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeventh30SupplyNull()
            Me(Me.tableTableReport.Seventh30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeventh30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Seventh30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeventh30DemandNull()
            Me(Me.tableTableReport.Seventh30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEight30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Eight30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEight30SupplyNull()
            Me(Me.tableTableReport.Eight30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEight30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Eight30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEight30DemandNull()
            Me(Me.tableTableReport.Eight30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNineth30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Nineth30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNineth30SupplyNull()
            Me(Me.tableTableReport.Nineth30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNineth30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Nineth30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNineth30DemandNull()
            Me(Me.tableTableReport.Nineth30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTen30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Ten30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTen30SupplyNull()
            Me(Me.tableTableReport.Ten30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTen30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Ten30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTen30DemandNull()
            Me(Me.tableTableReport.Ten30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEleven30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Eleven30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEleven30SupplyNull()
            Me(Me.tableTableReport.Eleven30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEleven30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Eleven30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEleven30DemandNull()
            Me(Me.tableTableReport.Eleven30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTwelve30SupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Twelve30SupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTwelve30SupplyNull()
            Me(Me.tableTableReport.Twelve30SupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTwelve30DemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.Twelve30DemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTwelve30DemandNull()
            Me(Me.tableTableReport.Twelve30DemandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOverTwelveSupplyNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.OverTwelveSupplyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOverTwelveSupplyNull()
            Me(Me.tableTableReport.OverTwelveSupplyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOverTwelveDemandNull() As Boolean
            Return Me.IsNull(Me.tableTableReport.OverTwelveDemandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOverTwelveDemandNull()
            Me(Me.tableTableReport.OverTwelveDemandColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GeneralRow
        Inherits Global.System.Data.DataRow
        
        Private tableGeneral As GeneralDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGeneral = CType(Me.Table,GeneralDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.ItemFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemFrom' in table 'General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.ItemFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.ItemToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemTo' in table 'General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.ItemToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemGroupFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.ItemGroupFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemGroupFrom' in table 'General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.ItemGroupFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemGroupTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.ItemGroupToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemGroupTo' in table 'General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.ItemGroupToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ForeCast() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.ForeCastColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForeCast' in table 'General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.ForeCastColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNull()
            Me(Me.tableGeneral.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemFromNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.ItemFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemFromNull()
            Me(Me.tableGeneral.ItemFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemToNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.ItemToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemToNull()
            Me(Me.tableGeneral.ItemToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemGroupFromNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.ItemGroupFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemGroupFromNull()
            Me(Me.tableGeneral.ItemGroupFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemGroupToNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.ItemGroupToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemGroupToNull()
            Me(Me.tableGeneral.ItemGroupToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsForeCastNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.ForeCastColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetForeCastNull()
            Me(Me.tableGeneral.ForeCastColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TableReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TableReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TableReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TableReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GeneralRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GeneralRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GeneralRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GeneralRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
