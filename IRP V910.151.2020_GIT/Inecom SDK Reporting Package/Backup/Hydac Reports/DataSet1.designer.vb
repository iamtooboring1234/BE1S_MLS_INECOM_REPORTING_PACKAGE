'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableNCM_OITM As NCM_OITMDataTable
    
    Private tableNCM_DOC As NCM_DOCDataTable
    
    Private tableNCM_WAR As NCM_WARDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("NCM_OITM")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_OITMDataTable(ds.Tables("NCM_OITM")))
            End If
            If (Not (ds.Tables("NCM_DOC")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_DOCDataTable(ds.Tables("NCM_DOC")))
            End If
            If (Not (ds.Tables("NCM_WAR")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_WARDataTable(ds.Tables("NCM_WAR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_OITM() As NCM_OITMDataTable
        Get
            Return Me.tableNCM_OITM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_DOC() As NCM_DOCDataTable
        Get
            Return Me.tableNCM_DOC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_WAR() As NCM_WARDataTable
        Get
            Return Me.tableNCM_WAR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("NCM_OITM")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_OITMDataTable(ds.Tables("NCM_OITM")))
            End If
            If (Not (ds.Tables("NCM_DOC")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_DOCDataTable(ds.Tables("NCM_DOC")))
            End If
            If (Not (ds.Tables("NCM_WAR")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_WARDataTable(ds.Tables("NCM_WAR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableNCM_OITM = CType(MyBase.Tables("NCM_OITM"),NCM_OITMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_OITM) Is Nothing) Then
                Me.tableNCM_OITM.InitVars
            End If
        End If
        Me.tableNCM_DOC = CType(MyBase.Tables("NCM_DOC"),NCM_DOCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_DOC) Is Nothing) Then
                Me.tableNCM_DOC.InitVars
            End If
        End If
        Me.tableNCM_WAR = CType(MyBase.Tables("NCM_WAR"),NCM_WARDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_WAR) Is Nothing) Then
                Me.tableNCM_WAR.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableNCM_OITM = New NCM_OITMDataTable
        MyBase.Tables.Add(Me.tableNCM_OITM)
        Me.tableNCM_DOC = New NCM_DOCDataTable
        MyBase.Tables.Add(Me.tableNCM_DOC)
        Me.tableNCM_WAR = New NCM_WARDataTable
        MyBase.Tables.Add(Me.tableNCM_WAR)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_OITM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_DOC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_WAR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub NCM_OITMRowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_OITMRowChangeEvent)
    
    Public Delegate Sub NCM_DOCRowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_DOCRowChangeEvent)
    
    Public Delegate Sub NCM_WARRowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_WARRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_OITMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnAvgPrice As Global.System.Data.DataColumn
        
        Private columnItemCat As Global.System.Data.DataColumn
        
        Private columnClass As Global.System.Data.DataColumn
        
        Private columnMinLevel As Global.System.Data.DataColumn
        
        Private columnSmoothQty As Global.System.Data.DataColumn
        
        Private columnTOTALVALUE As Global.System.Data.DataColumn
        
        Private columnVALUE_A As Global.System.Data.DataColumn
        
        Private columnVALUE_B As Global.System.Data.DataColumn
        
        Private columnVALUE_C As Global.System.Data.DataColumn
        
        Private columnINVQty As Global.System.Data.DataColumn
        
        Private columnRINQty As Global.System.Data.DataColumn
        
        Private columnIGEQty As Global.System.Data.DataColumn
        
        Private columnDLNQty As Global.System.Data.DataColumn
        
        Private columnRDNQty As Global.System.Data.DataColumn
        
        Private columnINVSum As Global.System.Data.DataColumn
        
        Private columnRINSum As Global.System.Data.DataColumn
        
        Private columnIGESum As Global.System.Data.DataColumn
        
        Private columnDLNSum As Global.System.Data.DataColumn
        
        Private columnRDNSum As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_OITM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AvgPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAvgPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SmoothQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSmoothQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALUE_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALUE_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALUE_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALUE_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALUE_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALUE_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RINQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRINQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IGEQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIGEQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DLNQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDLNQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RDNQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRDNQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RINSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRINSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IGESumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIGESum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DLNSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDLNSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RDNSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRDNSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_OITMRow
            Get
                Return CType(Me.Rows(index),NCM_OITMRow)
            End Get
        End Property
        
        Public Event NCM_OITMRowChanging As NCM_OITMRowChangeEventHandler
        
        Public Event NCM_OITMRowChanged As NCM_OITMRowChangeEventHandler
        
        Public Event NCM_OITMRowDeleting As NCM_OITMRowChangeEventHandler
        
        Public Event NCM_OITMRowDeleted As NCM_OITMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_OITMRow(ByVal row As NCM_OITMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_OITMRow( _
                    ByVal ItemCode As String,  _
                    ByVal ItemName As String,  _
                    ByVal AvgPrice As Decimal,  _
                    ByVal ItemCat As String,  _
                    ByVal _Class As String,  _
                    ByVal MinLevel As Integer,  _
                    ByVal SmoothQty As Decimal,  _
                    ByVal TOTALVALUE As Decimal,  _
                    ByVal VALUE_A As Decimal,  _
                    ByVal VALUE_B As Decimal,  _
                    ByVal VALUE_C As Decimal,  _
                    ByVal INVQty As Integer,  _
                    ByVal RINQty As Integer,  _
                    ByVal IGEQty As Integer,  _
                    ByVal DLNQty As Integer,  _
                    ByVal RDNQty As Integer,  _
                    ByVal INVSum As Integer,  _
                    ByVal RINSum As Integer,  _
                    ByVal IGESum As Integer,  _
                    ByVal DLNSum As Integer,  _
                    ByVal RDNSum As Integer) As NCM_OITMRow
            Dim rowNCM_OITMRow As NCM_OITMRow = CType(Me.NewRow,NCM_OITMRow)
            Dim columnValuesArray() As Object = New Object() {ItemCode, ItemName, AvgPrice, ItemCat, _Class, MinLevel, SmoothQty, TOTALVALUE, VALUE_A, VALUE_B, VALUE_C, INVQty, RINQty, IGEQty, DLNQty, RDNQty, INVSum, RINSum, IGESum, DLNSum, RDNSum}
            rowNCM_OITMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_OITMRow)
            Return rowNCM_OITMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_OITMDataTable = CType(MyBase.Clone,NCM_OITMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_OITMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnAvgPrice = MyBase.Columns("AvgPrice")
            Me.columnItemCat = MyBase.Columns("ItemCat")
            Me.columnClass = MyBase.Columns("Class")
            Me.columnMinLevel = MyBase.Columns("MinLevel")
            Me.columnSmoothQty = MyBase.Columns("SmoothQty")
            Me.columnTOTALVALUE = MyBase.Columns("TOTALVALUE")
            Me.columnVALUE_A = MyBase.Columns("VALUE_A")
            Me.columnVALUE_B = MyBase.Columns("VALUE_B")
            Me.columnVALUE_C = MyBase.Columns("VALUE_C")
            Me.columnINVQty = MyBase.Columns("INVQty")
            Me.columnRINQty = MyBase.Columns("RINQty")
            Me.columnIGEQty = MyBase.Columns("IGEQty")
            Me.columnDLNQty = MyBase.Columns("DLNQty")
            Me.columnRDNQty = MyBase.Columns("RDNQty")
            Me.columnINVSum = MyBase.Columns("INVSum")
            Me.columnRINSum = MyBase.Columns("RINSum")
            Me.columnIGESum = MyBase.Columns("IGESum")
            Me.columnDLNSum = MyBase.Columns("DLNSum")
            Me.columnRDNSum = MyBase.Columns("RDNSum")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnAvgPrice = New Global.System.Data.DataColumn("AvgPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAvgPrice)
            Me.columnItemCat = New Global.System.Data.DataColumn("ItemCat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCat)
            Me.columnClass = New Global.System.Data.DataColumn("Class", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnClass.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ClassColumn")
            Me.columnClass.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnClass")
            Me.columnClass.ExtendedProperties.Add("Generator_UserColumnName", "Class")
            MyBase.Columns.Add(Me.columnClass)
            Me.columnMinLevel = New Global.System.Data.DataColumn("MinLevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinLevel)
            Me.columnSmoothQty = New Global.System.Data.DataColumn("SmoothQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSmoothQty)
            Me.columnTOTALVALUE = New Global.System.Data.DataColumn("TOTALVALUE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALVALUE)
            Me.columnVALUE_A = New Global.System.Data.DataColumn("VALUE_A", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALUE_A)
            Me.columnVALUE_B = New Global.System.Data.DataColumn("VALUE_B", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALUE_B)
            Me.columnVALUE_C = New Global.System.Data.DataColumn("VALUE_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALUE_C)
            Me.columnINVQty = New Global.System.Data.DataColumn("INVQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVQty)
            Me.columnRINQty = New Global.System.Data.DataColumn("RINQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRINQty)
            Me.columnIGEQty = New Global.System.Data.DataColumn("IGEQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIGEQty)
            Me.columnDLNQty = New Global.System.Data.DataColumn("DLNQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDLNQty)
            Me.columnRDNQty = New Global.System.Data.DataColumn("RDNQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRDNQty)
            Me.columnINVSum = New Global.System.Data.DataColumn("INVSum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVSum)
            Me.columnRINSum = New Global.System.Data.DataColumn("RINSum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRINSum)
            Me.columnIGESum = New Global.System.Data.DataColumn("IGESum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIGESum)
            Me.columnDLNSum = New Global.System.Data.DataColumn("DLNSum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDLNSum)
            Me.columnRDNSum = New Global.System.Data.DataColumn("RDNSum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRDNSum)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_OITMRow() As NCM_OITMRow
            Return CType(Me.NewRow,NCM_OITMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_OITMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_OITMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_OITMRowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_OITMRowChanged(Me, New NCM_OITMRowChangeEvent(CType(e.Row,NCM_OITMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_OITMRowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_OITMRowChanging(Me, New NCM_OITMRowChangeEvent(CType(e.Row,NCM_OITMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_OITMRowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_OITMRowDeleted(Me, New NCM_OITMRowChangeEvent(CType(e.Row,NCM_OITMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_OITMRowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_OITMRowDeleting(Me, New NCM_OITMRowChangeEvent(CType(e.Row,NCM_OITMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_OITMRow(ByVal row As NCM_OITMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_OITMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_DOCDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_DOC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_DOCRow
            Get
                Return CType(Me.Rows(index),NCM_DOCRow)
            End Get
        End Property
        
        Public Event NCM_DOCRowChanging As NCM_DOCRowChangeEventHandler
        
        Public Event NCM_DOCRowChanged As NCM_DOCRowChangeEventHandler
        
        Public Event NCM_DOCRowDeleting As NCM_DOCRowChangeEventHandler
        
        Public Event NCM_DOCRowDeleted As NCM_DOCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_DOCRow(ByVal row As NCM_DOCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_DOCRow(ByVal DocEntry As Integer, ByVal DocType As String, ByVal Quantity As Integer) As NCM_DOCRow
            Dim rowNCM_DOCRow As NCM_DOCRow = CType(Me.NewRow,NCM_DOCRow)
            Dim columnValuesArray() As Object = New Object() {DocEntry, DocType, Quantity}
            rowNCM_DOCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_DOCRow)
            Return rowNCM_DOCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_DOCDataTable = CType(MyBase.Clone,NCM_DOCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_DOCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnQuantity = MyBase.Columns("Quantity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_DOCRow() As NCM_DOCRow
            Return CType(Me.NewRow,NCM_DOCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_DOCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_DOCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_DOCRowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_DOCRowChanged(Me, New NCM_DOCRowChangeEvent(CType(e.Row,NCM_DOCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_DOCRowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_DOCRowChanging(Me, New NCM_DOCRowChangeEvent(CType(e.Row,NCM_DOCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_DOCRowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_DOCRowDeleted(Me, New NCM_DOCRowChangeEvent(CType(e.Row,NCM_DOCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_DOCRowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_DOCRowDeleting(Me, New NCM_DOCRowChangeEvent(CType(e.Row,NCM_DOCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_DOCRow(ByVal row As NCM_DOCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_DOCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_WARDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnQuantity1 As Global.System.Data.DataColumn
        
        Private columnQuantity2 As Global.System.Data.DataColumn
        
        Private columnQuantity3 As Global.System.Data.DataColumn
        
        Private columnQtyWeek As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_WAR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Quantity1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Quantity2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Quantity3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyWeekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQtyWeek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_WARRow
            Get
                Return CType(Me.Rows(index),NCM_WARRow)
            End Get
        End Property
        
        Public Event NCM_WARRowChanging As NCM_WARRowChangeEventHandler
        
        Public Event NCM_WARRowChanged As NCM_WARRowChangeEventHandler
        
        Public Event NCM_WARRowDeleting As NCM_WARRowChangeEventHandler
        
        Public Event NCM_WARRowDeleted As NCM_WARRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_WARRow(ByVal row As NCM_WARRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_WARRow(ByVal ItemCode As String, ByVal ItemName As String, ByVal Quantity1 As Integer, ByVal Quantity2 As Integer, ByVal Quantity3 As Integer, ByVal QtyWeek As Decimal) As NCM_WARRow
            Dim rowNCM_WARRow As NCM_WARRow = CType(Me.NewRow,NCM_WARRow)
            Dim columnValuesArray() As Object = New Object() {ItemCode, ItemName, Quantity1, Quantity2, Quantity3, QtyWeek}
            rowNCM_WARRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_WARRow)
            Return rowNCM_WARRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_WARDataTable = CType(MyBase.Clone,NCM_WARDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_WARDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnQuantity1 = MyBase.Columns("Quantity1")
            Me.columnQuantity2 = MyBase.Columns("Quantity2")
            Me.columnQuantity3 = MyBase.Columns("Quantity3")
            Me.columnQtyWeek = MyBase.Columns("QtyWeek")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnQuantity1 = New Global.System.Data.DataColumn("Quantity1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity1)
            Me.columnQuantity2 = New Global.System.Data.DataColumn("Quantity2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity2)
            Me.columnQuantity3 = New Global.System.Data.DataColumn("Quantity3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity3)
            Me.columnQtyWeek = New Global.System.Data.DataColumn("QtyWeek", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQtyWeek)
            Me.columnQuantity1.Caption = "AvgPrice"
            Me.columnQuantity2.Caption = "ItemCat"
            Me.columnQuantity3.Caption = "Class"
            Me.columnQtyWeek.Caption = "SmoothQty"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_WARRow() As NCM_WARRow
            Return CType(Me.NewRow,NCM_WARRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_WARRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_WARRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_WARRowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_WARRowChanged(Me, New NCM_WARRowChangeEvent(CType(e.Row,NCM_WARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_WARRowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_WARRowChanging(Me, New NCM_WARRowChangeEvent(CType(e.Row,NCM_WARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_WARRowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_WARRowDeleted(Me, New NCM_WARRowChangeEvent(CType(e.Row,NCM_WARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_WARRowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_WARRowDeleting(Me, New NCM_WARRowChangeEvent(CType(e.Row,NCM_WARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_WARRow(ByVal row As NCM_WARRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_WARDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_OITMRow
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_OITM As NCM_OITMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_OITM = CType(Me.Table,NCM_OITMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AvgPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.AvgPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AvgPrice' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.AvgPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCat() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.ItemCatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCat' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.ItemCatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Class() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.ClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Class' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.ClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinLevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.MinLevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MinLevel' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.MinLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SmoothQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.SmoothQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SmoothQty' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.SmoothQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALVALUE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.TOTALVALUEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALVALUE' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.TOTALVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALUE_A() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.VALUE_AColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALUE_A' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.VALUE_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALUE_B() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.VALUE_BColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALUE_B' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.VALUE_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALUE_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.VALUE_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALUE_C' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.VALUE_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.INVQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVQty' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.INVQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RINQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.RINQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RINQty' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.RINQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IGEQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.IGEQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IGEQty' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.IGEQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DLNQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.DLNQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DLNQty' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.DLNQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RDNQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.RDNQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RDNQty' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.RDNQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVSum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.INVSumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVSum' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.INVSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RINSum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.RINSumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RINSum' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.RINSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IGESum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.IGESumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IGESum' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.IGESumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DLNSum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.DLNSumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DLNSum' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.DLNSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RDNSum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_OITM.RDNSumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RDNSum' in table 'NCM_OITM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_OITM.RDNSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableNCM_OITM.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableNCM_OITM.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAvgPriceNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.AvgPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAvgPriceNull()
            Me(Me.tableNCM_OITM.AvgPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCatNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.ItemCatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCatNull()
            Me(Me.tableNCM_OITM.ItemCatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ClassNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.ClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ClassNull()
            Me(Me.tableNCM_OITM.ClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinLevelNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.MinLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinLevelNull()
            Me(Me.tableNCM_OITM.MinLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSmoothQtyNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.SmoothQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSmoothQtyNull()
            Me(Me.tableNCM_OITM.SmoothQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALVALUENull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.TOTALVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALVALUENull()
            Me(Me.tableNCM_OITM.TOTALVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALUE_ANull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.VALUE_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALUE_ANull()
            Me(Me.tableNCM_OITM.VALUE_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALUE_BNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.VALUE_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALUE_BNull()
            Me(Me.tableNCM_OITM.VALUE_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALUE_CNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.VALUE_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALUE_CNull()
            Me(Me.tableNCM_OITM.VALUE_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVQtyNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.INVQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVQtyNull()
            Me(Me.tableNCM_OITM.INVQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRINQtyNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.RINQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRINQtyNull()
            Me(Me.tableNCM_OITM.RINQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIGEQtyNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.IGEQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIGEQtyNull()
            Me(Me.tableNCM_OITM.IGEQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDLNQtyNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.DLNQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDLNQtyNull()
            Me(Me.tableNCM_OITM.DLNQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRDNQtyNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.RDNQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRDNQtyNull()
            Me(Me.tableNCM_OITM.RDNQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVSumNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.INVSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVSumNull()
            Me(Me.tableNCM_OITM.INVSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRINSumNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.RINSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRINSumNull()
            Me(Me.tableNCM_OITM.RINSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIGESumNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.IGESumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIGESumNull()
            Me(Me.tableNCM_OITM.IGESumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDLNSumNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.DLNSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDLNSumNull()
            Me(Me.tableNCM_OITM.DLNSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRDNSumNull() As Boolean
            Return Me.IsNull(Me.tableNCM_OITM.RDNSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRDNSumNull()
            Me(Me.tableNCM_OITM.RDNSumColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_DOCRow
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_DOC As NCM_DOCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_DOC = CType(Me.Table,NCM_DOCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_DOC.DocEntryColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'NCM_DOC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_DOC.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_DOC.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'NCM_DOC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_DOC.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_DOC.QuantityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'NCM_DOC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_DOC.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableNCM_DOC.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableNCM_DOC.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_DOC.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableNCM_DOC.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableNCM_DOC.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableNCM_DOC.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_WARRow
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_WAR As NCM_WARDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_WAR = CType(Me.Table,NCM_WARDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_WAR.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'NCM_WAR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_WAR.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_WAR.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'NCM_WAR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_WAR.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_WAR.Quantity1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity1' in table 'NCM_WAR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_WAR.Quantity1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_WAR.Quantity2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity2' in table 'NCM_WAR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_WAR.Quantity2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_WAR.Quantity3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity3' in table 'NCM_WAR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_WAR.Quantity3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QtyWeek() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_WAR.QtyWeekColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QtyWeek' in table 'NCM_WAR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_WAR.QtyWeekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_WAR.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableNCM_WAR.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_WAR.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableNCM_WAR.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantity1Null() As Boolean
            Return Me.IsNull(Me.tableNCM_WAR.Quantity1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantity1Null()
            Me(Me.tableNCM_WAR.Quantity1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantity2Null() As Boolean
            Return Me.IsNull(Me.tableNCM_WAR.Quantity2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantity2Null()
            Me(Me.tableNCM_WAR.Quantity2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantity3Null() As Boolean
            Return Me.IsNull(Me.tableNCM_WAR.Quantity3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantity3Null()
            Me(Me.tableNCM_WAR.Quantity3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyWeekNull() As Boolean
            Return Me.IsNull(Me.tableNCM_WAR.QtyWeekColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyWeekNull()
            Me(Me.tableNCM_WAR.QtyWeekColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_OITMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_OITMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_OITMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_OITMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_DOCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_DOCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_DOCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_DOCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_WARRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_WARRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_WARRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_WARRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
