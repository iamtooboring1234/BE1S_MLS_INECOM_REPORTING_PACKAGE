'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPayment"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPayment
    Inherits Global.System.Data.DataSet
    
    Private tabledtPayment As dtPaymentDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtPayment")) Is Nothing) Then
                MyBase.Tables.Add(New dtPaymentDataTable(ds.Tables("dtPayment")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPayment() As dtPaymentDataTable
        Get
            Return Me.tabledtPayment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPayment = CType(MyBase.Clone,dsPayment)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtPayment")) Is Nothing) Then
                MyBase.Tables.Add(New dtPaymentDataTable(ds.Tables("dtPayment")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtPayment = CType(MyBase.Tables("dtPayment"),dtPaymentDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPayment) Is Nothing) Then
                Me.tabledtPayment.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPayment"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPayment.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtPayment = New dtPaymentDataTable
        MyBase.Tables.Add(Me.tabledtPayment)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPayment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPayment = New dsPayment
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtPaymentRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPaymentRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPaymentDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPaymentNo As Global.System.Data.DataColumn
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnCardName As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnPaymentRef As Global.System.Data.DataColumn
        
        Private columnInvoiceType As Global.System.Data.DataColumn
        
        Private columnInvoiceNo As Global.System.Data.DataColumn
        
        Private columnBPRefNo As Global.System.Data.DataColumn
        
        Private columnInvoiceAmtFC As Global.System.Data.DataColumn
        
        Private columnInvoiceCurrency As Global.System.Data.DataColumn
        
        Private columnInvoiceAmtLC As Global.System.Data.DataColumn
        
        Private columnCheckNo As Global.System.Data.DataColumn
        
        Private columnTransferNo As Global.System.Data.DataColumn
        
        Private columnPaymentSumLC As Global.System.Data.DataColumn
        
        Private columnPaymentSumFC As Global.System.Data.DataColumn
        
        Private columnPaymentCurr As Global.System.Data.DataColumn
        
        Private columnPaymentRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPayment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BPRefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBPRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceAmtFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceAmtFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceCurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceAmtLCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceAmtLC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransferNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransferNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentSumLCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentSumLC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentCurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPaymentRow
            Get
                Return CType(Me.Rows(index),dtPaymentRow)
            End Get
        End Property
        
        Public Event dtPaymentRowChanging As dtPaymentRowChangeEventHandler
        
        Public Event dtPaymentRowChanged As dtPaymentRowChangeEventHandler
        
        Public Event dtPaymentRowDeleting As dtPaymentRowChangeEventHandler
        
        Public Event dtPaymentRowDeleted As dtPaymentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPaymentRow(ByVal row As dtPaymentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPaymentRow( _
                    ByVal PaymentNo As String,  _
                    ByVal CardCode As String,  _
                    ByVal CardName As String,  _
                    ByVal DocDate As Date,  _
                    ByVal PaymentRef As String,  _
                    ByVal InvoiceType As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal BPRefNo As String,  _
                    ByVal InvoiceAmtFC As Decimal,  _
                    ByVal InvoiceCurrency As String,  _
                    ByVal InvoiceAmtLC As Decimal,  _
                    ByVal CheckNo As String,  _
                    ByVal TransferNo As String,  _
                    ByVal PaymentSumLC As Decimal,  _
                    ByVal PaymentSumFC As Decimal,  _
                    ByVal PaymentCurr As String,  _
                    ByVal PaymentRate As Decimal) As dtPaymentRow
            Dim rowdtPaymentRow As dtPaymentRow = CType(Me.NewRow,dtPaymentRow)
            Dim columnValuesArray() As Object = New Object() {PaymentNo, CardCode, CardName, DocDate, PaymentRef, InvoiceType, InvoiceNo, BPRefNo, InvoiceAmtFC, InvoiceCurrency, InvoiceAmtLC, CheckNo, TransferNo, PaymentSumLC, PaymentSumFC, PaymentCurr, PaymentRate}
            rowdtPaymentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPaymentRow)
            Return rowdtPaymentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPaymentDataTable = CType(MyBase.Clone,dtPaymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPaymentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPaymentNo = MyBase.Columns("PaymentNo")
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnCardName = MyBase.Columns("CardName")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnPaymentRef = MyBase.Columns("PaymentRef")
            Me.columnInvoiceType = MyBase.Columns("InvoiceType")
            Me.columnInvoiceNo = MyBase.Columns("InvoiceNo")
            Me.columnBPRefNo = MyBase.Columns("BPRefNo")
            Me.columnInvoiceAmtFC = MyBase.Columns("InvoiceAmtFC")
            Me.columnInvoiceCurrency = MyBase.Columns("InvoiceCurrency")
            Me.columnInvoiceAmtLC = MyBase.Columns("InvoiceAmtLC")
            Me.columnCheckNo = MyBase.Columns("CheckNo")
            Me.columnTransferNo = MyBase.Columns("TransferNo")
            Me.columnPaymentSumLC = MyBase.Columns("PaymentSumLC")
            Me.columnPaymentSumFC = MyBase.Columns("PaymentSumFC")
            Me.columnPaymentCurr = MyBase.Columns("PaymentCurr")
            Me.columnPaymentRate = MyBase.Columns("PaymentRate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPaymentNo = New Global.System.Data.DataColumn("PaymentNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentNo)
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnCardName = New Global.System.Data.DataColumn("CardName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardName)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnPaymentRef = New Global.System.Data.DataColumn("PaymentRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentRef)
            Me.columnInvoiceType = New Global.System.Data.DataColumn("InvoiceType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceType)
            Me.columnInvoiceNo = New Global.System.Data.DataColumn("InvoiceNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNo)
            Me.columnBPRefNo = New Global.System.Data.DataColumn("BPRefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBPRefNo)
            Me.columnInvoiceAmtFC = New Global.System.Data.DataColumn("InvoiceAmtFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceAmtFC)
            Me.columnInvoiceCurrency = New Global.System.Data.DataColumn("InvoiceCurrency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceCurrency)
            Me.columnInvoiceAmtLC = New Global.System.Data.DataColumn("InvoiceAmtLC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceAmtLC)
            Me.columnCheckNo = New Global.System.Data.DataColumn("CheckNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckNo)
            Me.columnTransferNo = New Global.System.Data.DataColumn("TransferNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransferNo)
            Me.columnPaymentSumLC = New Global.System.Data.DataColumn("PaymentSumLC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentSumLC)
            Me.columnPaymentSumFC = New Global.System.Data.DataColumn("PaymentSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentSumFC)
            Me.columnPaymentCurr = New Global.System.Data.DataColumn("PaymentCurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentCurr)
            Me.columnPaymentRate = New Global.System.Data.DataColumn("PaymentRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentRate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPaymentRow() As dtPaymentRow
            Return CType(Me.NewRow,dtPaymentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPaymentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPaymentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPaymentRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPaymentRowChanged(Me, New dtPaymentRowChangeEvent(CType(e.Row,dtPaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPaymentRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPaymentRowChanging(Me, New dtPaymentRowChangeEvent(CType(e.Row,dtPaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPaymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPaymentRowDeleted(Me, New dtPaymentRowChangeEvent(CType(e.Row,dtPaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPaymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPaymentRowDeleting(Me, New dtPaymentRowChangeEvent(CType(e.Row,dtPaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPaymentRow(ByVal row As dtPaymentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPayment = New dsPayment
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPaymentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPaymentRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPayment As dtPaymentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPayment = CType(Me.Table,dtPaymentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentNo() As String
            Get
                If Me.IsPaymentNoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtPayment.PaymentNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.PaymentNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                If Me.IsCardCodeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtPayment.CardCodeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardName() As String
            Get
                If Me.IsCardNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtPayment.CardNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.CardNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'dtPayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentRef() As String
            Get
                If Me.IsPaymentRefNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtPayment.PaymentRefColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.PaymentRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceType() As String
            Get
                If Me.IsInvoiceTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtPayment.InvoiceTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.InvoiceTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNo() As String
            Get
                If Me.IsInvoiceNoNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tabledtPayment.InvoiceNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.InvoiceNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BPRefNo() As String
            Get
                If Me.IsBPRefNoNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tabledtPayment.BPRefNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.BPRefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceAmtFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment.InvoiceAmtFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceAmtFC' in table 'dtPayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment.InvoiceAmtFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceCurrency() As String
            Get
                If Me.IsInvoiceCurrencyNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tabledtPayment.InvoiceCurrencyColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.InvoiceCurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceAmtLC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment.InvoiceAmtLCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceAmtLC' in table 'dtPayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment.InvoiceAmtLCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckNo() As String
            Get
                If Me.IsCheckNoNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tabledtPayment.CheckNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.CheckNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransferNo() As String
            Get
                If Me.IsTransferNoNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tabledtPayment.TransferNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.TransferNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentSumLC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment.PaymentSumLCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentSumLC' in table 'dtPayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment.PaymentSumLCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment.PaymentSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentSumFC' in table 'dtPayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment.PaymentSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentCurr() As String
            Get
                If Me.IsPaymentCurrNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtPayment.PaymentCurrColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtPayment.PaymentCurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment.PaymentRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentRate' in table 'dtPayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment.PaymentRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentNoNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.PaymentNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentNoNull()
            Me(Me.tabledtPayment.PaymentNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tabledtPayment.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardNameNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.CardNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardNameNull()
            Me(Me.tabledtPayment.CardNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tabledtPayment.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentRefNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.PaymentRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentRefNull()
            Me(Me.tabledtPayment.PaymentRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceTypeNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.InvoiceTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceTypeNull()
            Me(Me.tabledtPayment.InvoiceTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNoNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.InvoiceNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNoNull()
            Me(Me.tabledtPayment.InvoiceNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBPRefNoNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.BPRefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBPRefNoNull()
            Me(Me.tabledtPayment.BPRefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceAmtFCNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.InvoiceAmtFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceAmtFCNull()
            Me(Me.tabledtPayment.InvoiceAmtFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceCurrencyNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.InvoiceCurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceCurrencyNull()
            Me(Me.tabledtPayment.InvoiceCurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceAmtLCNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.InvoiceAmtLCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceAmtLCNull()
            Me(Me.tabledtPayment.InvoiceAmtLCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckNoNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.CheckNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckNoNull()
            Me(Me.tabledtPayment.CheckNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransferNoNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.TransferNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransferNoNull()
            Me(Me.tabledtPayment.TransferNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentSumLCNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.PaymentSumLCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentSumLCNull()
            Me(Me.tabledtPayment.PaymentSumLCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentSumFCNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.PaymentSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentSumFCNull()
            Me(Me.tabledtPayment.PaymentSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentCurrNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.PaymentCurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentCurrNull()
            Me(Me.tabledtPayment.PaymentCurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentRateNull() As Boolean
            Return Me.IsNull(Me.tabledtPayment.PaymentRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentRateNull()
            Me(Me.tabledtPayment.PaymentRateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPaymentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPaymentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPaymentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPaymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
