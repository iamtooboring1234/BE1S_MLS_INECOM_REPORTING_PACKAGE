'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRpt"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRpt
    Inherits Global.System.Data.DataSet
    
    Private tableTMP_ARIWOAPI As TMP_ARIWOAPIDataTable
    
    Private tableTMP_APIWOARD As TMP_APIWOARDDataTable
    
    Private tableTMP_GPA As TMP_GPADataTable
    
    Private tableTMP_PROJ As TMP_PROJDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TMP_ARIWOAPI")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_ARIWOAPIDataTable(ds.Tables("TMP_ARIWOAPI")))
            End If
            If (Not (ds.Tables("TMP_APIWOARD")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_APIWOARDDataTable(ds.Tables("TMP_APIWOARD")))
            End If
            If (Not (ds.Tables("TMP_GPA")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_GPADataTable(ds.Tables("TMP_GPA")))
            End If
            If (Not (ds.Tables("TMP_PROJ")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_PROJDataTable(ds.Tables("TMP_PROJ")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TMP_ARIWOAPI() As TMP_ARIWOAPIDataTable
        Get
            Return Me.tableTMP_ARIWOAPI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TMP_APIWOARD() As TMP_APIWOARDDataTable
        Get
            Return Me.tableTMP_APIWOARD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TMP_GPA() As TMP_GPADataTable
        Get
            Return Me.tableTMP_GPA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TMP_PROJ() As TMP_PROJDataTable
        Get
            Return Me.tableTMP_PROJ
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRpt = CType(MyBase.Clone,dsRpt)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TMP_ARIWOAPI")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_ARIWOAPIDataTable(ds.Tables("TMP_ARIWOAPI")))
            End If
            If (Not (ds.Tables("TMP_APIWOARD")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_APIWOARDDataTable(ds.Tables("TMP_APIWOARD")))
            End If
            If (Not (ds.Tables("TMP_GPA")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_GPADataTable(ds.Tables("TMP_GPA")))
            End If
            If (Not (ds.Tables("TMP_PROJ")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_PROJDataTable(ds.Tables("TMP_PROJ")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTMP_ARIWOAPI = CType(MyBase.Tables("TMP_ARIWOAPI"),TMP_ARIWOAPIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTMP_ARIWOAPI) Is Nothing) Then
                Me.tableTMP_ARIWOAPI.InitVars
            End If
        End If
        Me.tableTMP_APIWOARD = CType(MyBase.Tables("TMP_APIWOARD"),TMP_APIWOARDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTMP_APIWOARD) Is Nothing) Then
                Me.tableTMP_APIWOARD.InitVars
            End If
        End If
        Me.tableTMP_GPA = CType(MyBase.Tables("TMP_GPA"),TMP_GPADataTable)
        If (initTable = true) Then
            If (Not (Me.tableTMP_GPA) Is Nothing) Then
                Me.tableTMP_GPA.InitVars
            End If
        End If
        Me.tableTMP_PROJ = CType(MyBase.Tables("TMP_PROJ"),TMP_PROJDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTMP_PROJ) Is Nothing) Then
                Me.tableTMP_PROJ.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRpt"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRpt.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTMP_ARIWOAPI = New TMP_ARIWOAPIDataTable
        MyBase.Tables.Add(Me.tableTMP_ARIWOAPI)
        Me.tableTMP_APIWOARD = New TMP_APIWOARDDataTable
        MyBase.Tables.Add(Me.tableTMP_APIWOARD)
        Me.tableTMP_GPA = New TMP_GPADataTable
        MyBase.Tables.Add(Me.tableTMP_GPA)
        Me.tableTMP_PROJ = New TMP_PROJDataTable
        MyBase.Tables.Add(Me.tableTMP_PROJ)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTMP_ARIWOAPI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTMP_APIWOARD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTMP_GPA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTMP_PROJ() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRpt = New dsRpt
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TMP_ARIWOAPIRowChangeEventHandler(ByVal sender As Object, ByVal e As TMP_ARIWOAPIRowChangeEvent)
    
    Public Delegate Sub TMP_APIWOARDRowChangeEventHandler(ByVal sender As Object, ByVal e As TMP_APIWOARDRowChangeEvent)
    
    Public Delegate Sub TMP_GPARowChangeEventHandler(ByVal sender As Object, ByVal e As TMP_GPARowChangeEvent)
    
    Public Delegate Sub TMP_PROJRowChangeEventHandler(ByVal sender As Object, ByVal e As TMP_PROJRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TMP_ARIWOAPIDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject As Global.System.Data.DataColumn
        
        Private columnPrjName As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnCurr As Global.System.Data.DataColumn
        
        Private columnLCAmt As Global.System.Data.DataColumn
        
        Private columnFCAmt As Global.System.Data.DataColumn
        
        Private columnCust As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TMP_ARIWOAPI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrjNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrjName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TMP_ARIWOAPIRow
            Get
                Return CType(Me.Rows(index),TMP_ARIWOAPIRow)
            End Get
        End Property
        
        Public Event TMP_ARIWOAPIRowChanging As TMP_ARIWOAPIRowChangeEventHandler
        
        Public Event TMP_ARIWOAPIRowChanged As TMP_ARIWOAPIRowChangeEventHandler
        
        Public Event TMP_ARIWOAPIRowDeleting As TMP_ARIWOAPIRowChangeEventHandler
        
        Public Event TMP_ARIWOAPIRowDeleted As TMP_ARIWOAPIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTMP_ARIWOAPIRow(ByVal row As TMP_ARIWOAPIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTMP_ARIWOAPIRow(ByVal Project As String, ByVal PrjName As String, ByVal DocType As String, ByVal DocNum As Long, ByVal DocDate As Date, ByVal Curr As String, ByVal LCAmt As Decimal, ByVal FCAmt As Decimal, ByVal Cust As String) As TMP_ARIWOAPIRow
            Dim rowTMP_ARIWOAPIRow As TMP_ARIWOAPIRow = CType(Me.NewRow,TMP_ARIWOAPIRow)
            Dim columnValuesArray() As Object = New Object() {Project, PrjName, DocType, DocNum, DocDate, Curr, LCAmt, FCAmt, Cust}
            rowTMP_ARIWOAPIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTMP_ARIWOAPIRow)
            Return rowTMP_ARIWOAPIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TMP_ARIWOAPIDataTable = CType(MyBase.Clone,TMP_ARIWOAPIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TMP_ARIWOAPIDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject = MyBase.Columns("Project")
            Me.columnPrjName = MyBase.Columns("PrjName")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnCurr = MyBase.Columns("Curr")
            Me.columnLCAmt = MyBase.Columns("LCAmt")
            Me.columnFCAmt = MyBase.Columns("FCAmt")
            Me.columnCust = MyBase.Columns("Cust")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
            Me.columnPrjName = New Global.System.Data.DataColumn("PrjName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrjName)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnCurr = New Global.System.Data.DataColumn("Curr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurr)
            Me.columnLCAmt = New Global.System.Data.DataColumn("LCAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCAmt)
            Me.columnFCAmt = New Global.System.Data.DataColumn("FCAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCAmt)
            Me.columnCust = New Global.System.Data.DataColumn("Cust", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTMP_ARIWOAPIRow() As TMP_ARIWOAPIRow
            Return CType(Me.NewRow,TMP_ARIWOAPIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TMP_ARIWOAPIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TMP_ARIWOAPIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TMP_ARIWOAPIRowChangedEvent) Is Nothing) Then
                RaiseEvent TMP_ARIWOAPIRowChanged(Me, New TMP_ARIWOAPIRowChangeEvent(CType(e.Row,TMP_ARIWOAPIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TMP_ARIWOAPIRowChangingEvent) Is Nothing) Then
                RaiseEvent TMP_ARIWOAPIRowChanging(Me, New TMP_ARIWOAPIRowChangeEvent(CType(e.Row,TMP_ARIWOAPIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TMP_ARIWOAPIRowDeletedEvent) Is Nothing) Then
                RaiseEvent TMP_ARIWOAPIRowDeleted(Me, New TMP_ARIWOAPIRowChangeEvent(CType(e.Row,TMP_ARIWOAPIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TMP_ARIWOAPIRowDeletingEvent) Is Nothing) Then
                RaiseEvent TMP_ARIWOAPIRowDeleting(Me, New TMP_ARIWOAPIRowChangeEvent(CType(e.Row,TMP_ARIWOAPIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTMP_ARIWOAPIRow(ByVal row As TMP_ARIWOAPIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRpt = New dsRpt
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TMP_ARIWOAPIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TMP_APIWOARDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject As Global.System.Data.DataColumn
        
        Private columnPrjName As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnCurr As Global.System.Data.DataColumn
        
        Private columnLCAmt As Global.System.Data.DataColumn
        
        Private columnFCAmt As Global.System.Data.DataColumn
        
        Private columnCust As Global.System.Data.DataColumn
        
        Private columnRef As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TMP_APIWOARD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrjNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrjName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TMP_APIWOARDRow
            Get
                Return CType(Me.Rows(index),TMP_APIWOARDRow)
            End Get
        End Property
        
        Public Event TMP_APIWOARDRowChanging As TMP_APIWOARDRowChangeEventHandler
        
        Public Event TMP_APIWOARDRowChanged As TMP_APIWOARDRowChangeEventHandler
        
        Public Event TMP_APIWOARDRowDeleting As TMP_APIWOARDRowChangeEventHandler
        
        Public Event TMP_APIWOARDRowDeleted As TMP_APIWOARDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTMP_APIWOARDRow(ByVal row As TMP_APIWOARDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTMP_APIWOARDRow(ByVal Project As String, ByVal PrjName As String, ByVal DocType As String, ByVal DocNum As Long, ByVal DocDate As Date, ByVal Curr As String, ByVal LCAmt As Decimal, ByVal FCAmt As Decimal, ByVal Cust As String, ByVal Ref As String) As TMP_APIWOARDRow
            Dim rowTMP_APIWOARDRow As TMP_APIWOARDRow = CType(Me.NewRow,TMP_APIWOARDRow)
            Dim columnValuesArray() As Object = New Object() {Project, PrjName, DocType, DocNum, DocDate, Curr, LCAmt, FCAmt, Cust, Ref}
            rowTMP_APIWOARDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTMP_APIWOARDRow)
            Return rowTMP_APIWOARDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TMP_APIWOARDDataTable = CType(MyBase.Clone,TMP_APIWOARDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TMP_APIWOARDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject = MyBase.Columns("Project")
            Me.columnPrjName = MyBase.Columns("PrjName")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnCurr = MyBase.Columns("Curr")
            Me.columnLCAmt = MyBase.Columns("LCAmt")
            Me.columnFCAmt = MyBase.Columns("FCAmt")
            Me.columnCust = MyBase.Columns("Cust")
            Me.columnRef = MyBase.Columns("Ref")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
            Me.columnPrjName = New Global.System.Data.DataColumn("PrjName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrjName)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnCurr = New Global.System.Data.DataColumn("Curr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurr)
            Me.columnLCAmt = New Global.System.Data.DataColumn("LCAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCAmt)
            Me.columnFCAmt = New Global.System.Data.DataColumn("FCAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCAmt)
            Me.columnCust = New Global.System.Data.DataColumn("Cust", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust)
            Me.columnRef = New Global.System.Data.DataColumn("Ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTMP_APIWOARDRow() As TMP_APIWOARDRow
            Return CType(Me.NewRow,TMP_APIWOARDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TMP_APIWOARDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TMP_APIWOARDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TMP_APIWOARDRowChangedEvent) Is Nothing) Then
                RaiseEvent TMP_APIWOARDRowChanged(Me, New TMP_APIWOARDRowChangeEvent(CType(e.Row,TMP_APIWOARDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TMP_APIWOARDRowChangingEvent) Is Nothing) Then
                RaiseEvent TMP_APIWOARDRowChanging(Me, New TMP_APIWOARDRowChangeEvent(CType(e.Row,TMP_APIWOARDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TMP_APIWOARDRowDeletedEvent) Is Nothing) Then
                RaiseEvent TMP_APIWOARDRowDeleted(Me, New TMP_APIWOARDRowChangeEvent(CType(e.Row,TMP_APIWOARDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TMP_APIWOARDRowDeletingEvent) Is Nothing) Then
                RaiseEvent TMP_APIWOARDRowDeleting(Me, New TMP_APIWOARDRowChangeEvent(CType(e.Row,TMP_APIWOARDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTMP_APIWOARDRow(ByVal row As TMP_APIWOARDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRpt = New dsRpt
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TMP_APIWOARDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TMP_GPADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject As Global.System.Data.DataColumn
        
        Private columnPrjName As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnCurr As Global.System.Data.DataColumn
        
        Private columnLCAmt As Global.System.Data.DataColumn
        
        Private columnFCAmt As Global.System.Data.DataColumn
        
        Private columnAPDocNum As Global.System.Data.DataColumn
        
        Private columnAPFCAmt As Global.System.Data.DataColumn
        
        Private columnAPLCAmt As Global.System.Data.DataColumn
        
        Private columnGProfitLC As Global.System.Data.DataColumn
        
        Private columnGProfitPerc As Global.System.Data.DataColumn
        
        Private columnAPDocType As Global.System.Data.DataColumn
        
        Private columnAPDocDate As Global.System.Data.DataColumn
        
        Private columnAPCurr As Global.System.Data.DataColumn
        
        Private columnCust As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TMP_GPA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrjNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrjName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APDocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APFCAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPFCAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APLCAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPLCAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GProfitLCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGProfitLC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GProfitPercColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGProfitPerc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APDocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APDocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APCurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TMP_GPARow
            Get
                Return CType(Me.Rows(index),TMP_GPARow)
            End Get
        End Property
        
        Public Event TMP_GPARowChanging As TMP_GPARowChangeEventHandler
        
        Public Event TMP_GPARowChanged As TMP_GPARowChangeEventHandler
        
        Public Event TMP_GPARowDeleting As TMP_GPARowChangeEventHandler
        
        Public Event TMP_GPARowDeleted As TMP_GPARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTMP_GPARow(ByVal row As TMP_GPARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTMP_GPARow( _
                    ByVal Project As String,  _
                    ByVal PrjName As String,  _
                    ByVal DocType As String,  _
                    ByVal DocNum As Long,  _
                    ByVal DocDate As Date,  _
                    ByVal Curr As String,  _
                    ByVal LCAmt As Decimal,  _
                    ByVal FCAmt As Decimal,  _
                    ByVal APDocNum As Long,  _
                    ByVal APFCAmt As Decimal,  _
                    ByVal APLCAmt As Decimal,  _
                    ByVal GProfitLC As Decimal,  _
                    ByVal GProfitPerc As Decimal,  _
                    ByVal APDocType As String,  _
                    ByVal APDocDate As Date,  _
                    ByVal APCurr As String,  _
                    ByVal Cust As String) As TMP_GPARow
            Dim rowTMP_GPARow As TMP_GPARow = CType(Me.NewRow,TMP_GPARow)
            Dim columnValuesArray() As Object = New Object() {Project, PrjName, DocType, DocNum, DocDate, Curr, LCAmt, FCAmt, APDocNum, APFCAmt, APLCAmt, GProfitLC, GProfitPerc, APDocType, APDocDate, APCurr, Cust}
            rowTMP_GPARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTMP_GPARow)
            Return rowTMP_GPARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TMP_GPADataTable = CType(MyBase.Clone,TMP_GPADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TMP_GPADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject = MyBase.Columns("Project")
            Me.columnPrjName = MyBase.Columns("PrjName")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnCurr = MyBase.Columns("Curr")
            Me.columnLCAmt = MyBase.Columns("LCAmt")
            Me.columnFCAmt = MyBase.Columns("FCAmt")
            Me.columnAPDocNum = MyBase.Columns("APDocNum")
            Me.columnAPFCAmt = MyBase.Columns("APFCAmt")
            Me.columnAPLCAmt = MyBase.Columns("APLCAmt")
            Me.columnGProfitLC = MyBase.Columns("GProfitLC")
            Me.columnGProfitPerc = MyBase.Columns("GProfitPerc")
            Me.columnAPDocType = MyBase.Columns("APDocType")
            Me.columnAPDocDate = MyBase.Columns("APDocDate")
            Me.columnAPCurr = MyBase.Columns("APCurr")
            Me.columnCust = MyBase.Columns("Cust")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
            Me.columnPrjName = New Global.System.Data.DataColumn("PrjName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrjName)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnCurr = New Global.System.Data.DataColumn("Curr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurr)
            Me.columnLCAmt = New Global.System.Data.DataColumn("LCAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCAmt)
            Me.columnFCAmt = New Global.System.Data.DataColumn("FCAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCAmt)
            Me.columnAPDocNum = New Global.System.Data.DataColumn("APDocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPDocNum)
            Me.columnAPFCAmt = New Global.System.Data.DataColumn("APFCAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPFCAmt)
            Me.columnAPLCAmt = New Global.System.Data.DataColumn("APLCAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPLCAmt)
            Me.columnGProfitLC = New Global.System.Data.DataColumn("GProfitLC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGProfitLC)
            Me.columnGProfitPerc = New Global.System.Data.DataColumn("GProfitPerc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGProfitPerc)
            Me.columnAPDocType = New Global.System.Data.DataColumn("APDocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPDocType)
            Me.columnAPDocDate = New Global.System.Data.DataColumn("APDocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPDocDate)
            Me.columnAPCurr = New Global.System.Data.DataColumn("APCurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPCurr)
            Me.columnCust = New Global.System.Data.DataColumn("Cust", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTMP_GPARow() As TMP_GPARow
            Return CType(Me.NewRow,TMP_GPARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TMP_GPARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TMP_GPARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TMP_GPARowChangedEvent) Is Nothing) Then
                RaiseEvent TMP_GPARowChanged(Me, New TMP_GPARowChangeEvent(CType(e.Row,TMP_GPARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TMP_GPARowChangingEvent) Is Nothing) Then
                RaiseEvent TMP_GPARowChanging(Me, New TMP_GPARowChangeEvent(CType(e.Row,TMP_GPARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TMP_GPARowDeletedEvent) Is Nothing) Then
                RaiseEvent TMP_GPARowDeleted(Me, New TMP_GPARowChangeEvent(CType(e.Row,TMP_GPARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TMP_GPARowDeletingEvent) Is Nothing) Then
                RaiseEvent TMP_GPARowDeleting(Me, New TMP_GPARowChangeEvent(CType(e.Row,TMP_GPARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTMP_GPARow(ByVal row As TMP_GPARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRpt = New dsRpt
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TMP_GPADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TMP_PROJDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TMP_PROJ"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TMP_PROJRow
            Get
                Return CType(Me.Rows(index),TMP_PROJRow)
            End Get
        End Property
        
        Public Event TMP_PROJRowChanging As TMP_PROJRowChangeEventHandler
        
        Public Event TMP_PROJRowChanged As TMP_PROJRowChangeEventHandler
        
        Public Event TMP_PROJRowDeleting As TMP_PROJRowChangeEventHandler
        
        Public Event TMP_PROJRowDeleted As TMP_PROJRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTMP_PROJRow(ByVal row As TMP_PROJRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTMP_PROJRow(ByVal Project As String) As TMP_PROJRow
            Dim rowTMP_PROJRow As TMP_PROJRow = CType(Me.NewRow,TMP_PROJRow)
            Dim columnValuesArray() As Object = New Object() {Project}
            rowTMP_PROJRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTMP_PROJRow)
            Return rowTMP_PROJRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TMP_PROJDataTable = CType(MyBase.Clone,TMP_PROJDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TMP_PROJDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject = MyBase.Columns("Project")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTMP_PROJRow() As TMP_PROJRow
            Return CType(Me.NewRow,TMP_PROJRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TMP_PROJRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TMP_PROJRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TMP_PROJRowChangedEvent) Is Nothing) Then
                RaiseEvent TMP_PROJRowChanged(Me, New TMP_PROJRowChangeEvent(CType(e.Row,TMP_PROJRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TMP_PROJRowChangingEvent) Is Nothing) Then
                RaiseEvent TMP_PROJRowChanging(Me, New TMP_PROJRowChangeEvent(CType(e.Row,TMP_PROJRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TMP_PROJRowDeletedEvent) Is Nothing) Then
                RaiseEvent TMP_PROJRowDeleted(Me, New TMP_PROJRowChangeEvent(CType(e.Row,TMP_PROJRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TMP_PROJRowDeletingEvent) Is Nothing) Then
                RaiseEvent TMP_PROJRowDeleting(Me, New TMP_PROJRowChangeEvent(CType(e.Row,TMP_PROJRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTMP_PROJRow(ByVal row As TMP_PROJRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRpt = New dsRpt
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TMP_PROJDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TMP_ARIWOAPIRow
        Inherits Global.System.Data.DataRow
        
        Private tableTMP_ARIWOAPI As TMP_ARIWOAPIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTMP_ARIWOAPI = CType(Me.Table,TMP_ARIWOAPIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.ProjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrjName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.PrjNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrjName' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.PrjNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curr() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.CurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Curr' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.CurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.LCAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCAmt' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.LCAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.FCAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCAmt' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.FCAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_ARIWOAPI.CustColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust' in table 'TMP_ARIWOAPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_ARIWOAPI.CustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.ProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectNull()
            Me(Me.tableTMP_ARIWOAPI.ProjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrjNameNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.PrjNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrjNameNull()
            Me(Me.tableTMP_ARIWOAPI.PrjNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableTMP_ARIWOAPI.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableTMP_ARIWOAPI.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableTMP_ARIWOAPI.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.CurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrNull()
            Me(Me.tableTMP_ARIWOAPI.CurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCAmtNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.LCAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCAmtNull()
            Me(Me.tableTMP_ARIWOAPI.LCAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCAmtNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.FCAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCAmtNull()
            Me(Me.tableTMP_ARIWOAPI.FCAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustNull() As Boolean
            Return Me.IsNull(Me.tableTMP_ARIWOAPI.CustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustNull()
            Me(Me.tableTMP_ARIWOAPI.CustColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TMP_APIWOARDRow
        Inherits Global.System.Data.DataRow
        
        Private tableTMP_APIWOARD As TMP_APIWOARDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTMP_APIWOARD = CType(Me.Table,TMP_APIWOARDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.ProjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrjName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.PrjNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrjName' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.PrjNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curr() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.CurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Curr' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.CurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.LCAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCAmt' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.LCAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.FCAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCAmt' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.FCAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.CustColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.CustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_APIWOARD.RefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref' in table 'TMP_APIWOARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_APIWOARD.RefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.ProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectNull()
            Me(Me.tableTMP_APIWOARD.ProjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrjNameNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.PrjNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrjNameNull()
            Me(Me.tableTMP_APIWOARD.PrjNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableTMP_APIWOARD.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableTMP_APIWOARD.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableTMP_APIWOARD.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.CurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrNull()
            Me(Me.tableTMP_APIWOARD.CurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCAmtNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.LCAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCAmtNull()
            Me(Me.tableTMP_APIWOARD.LCAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCAmtNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.FCAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCAmtNull()
            Me(Me.tableTMP_APIWOARD.FCAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.CustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustNull()
            Me(Me.tableTMP_APIWOARD.CustColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNull() As Boolean
            Return Me.IsNull(Me.tableTMP_APIWOARD.RefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNull()
            Me(Me.tableTMP_APIWOARD.RefColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TMP_GPARow
        Inherits Global.System.Data.DataRow
        
        Private tableTMP_GPA As TMP_GPADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTMP_GPA = CType(Me.Table,TMP_GPADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.ProjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrjName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.PrjNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrjName' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.PrjNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curr() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.CurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Curr' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.CurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.LCAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCAmt' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.LCAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.FCAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCAmt' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.FCAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APDocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.APDocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APDocNum' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.APDocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APFCAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.APFCAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APFCAmt' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.APFCAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APLCAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.APLCAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APLCAmt' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.APLCAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GProfitLC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.GProfitLCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GProfitLC' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.GProfitLCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GProfitPerc() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.GProfitPercColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GProfitPerc' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.GProfitPercColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APDocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.APDocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APDocType' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.APDocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APDocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.APDocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APDocDate' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.APDocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APCurr() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.APCurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APCurr' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.APCurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_GPA.CustColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust' in table 'TMP_GPA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_GPA.CustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.ProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectNull()
            Me(Me.tableTMP_GPA.ProjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrjNameNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.PrjNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrjNameNull()
            Me(Me.tableTMP_GPA.PrjNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableTMP_GPA.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableTMP_GPA.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableTMP_GPA.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.CurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrNull()
            Me(Me.tableTMP_GPA.CurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCAmtNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.LCAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCAmtNull()
            Me(Me.tableTMP_GPA.LCAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCAmtNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.FCAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCAmtNull()
            Me(Me.tableTMP_GPA.FCAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPDocNumNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.APDocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPDocNumNull()
            Me(Me.tableTMP_GPA.APDocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPFCAmtNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.APFCAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPFCAmtNull()
            Me(Me.tableTMP_GPA.APFCAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPLCAmtNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.APLCAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPLCAmtNull()
            Me(Me.tableTMP_GPA.APLCAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGProfitLCNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.GProfitLCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGProfitLCNull()
            Me(Me.tableTMP_GPA.GProfitLCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGProfitPercNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.GProfitPercColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGProfitPercNull()
            Me(Me.tableTMP_GPA.GProfitPercColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.APDocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPDocTypeNull()
            Me(Me.tableTMP_GPA.APDocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPDocDateNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.APDocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPDocDateNull()
            Me(Me.tableTMP_GPA.APDocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPCurrNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.APCurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPCurrNull()
            Me(Me.tableTMP_GPA.APCurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustNull() As Boolean
            Return Me.IsNull(Me.tableTMP_GPA.CustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustNull()
            Me(Me.tableTMP_GPA.CustColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TMP_PROJRow
        Inherits Global.System.Data.DataRow
        
        Private tableTMP_PROJ As TMP_PROJDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTMP_PROJ = CType(Me.Table,TMP_PROJDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_PROJ.ProjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project' in table 'TMP_PROJ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_PROJ.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectNull() As Boolean
            Return Me.IsNull(Me.tableTMP_PROJ.ProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectNull()
            Me(Me.tableTMP_PROJ.ProjectColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TMP_ARIWOAPIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TMP_ARIWOAPIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TMP_ARIWOAPIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TMP_ARIWOAPIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TMP_APIWOARDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TMP_APIWOARDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TMP_APIWOARDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TMP_APIWOARDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TMP_GPARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TMP_GPARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TMP_GPARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TMP_GPARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TMP_PROJRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TMP_PROJRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TMP_PROJRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TMP_PROJRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
