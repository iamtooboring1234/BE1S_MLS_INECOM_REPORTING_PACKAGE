'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DS_PAYMENT"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DS_PAYMENT
    Inherits Global.System.Data.DataSet
    
    Private tableOVPM As OVPMDataTable
    
    Private tableADM1 As ADM1DataTable
    
    Private tableOADM As OADMDataTable
    
    Private tableOACT As OACTDataTable
    
    Private tableVPM1 As VPM1DataTable
    
    Private tableVPM4 As VPM4DataTable
    
    Private tableVPM3 As VPM3DataTable
    
    Private tableVPM2 As VPM2DataTable
    
    Private tableNCM_NNM1_1 As NCM_NNM1_1DataTable
    
    Private tableNCM_NNM1_2 As NCM_NNM1_2DataTable
    
    Private tableNCM_NNM1_3 As NCM_NNM1_3DataTable
    
    Private tableNCM_NNM1_4 As NCM_NNM1_4DataTable
    
    Private tableNCM_NNM1_5 As NCM_NNM1_5DataTable
    
    Private tableNCM_NNM1_6 As NCM_NNM1_6DataTable
    
    Private tableNCM_NNM1_7 As NCM_NNM1_7DataTable
    
    Private tableOJDT As OJDTDataTable
    
    Private tableINV1 As INV1DataTable
    
    Private tableRIN1 As RIN1DataTable
    
    Private tablePCH1 As PCH1DataTable
    
    Private tableDPO1 As DPO1DataTable
    
    Private tableRPC1 As RPC1DataTable
    
    Private tableDPI1 As DPI1DataTable
    
    Private tableOINV As OINVDataTable
    
    Private tableORPC As ORPCDataTable
    
    Private tableORIN As ORINDataTable
    
    Private tableOPCH As OPCHDataTable
    
    Private tableODPI As ODPIDataTable
    
    Private tableODPO As ODPODataTable
    
    Private tableNNM1 As NNM1DataTable
    
    Private _table_NCM_IMAGE As __NCM_IMAGEDataTable
    
    Private tableOPDF As OPDFDataTable
    
    Private tablePDF1 As PDF1DataTable
    
    Private tablePDF4 As PDF4DataTable
    
    Private tablePDF2 As PDF2DataTable
    
    Private tablePDF3 As PDF3DataTable
    
    Private tableNCM_VIEW_DRAFTPV_INVOICE As NCM_VIEW_DRAFTPV_INVOICEDataTable
    
    Private tableORCT As ORCTDataTable
    
    Private tableOUSR As OUSRDataTable
    
    Private tableRCT2 As RCT2DataTable
    
    Private tableRCT3 As RCT3DataTable
    
    Private tableRCT4 As RCT4DataTable
    
    Private tableRCT1 As RCT1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OVPM")) Is Nothing) Then
                MyBase.Tables.Add(New OVPMDataTable(ds.Tables("OVPM")))
            End If
            If (Not (ds.Tables("ADM1")) Is Nothing) Then
                MyBase.Tables.Add(New ADM1DataTable(ds.Tables("ADM1")))
            End If
            If (Not (ds.Tables("OADM")) Is Nothing) Then
                MyBase.Tables.Add(New OADMDataTable(ds.Tables("OADM")))
            End If
            If (Not (ds.Tables("OACT")) Is Nothing) Then
                MyBase.Tables.Add(New OACTDataTable(ds.Tables("OACT")))
            End If
            If (Not (ds.Tables("VPM1")) Is Nothing) Then
                MyBase.Tables.Add(New VPM1DataTable(ds.Tables("VPM1")))
            End If
            If (Not (ds.Tables("VPM4")) Is Nothing) Then
                MyBase.Tables.Add(New VPM4DataTable(ds.Tables("VPM4")))
            End If
            If (Not (ds.Tables("VPM3")) Is Nothing) Then
                MyBase.Tables.Add(New VPM3DataTable(ds.Tables("VPM3")))
            End If
            If (Not (ds.Tables("VPM2")) Is Nothing) Then
                MyBase.Tables.Add(New VPM2DataTable(ds.Tables("VPM2")))
            End If
            If (Not (ds.Tables("NCM_NNM1_1")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_1DataTable(ds.Tables("NCM_NNM1_1")))
            End If
            If (Not (ds.Tables("NCM_NNM1_2")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_2DataTable(ds.Tables("NCM_NNM1_2")))
            End If
            If (Not (ds.Tables("NCM_NNM1_3")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_3DataTable(ds.Tables("NCM_NNM1_3")))
            End If
            If (Not (ds.Tables("NCM_NNM1_4")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_4DataTable(ds.Tables("NCM_NNM1_4")))
            End If
            If (Not (ds.Tables("NCM_NNM1_5")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_5DataTable(ds.Tables("NCM_NNM1_5")))
            End If
            If (Not (ds.Tables("NCM_NNM1_6")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_6DataTable(ds.Tables("NCM_NNM1_6")))
            End If
            If (Not (ds.Tables("NCM_NNM1_7")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_7DataTable(ds.Tables("NCM_NNM1_7")))
            End If
            If (Not (ds.Tables("OJDT")) Is Nothing) Then
                MyBase.Tables.Add(New OJDTDataTable(ds.Tables("OJDT")))
            End If
            If (Not (ds.Tables("INV1")) Is Nothing) Then
                MyBase.Tables.Add(New INV1DataTable(ds.Tables("INV1")))
            End If
            If (Not (ds.Tables("RIN1")) Is Nothing) Then
                MyBase.Tables.Add(New RIN1DataTable(ds.Tables("RIN1")))
            End If
            If (Not (ds.Tables("PCH1")) Is Nothing) Then
                MyBase.Tables.Add(New PCH1DataTable(ds.Tables("PCH1")))
            End If
            If (Not (ds.Tables("DPO1")) Is Nothing) Then
                MyBase.Tables.Add(New DPO1DataTable(ds.Tables("DPO1")))
            End If
            If (Not (ds.Tables("RPC1")) Is Nothing) Then
                MyBase.Tables.Add(New RPC1DataTable(ds.Tables("RPC1")))
            End If
            If (Not (ds.Tables("DPI1")) Is Nothing) Then
                MyBase.Tables.Add(New DPI1DataTable(ds.Tables("DPI1")))
            End If
            If (Not (ds.Tables("OINV")) Is Nothing) Then
                MyBase.Tables.Add(New OINVDataTable(ds.Tables("OINV")))
            End If
            If (Not (ds.Tables("ORPC")) Is Nothing) Then
                MyBase.Tables.Add(New ORPCDataTable(ds.Tables("ORPC")))
            End If
            If (Not (ds.Tables("ORIN")) Is Nothing) Then
                MyBase.Tables.Add(New ORINDataTable(ds.Tables("ORIN")))
            End If
            If (Not (ds.Tables("OPCH")) Is Nothing) Then
                MyBase.Tables.Add(New OPCHDataTable(ds.Tables("OPCH")))
            End If
            If (Not (ds.Tables("ODPI")) Is Nothing) Then
                MyBase.Tables.Add(New ODPIDataTable(ds.Tables("ODPI")))
            End If
            If (Not (ds.Tables("ODPO")) Is Nothing) Then
                MyBase.Tables.Add(New ODPODataTable(ds.Tables("ODPO")))
            End If
            If (Not (ds.Tables("NNM1")) Is Nothing) Then
                MyBase.Tables.Add(New NNM1DataTable(ds.Tables("NNM1")))
            End If
            If (Not (ds.Tables("@NCM_IMAGE")) Is Nothing) Then
                MyBase.Tables.Add(New __NCM_IMAGEDataTable(ds.Tables("@NCM_IMAGE")))
            End If
            If (Not (ds.Tables("OPDF")) Is Nothing) Then
                MyBase.Tables.Add(New OPDFDataTable(ds.Tables("OPDF")))
            End If
            If (Not (ds.Tables("PDF1")) Is Nothing) Then
                MyBase.Tables.Add(New PDF1DataTable(ds.Tables("PDF1")))
            End If
            If (Not (ds.Tables("PDF4")) Is Nothing) Then
                MyBase.Tables.Add(New PDF4DataTable(ds.Tables("PDF4")))
            End If
            If (Not (ds.Tables("PDF2")) Is Nothing) Then
                MyBase.Tables.Add(New PDF2DataTable(ds.Tables("PDF2")))
            End If
            If (Not (ds.Tables("PDF3")) Is Nothing) Then
                MyBase.Tables.Add(New PDF3DataTable(ds.Tables("PDF3")))
            End If
            If (Not (ds.Tables("NCM_VIEW_DRAFTPV_INVOICE")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_VIEW_DRAFTPV_INVOICEDataTable(ds.Tables("NCM_VIEW_DRAFTPV_INVOICE")))
            End If
            If (Not (ds.Tables("ORCT")) Is Nothing) Then
                MyBase.Tables.Add(New ORCTDataTable(ds.Tables("ORCT")))
            End If
            If (Not (ds.Tables("OUSR")) Is Nothing) Then
                MyBase.Tables.Add(New OUSRDataTable(ds.Tables("OUSR")))
            End If
            If (Not (ds.Tables("RCT2")) Is Nothing) Then
                MyBase.Tables.Add(New RCT2DataTable(ds.Tables("RCT2")))
            End If
            If (Not (ds.Tables("RCT3")) Is Nothing) Then
                MyBase.Tables.Add(New RCT3DataTable(ds.Tables("RCT3")))
            End If
            If (Not (ds.Tables("RCT4")) Is Nothing) Then
                MyBase.Tables.Add(New RCT4DataTable(ds.Tables("RCT4")))
            End If
            If (Not (ds.Tables("RCT1")) Is Nothing) Then
                MyBase.Tables.Add(New RCT1DataTable(ds.Tables("RCT1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OVPM() As OVPMDataTable
        Get
            Return Me.tableOVPM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ADM1() As ADM1DataTable
        Get
            Return Me.tableADM1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OADM() As OADMDataTable
        Get
            Return Me.tableOADM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OACT() As OACTDataTable
        Get
            Return Me.tableOACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VPM1() As VPM1DataTable
        Get
            Return Me.tableVPM1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VPM4() As VPM4DataTable
        Get
            Return Me.tableVPM4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VPM3() As VPM3DataTable
        Get
            Return Me.tableVPM3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VPM2() As VPM2DataTable
        Get
            Return Me.tableVPM2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_NNM1_1() As NCM_NNM1_1DataTable
        Get
            Return Me.tableNCM_NNM1_1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_NNM1_2() As NCM_NNM1_2DataTable
        Get
            Return Me.tableNCM_NNM1_2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_NNM1_3() As NCM_NNM1_3DataTable
        Get
            Return Me.tableNCM_NNM1_3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_NNM1_4() As NCM_NNM1_4DataTable
        Get
            Return Me.tableNCM_NNM1_4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_NNM1_5() As NCM_NNM1_5DataTable
        Get
            Return Me.tableNCM_NNM1_5
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_NNM1_6() As NCM_NNM1_6DataTable
        Get
            Return Me.tableNCM_NNM1_6
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_NNM1_7() As NCM_NNM1_7DataTable
        Get
            Return Me.tableNCM_NNM1_7
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OJDT() As OJDTDataTable
        Get
            Return Me.tableOJDT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INV1() As INV1DataTable
        Get
            Return Me.tableINV1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RIN1() As RIN1DataTable
        Get
            Return Me.tableRIN1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PCH1() As PCH1DataTable
        Get
            Return Me.tablePCH1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DPO1() As DPO1DataTable
        Get
            Return Me.tableDPO1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RPC1() As RPC1DataTable
        Get
            Return Me.tableRPC1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DPI1() As DPI1DataTable
        Get
            Return Me.tableDPI1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OINV() As OINVDataTable
        Get
            Return Me.tableOINV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORPC() As ORPCDataTable
        Get
            Return Me.tableORPC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORIN() As ORINDataTable
        Get
            Return Me.tableORIN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OPCH() As OPCHDataTable
        Get
            Return Me.tableOPCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ODPI() As ODPIDataTable
        Get
            Return Me.tableODPI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ODPO() As ODPODataTable
        Get
            Return Me.tableODPO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NNM1() As NNM1DataTable
        Get
            Return Me.tableNNM1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property __NCM_IMAGE() As __NCM_IMAGEDataTable
        Get
            Return Me._table_NCM_IMAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OPDF() As OPDFDataTable
        Get
            Return Me.tableOPDF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PDF1() As PDF1DataTable
        Get
            Return Me.tablePDF1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PDF4() As PDF4DataTable
        Get
            Return Me.tablePDF4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PDF2() As PDF2DataTable
        Get
            Return Me.tablePDF2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PDF3() As PDF3DataTable
        Get
            Return Me.tablePDF3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NCM_VIEW_DRAFTPV_INVOICE() As NCM_VIEW_DRAFTPV_INVOICEDataTable
        Get
            Return Me.tableNCM_VIEW_DRAFTPV_INVOICE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORCT() As ORCTDataTable
        Get
            Return Me.tableORCT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OUSR() As OUSRDataTable
        Get
            Return Me.tableOUSR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RCT2() As RCT2DataTable
        Get
            Return Me.tableRCT2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RCT3() As RCT3DataTable
        Get
            Return Me.tableRCT3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RCT4() As RCT4DataTable
        Get
            Return Me.tableRCT4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RCT1() As RCT1DataTable
        Get
            Return Me.tableRCT1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DS_PAYMENT = CType(MyBase.Clone,DS_PAYMENT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("OVPM")) Is Nothing) Then
                MyBase.Tables.Add(New OVPMDataTable(ds.Tables("OVPM")))
            End If
            If (Not (ds.Tables("ADM1")) Is Nothing) Then
                MyBase.Tables.Add(New ADM1DataTable(ds.Tables("ADM1")))
            End If
            If (Not (ds.Tables("OADM")) Is Nothing) Then
                MyBase.Tables.Add(New OADMDataTable(ds.Tables("OADM")))
            End If
            If (Not (ds.Tables("OACT")) Is Nothing) Then
                MyBase.Tables.Add(New OACTDataTable(ds.Tables("OACT")))
            End If
            If (Not (ds.Tables("VPM1")) Is Nothing) Then
                MyBase.Tables.Add(New VPM1DataTable(ds.Tables("VPM1")))
            End If
            If (Not (ds.Tables("VPM4")) Is Nothing) Then
                MyBase.Tables.Add(New VPM4DataTable(ds.Tables("VPM4")))
            End If
            If (Not (ds.Tables("VPM3")) Is Nothing) Then
                MyBase.Tables.Add(New VPM3DataTable(ds.Tables("VPM3")))
            End If
            If (Not (ds.Tables("VPM2")) Is Nothing) Then
                MyBase.Tables.Add(New VPM2DataTable(ds.Tables("VPM2")))
            End If
            If (Not (ds.Tables("NCM_NNM1_1")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_1DataTable(ds.Tables("NCM_NNM1_1")))
            End If
            If (Not (ds.Tables("NCM_NNM1_2")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_2DataTable(ds.Tables("NCM_NNM1_2")))
            End If
            If (Not (ds.Tables("NCM_NNM1_3")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_3DataTable(ds.Tables("NCM_NNM1_3")))
            End If
            If (Not (ds.Tables("NCM_NNM1_4")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_4DataTable(ds.Tables("NCM_NNM1_4")))
            End If
            If (Not (ds.Tables("NCM_NNM1_5")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_5DataTable(ds.Tables("NCM_NNM1_5")))
            End If
            If (Not (ds.Tables("NCM_NNM1_6")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_6DataTable(ds.Tables("NCM_NNM1_6")))
            End If
            If (Not (ds.Tables("NCM_NNM1_7")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_NNM1_7DataTable(ds.Tables("NCM_NNM1_7")))
            End If
            If (Not (ds.Tables("OJDT")) Is Nothing) Then
                MyBase.Tables.Add(New OJDTDataTable(ds.Tables("OJDT")))
            End If
            If (Not (ds.Tables("INV1")) Is Nothing) Then
                MyBase.Tables.Add(New INV1DataTable(ds.Tables("INV1")))
            End If
            If (Not (ds.Tables("RIN1")) Is Nothing) Then
                MyBase.Tables.Add(New RIN1DataTable(ds.Tables("RIN1")))
            End If
            If (Not (ds.Tables("PCH1")) Is Nothing) Then
                MyBase.Tables.Add(New PCH1DataTable(ds.Tables("PCH1")))
            End If
            If (Not (ds.Tables("DPO1")) Is Nothing) Then
                MyBase.Tables.Add(New DPO1DataTable(ds.Tables("DPO1")))
            End If
            If (Not (ds.Tables("RPC1")) Is Nothing) Then
                MyBase.Tables.Add(New RPC1DataTable(ds.Tables("RPC1")))
            End If
            If (Not (ds.Tables("DPI1")) Is Nothing) Then
                MyBase.Tables.Add(New DPI1DataTable(ds.Tables("DPI1")))
            End If
            If (Not (ds.Tables("OINV")) Is Nothing) Then
                MyBase.Tables.Add(New OINVDataTable(ds.Tables("OINV")))
            End If
            If (Not (ds.Tables("ORPC")) Is Nothing) Then
                MyBase.Tables.Add(New ORPCDataTable(ds.Tables("ORPC")))
            End If
            If (Not (ds.Tables("ORIN")) Is Nothing) Then
                MyBase.Tables.Add(New ORINDataTable(ds.Tables("ORIN")))
            End If
            If (Not (ds.Tables("OPCH")) Is Nothing) Then
                MyBase.Tables.Add(New OPCHDataTable(ds.Tables("OPCH")))
            End If
            If (Not (ds.Tables("ODPI")) Is Nothing) Then
                MyBase.Tables.Add(New ODPIDataTable(ds.Tables("ODPI")))
            End If
            If (Not (ds.Tables("ODPO")) Is Nothing) Then
                MyBase.Tables.Add(New ODPODataTable(ds.Tables("ODPO")))
            End If
            If (Not (ds.Tables("NNM1")) Is Nothing) Then
                MyBase.Tables.Add(New NNM1DataTable(ds.Tables("NNM1")))
            End If
            If (Not (ds.Tables("@NCM_IMAGE")) Is Nothing) Then
                MyBase.Tables.Add(New __NCM_IMAGEDataTable(ds.Tables("@NCM_IMAGE")))
            End If
            If (Not (ds.Tables("OPDF")) Is Nothing) Then
                MyBase.Tables.Add(New OPDFDataTable(ds.Tables("OPDF")))
            End If
            If (Not (ds.Tables("PDF1")) Is Nothing) Then
                MyBase.Tables.Add(New PDF1DataTable(ds.Tables("PDF1")))
            End If
            If (Not (ds.Tables("PDF4")) Is Nothing) Then
                MyBase.Tables.Add(New PDF4DataTable(ds.Tables("PDF4")))
            End If
            If (Not (ds.Tables("PDF2")) Is Nothing) Then
                MyBase.Tables.Add(New PDF2DataTable(ds.Tables("PDF2")))
            End If
            If (Not (ds.Tables("PDF3")) Is Nothing) Then
                MyBase.Tables.Add(New PDF3DataTable(ds.Tables("PDF3")))
            End If
            If (Not (ds.Tables("NCM_VIEW_DRAFTPV_INVOICE")) Is Nothing) Then
                MyBase.Tables.Add(New NCM_VIEW_DRAFTPV_INVOICEDataTable(ds.Tables("NCM_VIEW_DRAFTPV_INVOICE")))
            End If
            If (Not (ds.Tables("ORCT")) Is Nothing) Then
                MyBase.Tables.Add(New ORCTDataTable(ds.Tables("ORCT")))
            End If
            If (Not (ds.Tables("OUSR")) Is Nothing) Then
                MyBase.Tables.Add(New OUSRDataTable(ds.Tables("OUSR")))
            End If
            If (Not (ds.Tables("RCT2")) Is Nothing) Then
                MyBase.Tables.Add(New RCT2DataTable(ds.Tables("RCT2")))
            End If
            If (Not (ds.Tables("RCT3")) Is Nothing) Then
                MyBase.Tables.Add(New RCT3DataTable(ds.Tables("RCT3")))
            End If
            If (Not (ds.Tables("RCT4")) Is Nothing) Then
                MyBase.Tables.Add(New RCT4DataTable(ds.Tables("RCT4")))
            End If
            If (Not (ds.Tables("RCT1")) Is Nothing) Then
                MyBase.Tables.Add(New RCT1DataTable(ds.Tables("RCT1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableOVPM = CType(MyBase.Tables("OVPM"),OVPMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOVPM) Is Nothing) Then
                Me.tableOVPM.InitVars
            End If
        End If
        Me.tableADM1 = CType(MyBase.Tables("ADM1"),ADM1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableADM1) Is Nothing) Then
                Me.tableADM1.InitVars
            End If
        End If
        Me.tableOADM = CType(MyBase.Tables("OADM"),OADMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOADM) Is Nothing) Then
                Me.tableOADM.InitVars
            End If
        End If
        Me.tableOACT = CType(MyBase.Tables("OACT"),OACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOACT) Is Nothing) Then
                Me.tableOACT.InitVars
            End If
        End If
        Me.tableVPM1 = CType(MyBase.Tables("VPM1"),VPM1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableVPM1) Is Nothing) Then
                Me.tableVPM1.InitVars
            End If
        End If
        Me.tableVPM4 = CType(MyBase.Tables("VPM4"),VPM4DataTable)
        If (initTable = true) Then
            If (Not (Me.tableVPM4) Is Nothing) Then
                Me.tableVPM4.InitVars
            End If
        End If
        Me.tableVPM3 = CType(MyBase.Tables("VPM3"),VPM3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableVPM3) Is Nothing) Then
                Me.tableVPM3.InitVars
            End If
        End If
        Me.tableVPM2 = CType(MyBase.Tables("VPM2"),VPM2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableVPM2) Is Nothing) Then
                Me.tableVPM2.InitVars
            End If
        End If
        Me.tableNCM_NNM1_1 = CType(MyBase.Tables("NCM_NNM1_1"),NCM_NNM1_1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_NNM1_1) Is Nothing) Then
                Me.tableNCM_NNM1_1.InitVars
            End If
        End If
        Me.tableNCM_NNM1_2 = CType(MyBase.Tables("NCM_NNM1_2"),NCM_NNM1_2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_NNM1_2) Is Nothing) Then
                Me.tableNCM_NNM1_2.InitVars
            End If
        End If
        Me.tableNCM_NNM1_3 = CType(MyBase.Tables("NCM_NNM1_3"),NCM_NNM1_3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_NNM1_3) Is Nothing) Then
                Me.tableNCM_NNM1_3.InitVars
            End If
        End If
        Me.tableNCM_NNM1_4 = CType(MyBase.Tables("NCM_NNM1_4"),NCM_NNM1_4DataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_NNM1_4) Is Nothing) Then
                Me.tableNCM_NNM1_4.InitVars
            End If
        End If
        Me.tableNCM_NNM1_5 = CType(MyBase.Tables("NCM_NNM1_5"),NCM_NNM1_5DataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_NNM1_5) Is Nothing) Then
                Me.tableNCM_NNM1_5.InitVars
            End If
        End If
        Me.tableNCM_NNM1_6 = CType(MyBase.Tables("NCM_NNM1_6"),NCM_NNM1_6DataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_NNM1_6) Is Nothing) Then
                Me.tableNCM_NNM1_6.InitVars
            End If
        End If
        Me.tableNCM_NNM1_7 = CType(MyBase.Tables("NCM_NNM1_7"),NCM_NNM1_7DataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_NNM1_7) Is Nothing) Then
                Me.tableNCM_NNM1_7.InitVars
            End If
        End If
        Me.tableOJDT = CType(MyBase.Tables("OJDT"),OJDTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOJDT) Is Nothing) Then
                Me.tableOJDT.InitVars
            End If
        End If
        Me.tableINV1 = CType(MyBase.Tables("INV1"),INV1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableINV1) Is Nothing) Then
                Me.tableINV1.InitVars
            End If
        End If
        Me.tableRIN1 = CType(MyBase.Tables("RIN1"),RIN1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableRIN1) Is Nothing) Then
                Me.tableRIN1.InitVars
            End If
        End If
        Me.tablePCH1 = CType(MyBase.Tables("PCH1"),PCH1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePCH1) Is Nothing) Then
                Me.tablePCH1.InitVars
            End If
        End If
        Me.tableDPO1 = CType(MyBase.Tables("DPO1"),DPO1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDPO1) Is Nothing) Then
                Me.tableDPO1.InitVars
            End If
        End If
        Me.tableRPC1 = CType(MyBase.Tables("RPC1"),RPC1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableRPC1) Is Nothing) Then
                Me.tableRPC1.InitVars
            End If
        End If
        Me.tableDPI1 = CType(MyBase.Tables("DPI1"),DPI1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDPI1) Is Nothing) Then
                Me.tableDPI1.InitVars
            End If
        End If
        Me.tableOINV = CType(MyBase.Tables("OINV"),OINVDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOINV) Is Nothing) Then
                Me.tableOINV.InitVars
            End If
        End If
        Me.tableORPC = CType(MyBase.Tables("ORPC"),ORPCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableORPC) Is Nothing) Then
                Me.tableORPC.InitVars
            End If
        End If
        Me.tableORIN = CType(MyBase.Tables("ORIN"),ORINDataTable)
        If (initTable = true) Then
            If (Not (Me.tableORIN) Is Nothing) Then
                Me.tableORIN.InitVars
            End If
        End If
        Me.tableOPCH = CType(MyBase.Tables("OPCH"),OPCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOPCH) Is Nothing) Then
                Me.tableOPCH.InitVars
            End If
        End If
        Me.tableODPI = CType(MyBase.Tables("ODPI"),ODPIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableODPI) Is Nothing) Then
                Me.tableODPI.InitVars
            End If
        End If
        Me.tableODPO = CType(MyBase.Tables("ODPO"),ODPODataTable)
        If (initTable = true) Then
            If (Not (Me.tableODPO) Is Nothing) Then
                Me.tableODPO.InitVars
            End If
        End If
        Me.tableNNM1 = CType(MyBase.Tables("NNM1"),NNM1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableNNM1) Is Nothing) Then
                Me.tableNNM1.InitVars
            End If
        End If
        Me._table_NCM_IMAGE = CType(MyBase.Tables("@NCM_IMAGE"),__NCM_IMAGEDataTable)
        If (initTable = true) Then
            If (Not (Me._table_NCM_IMAGE) Is Nothing) Then
                Me._table_NCM_IMAGE.InitVars
            End If
        End If
        Me.tableOPDF = CType(MyBase.Tables("OPDF"),OPDFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOPDF) Is Nothing) Then
                Me.tableOPDF.InitVars
            End If
        End If
        Me.tablePDF1 = CType(MyBase.Tables("PDF1"),PDF1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePDF1) Is Nothing) Then
                Me.tablePDF1.InitVars
            End If
        End If
        Me.tablePDF4 = CType(MyBase.Tables("PDF4"),PDF4DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePDF4) Is Nothing) Then
                Me.tablePDF4.InitVars
            End If
        End If
        Me.tablePDF2 = CType(MyBase.Tables("PDF2"),PDF2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePDF2) Is Nothing) Then
                Me.tablePDF2.InitVars
            End If
        End If
        Me.tablePDF3 = CType(MyBase.Tables("PDF3"),PDF3DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePDF3) Is Nothing) Then
                Me.tablePDF3.InitVars
            End If
        End If
        Me.tableNCM_VIEW_DRAFTPV_INVOICE = CType(MyBase.Tables("NCM_VIEW_DRAFTPV_INVOICE"),NCM_VIEW_DRAFTPV_INVOICEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNCM_VIEW_DRAFTPV_INVOICE) Is Nothing) Then
                Me.tableNCM_VIEW_DRAFTPV_INVOICE.InitVars
            End If
        End If
        Me.tableORCT = CType(MyBase.Tables("ORCT"),ORCTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableORCT) Is Nothing) Then
                Me.tableORCT.InitVars
            End If
        End If
        Me.tableOUSR = CType(MyBase.Tables("OUSR"),OUSRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOUSR) Is Nothing) Then
                Me.tableOUSR.InitVars
            End If
        End If
        Me.tableRCT2 = CType(MyBase.Tables("RCT2"),RCT2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableRCT2) Is Nothing) Then
                Me.tableRCT2.InitVars
            End If
        End If
        Me.tableRCT3 = CType(MyBase.Tables("RCT3"),RCT3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableRCT3) Is Nothing) Then
                Me.tableRCT3.InitVars
            End If
        End If
        Me.tableRCT4 = CType(MyBase.Tables("RCT4"),RCT4DataTable)
        If (initTable = true) Then
            If (Not (Me.tableRCT4) Is Nothing) Then
                Me.tableRCT4.InitVars
            End If
        End If
        Me.tableRCT1 = CType(MyBase.Tables("RCT1"),RCT1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableRCT1) Is Nothing) Then
                Me.tableRCT1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DS_PAYMENT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DS_PAYMENT.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableOVPM = New OVPMDataTable
        MyBase.Tables.Add(Me.tableOVPM)
        Me.tableADM1 = New ADM1DataTable
        MyBase.Tables.Add(Me.tableADM1)
        Me.tableOADM = New OADMDataTable
        MyBase.Tables.Add(Me.tableOADM)
        Me.tableOACT = New OACTDataTable
        MyBase.Tables.Add(Me.tableOACT)
        Me.tableVPM1 = New VPM1DataTable
        MyBase.Tables.Add(Me.tableVPM1)
        Me.tableVPM4 = New VPM4DataTable
        MyBase.Tables.Add(Me.tableVPM4)
        Me.tableVPM3 = New VPM3DataTable
        MyBase.Tables.Add(Me.tableVPM3)
        Me.tableVPM2 = New VPM2DataTable
        MyBase.Tables.Add(Me.tableVPM2)
        Me.tableNCM_NNM1_1 = New NCM_NNM1_1DataTable
        MyBase.Tables.Add(Me.tableNCM_NNM1_1)
        Me.tableNCM_NNM1_2 = New NCM_NNM1_2DataTable
        MyBase.Tables.Add(Me.tableNCM_NNM1_2)
        Me.tableNCM_NNM1_3 = New NCM_NNM1_3DataTable
        MyBase.Tables.Add(Me.tableNCM_NNM1_3)
        Me.tableNCM_NNM1_4 = New NCM_NNM1_4DataTable
        MyBase.Tables.Add(Me.tableNCM_NNM1_4)
        Me.tableNCM_NNM1_5 = New NCM_NNM1_5DataTable
        MyBase.Tables.Add(Me.tableNCM_NNM1_5)
        Me.tableNCM_NNM1_6 = New NCM_NNM1_6DataTable
        MyBase.Tables.Add(Me.tableNCM_NNM1_6)
        Me.tableNCM_NNM1_7 = New NCM_NNM1_7DataTable
        MyBase.Tables.Add(Me.tableNCM_NNM1_7)
        Me.tableOJDT = New OJDTDataTable
        MyBase.Tables.Add(Me.tableOJDT)
        Me.tableINV1 = New INV1DataTable
        MyBase.Tables.Add(Me.tableINV1)
        Me.tableRIN1 = New RIN1DataTable
        MyBase.Tables.Add(Me.tableRIN1)
        Me.tablePCH1 = New PCH1DataTable
        MyBase.Tables.Add(Me.tablePCH1)
        Me.tableDPO1 = New DPO1DataTable
        MyBase.Tables.Add(Me.tableDPO1)
        Me.tableRPC1 = New RPC1DataTable
        MyBase.Tables.Add(Me.tableRPC1)
        Me.tableDPI1 = New DPI1DataTable
        MyBase.Tables.Add(Me.tableDPI1)
        Me.tableOINV = New OINVDataTable
        MyBase.Tables.Add(Me.tableOINV)
        Me.tableORPC = New ORPCDataTable
        MyBase.Tables.Add(Me.tableORPC)
        Me.tableORIN = New ORINDataTable
        MyBase.Tables.Add(Me.tableORIN)
        Me.tableOPCH = New OPCHDataTable
        MyBase.Tables.Add(Me.tableOPCH)
        Me.tableODPI = New ODPIDataTable
        MyBase.Tables.Add(Me.tableODPI)
        Me.tableODPO = New ODPODataTable
        MyBase.Tables.Add(Me.tableODPO)
        Me.tableNNM1 = New NNM1DataTable
        MyBase.Tables.Add(Me.tableNNM1)
        Me._table_NCM_IMAGE = New __NCM_IMAGEDataTable
        MyBase.Tables.Add(Me._table_NCM_IMAGE)
        Me.tableOPDF = New OPDFDataTable
        MyBase.Tables.Add(Me.tableOPDF)
        Me.tablePDF1 = New PDF1DataTable
        MyBase.Tables.Add(Me.tablePDF1)
        Me.tablePDF4 = New PDF4DataTable
        MyBase.Tables.Add(Me.tablePDF4)
        Me.tablePDF2 = New PDF2DataTable
        MyBase.Tables.Add(Me.tablePDF2)
        Me.tablePDF3 = New PDF3DataTable
        MyBase.Tables.Add(Me.tablePDF3)
        Me.tableNCM_VIEW_DRAFTPV_INVOICE = New NCM_VIEW_DRAFTPV_INVOICEDataTable
        MyBase.Tables.Add(Me.tableNCM_VIEW_DRAFTPV_INVOICE)
        Me.tableORCT = New ORCTDataTable
        MyBase.Tables.Add(Me.tableORCT)
        Me.tableOUSR = New OUSRDataTable
        MyBase.Tables.Add(Me.tableOUSR)
        Me.tableRCT2 = New RCT2DataTable
        MyBase.Tables.Add(Me.tableRCT2)
        Me.tableRCT3 = New RCT3DataTable
        MyBase.Tables.Add(Me.tableRCT3)
        Me.tableRCT4 = New RCT4DataTable
        MyBase.Tables.Add(Me.tableRCT4)
        Me.tableRCT1 = New RCT1DataTable
        MyBase.Tables.Add(Me.tableRCT1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOVPM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeADM1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOADM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVPM1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVPM4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVPM3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVPM2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_NNM1_1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_NNM1_2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_NNM1_3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_NNM1_4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_NNM1_5() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_NNM1_6() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_NNM1_7() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOJDT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINV1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRIN1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePCH1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDPO1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRPC1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDPI1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOINV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORPC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORIN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOPCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeODPI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeODPO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNNM1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize__NCM_IMAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOPDF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePDF1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePDF4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePDF2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePDF3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNCM_VIEW_DRAFTPV_INVOICE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORCT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOUSR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRCT2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRCT3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRCT4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRCT1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DS_PAYMENT = New DS_PAYMENT
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub OVPMRowChangeEventHandler(ByVal sender As Object, ByVal e As OVPMRowChangeEvent)
    
    Public Delegate Sub ADM1RowChangeEventHandler(ByVal sender As Object, ByVal e As ADM1RowChangeEvent)
    
    Public Delegate Sub OADMRowChangeEventHandler(ByVal sender As Object, ByVal e As OADMRowChangeEvent)
    
    Public Delegate Sub OACTRowChangeEventHandler(ByVal sender As Object, ByVal e As OACTRowChangeEvent)
    
    Public Delegate Sub VPM1RowChangeEventHandler(ByVal sender As Object, ByVal e As VPM1RowChangeEvent)
    
    Public Delegate Sub VPM4RowChangeEventHandler(ByVal sender As Object, ByVal e As VPM4RowChangeEvent)
    
    Public Delegate Sub VPM3RowChangeEventHandler(ByVal sender As Object, ByVal e As VPM3RowChangeEvent)
    
    Public Delegate Sub VPM2RowChangeEventHandler(ByVal sender As Object, ByVal e As VPM2RowChangeEvent)
    
    Public Delegate Sub NCM_NNM1_1RowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_NNM1_1RowChangeEvent)
    
    Public Delegate Sub NCM_NNM1_2RowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_NNM1_2RowChangeEvent)
    
    Public Delegate Sub NCM_NNM1_3RowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_NNM1_3RowChangeEvent)
    
    Public Delegate Sub NCM_NNM1_4RowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_NNM1_4RowChangeEvent)
    
    Public Delegate Sub NCM_NNM1_5RowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_NNM1_5RowChangeEvent)
    
    Public Delegate Sub NCM_NNM1_6RowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_NNM1_6RowChangeEvent)
    
    Public Delegate Sub NCM_NNM1_7RowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_NNM1_7RowChangeEvent)
    
    Public Delegate Sub OJDTRowChangeEventHandler(ByVal sender As Object, ByVal e As OJDTRowChangeEvent)
    
    Public Delegate Sub INV1RowChangeEventHandler(ByVal sender As Object, ByVal e As INV1RowChangeEvent)
    
    Public Delegate Sub RIN1RowChangeEventHandler(ByVal sender As Object, ByVal e As RIN1RowChangeEvent)
    
    Public Delegate Sub PCH1RowChangeEventHandler(ByVal sender As Object, ByVal e As PCH1RowChangeEvent)
    
    Public Delegate Sub DPO1RowChangeEventHandler(ByVal sender As Object, ByVal e As DPO1RowChangeEvent)
    
    Public Delegate Sub RPC1RowChangeEventHandler(ByVal sender As Object, ByVal e As RPC1RowChangeEvent)
    
    Public Delegate Sub DPI1RowChangeEventHandler(ByVal sender As Object, ByVal e As DPI1RowChangeEvent)
    
    Public Delegate Sub OINVRowChangeEventHandler(ByVal sender As Object, ByVal e As OINVRowChangeEvent)
    
    Public Delegate Sub ORPCRowChangeEventHandler(ByVal sender As Object, ByVal e As ORPCRowChangeEvent)
    
    Public Delegate Sub ORINRowChangeEventHandler(ByVal sender As Object, ByVal e As ORINRowChangeEvent)
    
    Public Delegate Sub OPCHRowChangeEventHandler(ByVal sender As Object, ByVal e As OPCHRowChangeEvent)
    
    Public Delegate Sub ODPIRowChangeEventHandler(ByVal sender As Object, ByVal e As ODPIRowChangeEvent)
    
    Public Delegate Sub ODPORowChangeEventHandler(ByVal sender As Object, ByVal e As ODPORowChangeEvent)
    
    Public Delegate Sub NNM1RowChangeEventHandler(ByVal sender As Object, ByVal e As NNM1RowChangeEvent)
    
    Public Delegate Sub __NCM_IMAGERowChangeEventHandler(ByVal sender As Object, ByVal e As __NCM_IMAGERowChangeEvent)
    
    Public Delegate Sub OPDFRowChangeEventHandler(ByVal sender As Object, ByVal e As OPDFRowChangeEvent)
    
    Public Delegate Sub PDF1RowChangeEventHandler(ByVal sender As Object, ByVal e As PDF1RowChangeEvent)
    
    Public Delegate Sub PDF4RowChangeEventHandler(ByVal sender As Object, ByVal e As PDF4RowChangeEvent)
    
    Public Delegate Sub PDF2RowChangeEventHandler(ByVal sender As Object, ByVal e As PDF2RowChangeEvent)
    
    Public Delegate Sub PDF3RowChangeEventHandler(ByVal sender As Object, ByVal e As PDF3RowChangeEvent)
    
    Public Delegate Sub NCM_VIEW_DRAFTPV_INVOICERowChangeEventHandler(ByVal sender As Object, ByVal e As NCM_VIEW_DRAFTPV_INVOICERowChangeEvent)
    
    Public Delegate Sub ORCTRowChangeEventHandler(ByVal sender As Object, ByVal e As ORCTRowChangeEvent)
    
    Public Delegate Sub OUSRRowChangeEventHandler(ByVal sender As Object, ByVal e As OUSRRowChangeEvent)
    
    Public Delegate Sub RCT2RowChangeEventHandler(ByVal sender As Object, ByVal e As RCT2RowChangeEvent)
    
    Public Delegate Sub RCT3RowChangeEventHandler(ByVal sender As Object, ByVal e As RCT3RowChangeEvent)
    
    Public Delegate Sub RCT4RowChangeEventHandler(ByVal sender As Object, ByVal e As RCT4RowChangeEvent)
    
    Public Delegate Sub RCT1RowChangeEventHandler(ByVal sender As Object, ByVal e As RCT1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OVPMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnBcgSum As Global.System.Data.DataColumn
        
        Private columnBcgSumFC As Global.System.Data.DataColumn
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnCardName As Global.System.Data.DataColumn
        
        Private columnCashAcct As Global.System.Data.DataColumn
        
        Private columnCashSum As Global.System.Data.DataColumn
        
        Private columnCashSumFC As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCounterRef As Global.System.Data.DataColumn
        
        Private columnDocCurr As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnRef1 As Global.System.Data.DataColumn
        
        Private columnRef2 As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesStr As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnTransId As Global.System.Data.DataColumn
        
        Private columnTrsfrAcct As Global.System.Data.DataColumn
        
        Private columnTrsfrDate As Global.System.Data.DataColumn
        
        Private columnTrsfrRef As Global.System.Data.DataColumn
        
        Private columnTrsfrSum As Global.System.Data.DataColumn
        
        Private columnTrsfrSumFC As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnDiffCurr As Global.System.Data.DataColumn
        
        Private columnPrjCode As Global.System.Data.DataColumn
        
        Private columnJrnlMemo As Global.System.Data.DataColumn
        
        Private columnContactPerson As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OVPM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BcgSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBcgSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BcgSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBcgSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesStrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesStr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiffCurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiffCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrjCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrjCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JrnlMemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJrnlMemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPerson
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OVPMRow
            Get
                Return CType(Me.Rows(index),OVPMRow)
            End Get
        End Property
        
        Public Event OVPMRowChanging As OVPMRowChangeEventHandler
        
        Public Event OVPMRowChanged As OVPMRowChangeEventHandler
        
        Public Event OVPMRowDeleting As OVPMRowChangeEventHandler
        
        Public Event OVPMRowDeleted As OVPMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOVPMRow(ByVal row As OVPMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOVPMRow( _
                    ByVal Address As String,  _
                    ByVal BcgSum As Decimal,  _
                    ByVal BcgSumFC As Decimal,  _
                    ByVal CardCode As String,  _
                    ByVal CardName As String,  _
                    ByVal CashAcct As String,  _
                    ByVal CashSum As Decimal,  _
                    ByVal CashSumFC As Decimal,  _
                    ByVal Comments As String,  _
                    ByVal CounterRef As String,  _
                    ByVal DocCurr As String,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal Ref1 As String,  _
                    ByVal Ref2 As String,  _
                    ByVal Series As Integer,  _
                    ByVal SeriesStr As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal TransId As Integer,  _
                    ByVal TrsfrAcct As String,  _
                    ByVal TrsfrDate As Date,  _
                    ByVal TrsfrRef As String,  _
                    ByVal TrsfrSum As Decimal,  _
                    ByVal TrsfrSumFC As Decimal,  _
                    ByVal LogInstanc As Integer,  _
                    ByVal DiffCurr As String,  _
                    ByVal PrjCode As String,  _
                    ByVal JrnlMemo As String,  _
                    ByVal ContactPerson As String) As OVPMRow
            Dim rowOVPMRow As OVPMRow = CType(Me.NewRow,OVPMRow)
            Dim columnValuesArray() As Object = New Object() {Address, BcgSum, BcgSumFC, CardCode, CardName, CashAcct, CashSum, CashSumFC, Comments, CounterRef, DocCurr, DocDate, DocDueDate, DocEntry, DocNum, DocRate, DocTotal, DocTotalFC, DocType, Ref1, Ref2, Series, SeriesStr, TaxDate, TransId, TrsfrAcct, TrsfrDate, TrsfrRef, TrsfrSum, TrsfrSumFC, LogInstanc, DiffCurr, PrjCode, JrnlMemo, ContactPerson}
            rowOVPMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOVPMRow)
            Return rowOVPMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OVPMDataTable = CType(MyBase.Clone,OVPMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OVPMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnBcgSum = MyBase.Columns("BcgSum")
            Me.columnBcgSumFC = MyBase.Columns("BcgSumFC")
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnCardName = MyBase.Columns("CardName")
            Me.columnCashAcct = MyBase.Columns("CashAcct")
            Me.columnCashSum = MyBase.Columns("CashSum")
            Me.columnCashSumFC = MyBase.Columns("CashSumFC")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCounterRef = MyBase.Columns("CounterRef")
            Me.columnDocCurr = MyBase.Columns("DocCurr")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnRef1 = MyBase.Columns("Ref1")
            Me.columnRef2 = MyBase.Columns("Ref2")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesStr = MyBase.Columns("SeriesStr")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnTransId = MyBase.Columns("TransId")
            Me.columnTrsfrAcct = MyBase.Columns("TrsfrAcct")
            Me.columnTrsfrDate = MyBase.Columns("TrsfrDate")
            Me.columnTrsfrRef = MyBase.Columns("TrsfrRef")
            Me.columnTrsfrSum = MyBase.Columns("TrsfrSum")
            Me.columnTrsfrSumFC = MyBase.Columns("TrsfrSumFC")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnDiffCurr = MyBase.Columns("DiffCurr")
            Me.columnPrjCode = MyBase.Columns("PrjCode")
            Me.columnJrnlMemo = MyBase.Columns("JrnlMemo")
            Me.columnContactPerson = MyBase.Columns("ContactPerson")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnBcgSum = New Global.System.Data.DataColumn("BcgSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBcgSum)
            Me.columnBcgSumFC = New Global.System.Data.DataColumn("BcgSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBcgSumFC)
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnCardName = New Global.System.Data.DataColumn("CardName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardName)
            Me.columnCashAcct = New Global.System.Data.DataColumn("CashAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashAcct)
            Me.columnCashSum = New Global.System.Data.DataColumn("CashSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashSum)
            Me.columnCashSumFC = New Global.System.Data.DataColumn("CashSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashSumFC)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCounterRef = New Global.System.Data.DataColumn("CounterRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterRef)
            Me.columnDocCurr = New Global.System.Data.DataColumn("DocCurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCurr)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnRef1 = New Global.System.Data.DataColumn("Ref1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef1)
            Me.columnRef2 = New Global.System.Data.DataColumn("Ref2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef2)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesStr = New Global.System.Data.DataColumn("SeriesStr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesStr)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnTransId = New Global.System.Data.DataColumn("TransId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransId)
            Me.columnTrsfrAcct = New Global.System.Data.DataColumn("TrsfrAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrAcct)
            Me.columnTrsfrDate = New Global.System.Data.DataColumn("TrsfrDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrDate)
            Me.columnTrsfrRef = New Global.System.Data.DataColumn("TrsfrRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrRef)
            Me.columnTrsfrSum = New Global.System.Data.DataColumn("TrsfrSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrSum)
            Me.columnTrsfrSumFC = New Global.System.Data.DataColumn("TrsfrSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrSumFC)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnDiffCurr = New Global.System.Data.DataColumn("DiffCurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiffCurr)
            Me.columnPrjCode = New Global.System.Data.DataColumn("PrjCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrjCode)
            Me.columnJrnlMemo = New Global.System.Data.DataColumn("JrnlMemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJrnlMemo)
            Me.columnContactPerson = New Global.System.Data.DataColumn("ContactPerson", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPerson)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOVPMRow() As OVPMRow
            Return CType(Me.NewRow,OVPMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OVPMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OVPMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OVPMRowChangedEvent) Is Nothing) Then
                RaiseEvent OVPMRowChanged(Me, New OVPMRowChangeEvent(CType(e.Row,OVPMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OVPMRowChangingEvent) Is Nothing) Then
                RaiseEvent OVPMRowChanging(Me, New OVPMRowChangeEvent(CType(e.Row,OVPMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OVPMRowDeletedEvent) Is Nothing) Then
                RaiseEvent OVPMRowDeleted(Me, New OVPMRowChangeEvent(CType(e.Row,OVPMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OVPMRowDeletingEvent) Is Nothing) Then
                RaiseEvent OVPMRowDeleting(Me, New OVPMRowChangeEvent(CType(e.Row,OVPMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOVPMRow(ByVal row As OVPMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OVPMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ADM1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBlock As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnCounty As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnIntrntAdrs As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnStreet As Global.System.Data.DataColumn
        
        Private columnZipCode As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ADM1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BlockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBlock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntrntAdrsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntrntAdrs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StreetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStreet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZipCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ADM1Row
            Get
                Return CType(Me.Rows(index),ADM1Row)
            End Get
        End Property
        
        Public Event ADM1RowChanging As ADM1RowChangeEventHandler
        
        Public Event ADM1RowChanged As ADM1RowChangeEventHandler
        
        Public Event ADM1RowDeleting As ADM1RowChangeEventHandler
        
        Public Event ADM1RowDeleted As ADM1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddADM1Row(ByVal row As ADM1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddADM1Row(ByVal Block As String, ByVal City As String, ByVal Code As Integer, ByVal County As String, ByVal Country As String, ByVal IntrntAdrs As String, ByVal State As String, ByVal Street As String, ByVal ZipCode As String, ByVal LogInstanc As Integer) As ADM1Row
            Dim rowADM1Row As ADM1Row = CType(Me.NewRow,ADM1Row)
            Dim columnValuesArray() As Object = New Object() {Block, City, Code, County, Country, IntrntAdrs, State, Street, ZipCode, LogInstanc}
            rowADM1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowADM1Row)
            Return rowADM1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ADM1DataTable = CType(MyBase.Clone,ADM1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ADM1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBlock = MyBase.Columns("Block")
            Me.columnCity = MyBase.Columns("City")
            Me.columnCode = MyBase.Columns("Code")
            Me.columnCounty = MyBase.Columns("County")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnIntrntAdrs = MyBase.Columns("IntrntAdrs")
            Me.columnState = MyBase.Columns("State")
            Me.columnStreet = MyBase.Columns("Street")
            Me.columnZipCode = MyBase.Columns("ZipCode")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBlock = New Global.System.Data.DataColumn("Block", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBlock)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnCounty = New Global.System.Data.DataColumn("County", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounty)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnIntrntAdrs = New Global.System.Data.DataColumn("IntrntAdrs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntrntAdrs)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnStreet = New Global.System.Data.DataColumn("Street", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStreet)
            Me.columnZipCode = New Global.System.Data.DataColumn("ZipCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZipCode)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewADM1Row() As ADM1Row
            Return CType(Me.NewRow,ADM1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ADM1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ADM1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ADM1RowChangedEvent) Is Nothing) Then
                RaiseEvent ADM1RowChanged(Me, New ADM1RowChangeEvent(CType(e.Row,ADM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ADM1RowChangingEvent) Is Nothing) Then
                RaiseEvent ADM1RowChanging(Me, New ADM1RowChangeEvent(CType(e.Row,ADM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ADM1RowDeletedEvent) Is Nothing) Then
                RaiseEvent ADM1RowDeleted(Me, New ADM1RowChangeEvent(CType(e.Row,ADM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ADM1RowDeletingEvent) Is Nothing) Then
                RaiseEvent ADM1RowDeleting(Me, New ADM1RowChangeEvent(CType(e.Row,ADM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveADM1Row(ByVal row As ADM1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ADM1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OADMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnCompnyAddr As Global.System.Data.DataColumn
        
        Private columnCompnyName As Global.System.Data.DataColumn
        
        Private columnE_Mail As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnFaxF As Global.System.Data.DataColumn
        
        Private columnFreeZoneNo As Global.System.Data.DataColumn
        
        Private columnMainCurncy As Global.System.Data.DataColumn
        
        Private columnPhone1 As Global.System.Data.DataColumn
        
        Private columnPhone1F As Global.System.Data.DataColumn
        
        Private columnPhone2 As Global.System.Data.DataColumn
        
        Private columnRevOffice As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OADM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompnyAddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompnyAddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompnyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompnyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property E_MailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnE_Mail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FreeZoneNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreeZoneNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MainCurncyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMainCurncy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Phone1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Phone1FColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone1F
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Phone2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RevOfficeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRevOffice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OADMRow
            Get
                Return CType(Me.Rows(index),OADMRow)
            End Get
        End Property
        
        Public Event OADMRowChanging As OADMRowChangeEventHandler
        
        Public Event OADMRowChanged As OADMRowChangeEventHandler
        
        Public Event OADMRowDeleting As OADMRowChangeEventHandler
        
        Public Event OADMRowDeleted As OADMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOADMRow(ByVal row As OADMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOADMRow(ByVal Code As Integer, ByVal CompnyAddr As String, ByVal CompnyName As String, ByVal E_Mail As String, ByVal Fax As String, ByVal FaxF As String, ByVal FreeZoneNo As String, ByVal MainCurncy As String, ByVal Phone1 As String, ByVal Phone1F As String, ByVal Phone2 As String, ByVal RevOffice As String) As OADMRow
            Dim rowOADMRow As OADMRow = CType(Me.NewRow,OADMRow)
            Dim columnValuesArray() As Object = New Object() {Code, CompnyAddr, CompnyName, E_Mail, Fax, FaxF, FreeZoneNo, MainCurncy, Phone1, Phone1F, Phone2, RevOffice}
            rowOADMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOADMRow)
            Return rowOADMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OADMDataTable = CType(MyBase.Clone,OADMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OADMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCode = MyBase.Columns("Code")
            Me.columnCompnyAddr = MyBase.Columns("CompnyAddr")
            Me.columnCompnyName = MyBase.Columns("CompnyName")
            Me.columnE_Mail = MyBase.Columns("E_Mail")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnFaxF = MyBase.Columns("FaxF")
            Me.columnFreeZoneNo = MyBase.Columns("FreeZoneNo")
            Me.columnMainCurncy = MyBase.Columns("MainCurncy")
            Me.columnPhone1 = MyBase.Columns("Phone1")
            Me.columnPhone1F = MyBase.Columns("Phone1F")
            Me.columnPhone2 = MyBase.Columns("Phone2")
            Me.columnRevOffice = MyBase.Columns("RevOffice")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnCompnyAddr = New Global.System.Data.DataColumn("CompnyAddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompnyAddr)
            Me.columnCompnyName = New Global.System.Data.DataColumn("CompnyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompnyName)
            Me.columnE_Mail = New Global.System.Data.DataColumn("E_Mail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_Mail)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnFaxF = New Global.System.Data.DataColumn("FaxF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxF)
            Me.columnFreeZoneNo = New Global.System.Data.DataColumn("FreeZoneNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreeZoneNo)
            Me.columnMainCurncy = New Global.System.Data.DataColumn("MainCurncy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainCurncy)
            Me.columnPhone1 = New Global.System.Data.DataColumn("Phone1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone1)
            Me.columnPhone1F = New Global.System.Data.DataColumn("Phone1F", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone1F)
            Me.columnPhone2 = New Global.System.Data.DataColumn("Phone2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone2)
            Me.columnRevOffice = New Global.System.Data.DataColumn("RevOffice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRevOffice)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOADMRow() As OADMRow
            Return CType(Me.NewRow,OADMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OADMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OADMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OADMRowChangedEvent) Is Nothing) Then
                RaiseEvent OADMRowChanged(Me, New OADMRowChangeEvent(CType(e.Row,OADMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OADMRowChangingEvent) Is Nothing) Then
                RaiseEvent OADMRowChanging(Me, New OADMRowChangeEvent(CType(e.Row,OADMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OADMRowDeletedEvent) Is Nothing) Then
                RaiseEvent OADMRowDeleted(Me, New OADMRowChangeEvent(CType(e.Row,OADMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OADMRowDeletingEvent) Is Nothing) Then
                RaiseEvent OADMRowDeleting(Me, New OADMRowChangeEvent(CType(e.Row,OADMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOADMRow(ByVal row As OADMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OADMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OACTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAcctCode As Global.System.Data.DataColumn
        
        Private columnAcctName As Global.System.Data.DataColumn
        
        Private columnFormatCode As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnSegment_0 As Global.System.Data.DataColumn
        
        Private columnSegment_1 As Global.System.Data.DataColumn
        
        Private columnSegment_2 As Global.System.Data.DataColumn
        
        Private columnSegment_3 As Global.System.Data.DataColumn
        
        Private columnSegment_4 As Global.System.Data.DataColumn
        
        Private columnSegment_5 As Global.System.Data.DataColumn
        
        Private columnSegment_6 As Global.System.Data.DataColumn
        
        Private columnSegment_7 As Global.System.Data.DataColumn
        
        Private columnSegment_8 As Global.System.Data.DataColumn
        
        Private columnSegment_9 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormatCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormatCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_0
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Segment_9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegment_9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OACTRow
            Get
                Return CType(Me.Rows(index),OACTRow)
            End Get
        End Property
        
        Public Event OACTRowChanging As OACTRowChangeEventHandler
        
        Public Event OACTRowChanged As OACTRowChangeEventHandler
        
        Public Event OACTRowDeleting As OACTRowChangeEventHandler
        
        Public Event OACTRowDeleted As OACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOACTRow(ByVal row As OACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOACTRow(ByVal AcctCode As String, ByVal AcctName As String, ByVal FormatCode As String, ByVal LogInstanc As Integer, ByVal Segment_0 As String, ByVal Segment_1 As String, ByVal Segment_2 As String, ByVal Segment_3 As String, ByVal Segment_4 As String, ByVal Segment_5 As String, ByVal Segment_6 As String, ByVal Segment_7 As String, ByVal Segment_8 As String, ByVal Segment_9 As String) As OACTRow
            Dim rowOACTRow As OACTRow = CType(Me.NewRow,OACTRow)
            Dim columnValuesArray() As Object = New Object() {AcctCode, AcctName, FormatCode, LogInstanc, Segment_0, Segment_1, Segment_2, Segment_3, Segment_4, Segment_5, Segment_6, Segment_7, Segment_8, Segment_9}
            rowOACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOACTRow)
            Return rowOACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OACTDataTable = CType(MyBase.Clone,OACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OACTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAcctCode = MyBase.Columns("AcctCode")
            Me.columnAcctName = MyBase.Columns("AcctName")
            Me.columnFormatCode = MyBase.Columns("FormatCode")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnSegment_0 = MyBase.Columns("Segment_0")
            Me.columnSegment_1 = MyBase.Columns("Segment_1")
            Me.columnSegment_2 = MyBase.Columns("Segment_2")
            Me.columnSegment_3 = MyBase.Columns("Segment_3")
            Me.columnSegment_4 = MyBase.Columns("Segment_4")
            Me.columnSegment_5 = MyBase.Columns("Segment_5")
            Me.columnSegment_6 = MyBase.Columns("Segment_6")
            Me.columnSegment_7 = MyBase.Columns("Segment_7")
            Me.columnSegment_8 = MyBase.Columns("Segment_8")
            Me.columnSegment_9 = MyBase.Columns("Segment_9")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAcctCode = New Global.System.Data.DataColumn("AcctCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctCode)
            Me.columnAcctName = New Global.System.Data.DataColumn("AcctName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctName)
            Me.columnFormatCode = New Global.System.Data.DataColumn("FormatCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormatCode)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnSegment_0 = New Global.System.Data.DataColumn("Segment_0", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_0)
            Me.columnSegment_1 = New Global.System.Data.DataColumn("Segment_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_1)
            Me.columnSegment_2 = New Global.System.Data.DataColumn("Segment_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_2)
            Me.columnSegment_3 = New Global.System.Data.DataColumn("Segment_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_3)
            Me.columnSegment_4 = New Global.System.Data.DataColumn("Segment_4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_4)
            Me.columnSegment_5 = New Global.System.Data.DataColumn("Segment_5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_5)
            Me.columnSegment_6 = New Global.System.Data.DataColumn("Segment_6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_6)
            Me.columnSegment_7 = New Global.System.Data.DataColumn("Segment_7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_7)
            Me.columnSegment_8 = New Global.System.Data.DataColumn("Segment_8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_8)
            Me.columnSegment_9 = New Global.System.Data.DataColumn("Segment_9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegment_9)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOACTRow() As OACTRow
            Return CType(Me.NewRow,OACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OACTRowChangedEvent) Is Nothing) Then
                RaiseEvent OACTRowChanged(Me, New OACTRowChangeEvent(CType(e.Row,OACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OACTRowChangingEvent) Is Nothing) Then
                RaiseEvent OACTRowChanging(Me, New OACTRowChangeEvent(CType(e.Row,OACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent OACTRowDeleted(Me, New OACTRowChangeEvent(CType(e.Row,OACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent OACTRowDeleting(Me, New OACTRowChangeEvent(CType(e.Row,OACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOACTRow(ByVal row As OACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VPM1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAcctNum As Global.System.Data.DataColumn
        
        Private columnBankCode As Global.System.Data.DataColumn
        
        Private columnCheckNum As Global.System.Data.DataColumn
        
        Private columnCheckSum As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnDetails As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDueDate As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VPM1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BankCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBankCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetailsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetails
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VPM1Row
            Get
                Return CType(Me.Rows(index),VPM1Row)
            End Get
        End Property
        
        Public Event VPM1RowChanging As VPM1RowChangeEventHandler
        
        Public Event VPM1RowChanged As VPM1RowChangeEventHandler
        
        Public Event VPM1RowDeleting As VPM1RowChangeEventHandler
        
        Public Event VPM1RowDeleted As VPM1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVPM1Row(ByVal row As VPM1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVPM1Row(ByVal AcctNum As String, ByVal BankCode As String, ByVal CheckNum As Long, ByVal CheckSum As Decimal, ByVal Currency As String, ByVal Details As String, ByVal DocNum As Long, ByVal DueDate As Date, ByVal LogInstanc As Integer) As VPM1Row
            Dim rowVPM1Row As VPM1Row = CType(Me.NewRow,VPM1Row)
            Dim columnValuesArray() As Object = New Object() {AcctNum, BankCode, CheckNum, CheckSum, Currency, Details, DocNum, DueDate, LogInstanc}
            rowVPM1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowVPM1Row)
            Return rowVPM1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VPM1DataTable = CType(MyBase.Clone,VPM1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VPM1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAcctNum = MyBase.Columns("AcctNum")
            Me.columnBankCode = MyBase.Columns("BankCode")
            Me.columnCheckNum = MyBase.Columns("CheckNum")
            Me.columnCheckSum = MyBase.Columns("CheckSum")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnDetails = MyBase.Columns("Details")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDueDate = MyBase.Columns("DueDate")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAcctNum = New Global.System.Data.DataColumn("AcctNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctNum)
            Me.columnBankCode = New Global.System.Data.DataColumn("BankCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBankCode)
            Me.columnCheckNum = New Global.System.Data.DataColumn("CheckNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckNum)
            Me.columnCheckSum = New Global.System.Data.DataColumn("CheckSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckSum)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnDetails = New Global.System.Data.DataColumn("Details", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetails)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDueDate = New Global.System.Data.DataColumn("DueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDueDate)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVPM1Row() As VPM1Row
            Return CType(Me.NewRow,VPM1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VPM1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VPM1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VPM1RowChangedEvent) Is Nothing) Then
                RaiseEvent VPM1RowChanged(Me, New VPM1RowChangeEvent(CType(e.Row,VPM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VPM1RowChangingEvent) Is Nothing) Then
                RaiseEvent VPM1RowChanging(Me, New VPM1RowChangeEvent(CType(e.Row,VPM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VPM1RowDeletedEvent) Is Nothing) Then
                RaiseEvent VPM1RowDeleted(Me, New VPM1RowChangeEvent(CType(e.Row,VPM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VPM1RowDeletingEvent) Is Nothing) Then
                RaiseEvent VPM1RowDeleting(Me, New VPM1RowChangeEvent(CType(e.Row,VPM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVPM1Row(ByVal row As VPM1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VPM1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VPM4DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAcctCode As Global.System.Data.DataColumn
        
        Private columnAcctName As Global.System.Data.DataColumn
        
        Private columnDesCrip As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnGrossAmnt As Global.System.Data.DataColumn
        
        Private columnGrssAmntFC As Global.System.Data.DataColumn
        
        Private columnVatAmnt As Global.System.Data.DataColumn
        
        Private columnVatAmntFC As Global.System.Data.DataColumn
        
        Private columnVatPrcnt As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnOcrCode As Global.System.Data.DataColumn
        
        Private columnOcrCode2 As Global.System.Data.DataColumn
        
        Private columnOcrCode3 As Global.System.Data.DataColumn
        
        Private columnOcrCode4 As Global.System.Data.DataColumn
        
        Private columnOcrCode5 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VPM4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesCripColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesCrip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrossAmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossAmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrssAmntFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrssAmntFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatAmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatAmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatAmntFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatAmntFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatPrcntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatPrcnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VPM4Row
            Get
                Return CType(Me.Rows(index),VPM4Row)
            End Get
        End Property
        
        Public Event VPM4RowChanging As VPM4RowChangeEventHandler
        
        Public Event VPM4RowChanged As VPM4RowChangeEventHandler
        
        Public Event VPM4RowDeleting As VPM4RowChangeEventHandler
        
        Public Event VPM4RowDeleted As VPM4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVPM4Row(ByVal row As VPM4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVPM4Row(ByVal AcctCode As String, ByVal AcctName As String, ByVal DesCrip As String, ByVal DocNum As Long, ByVal GrossAmnt As Decimal, ByVal GrssAmntFC As Decimal, ByVal VatAmnt As Decimal, ByVal VatAmntFC As Decimal, ByVal VatPrcnt As Decimal, ByVal LogInstanc As Integer, ByVal OcrCode As String, ByVal OcrCode2 As String, ByVal OcrCode3 As String, ByVal OcrCode4 As String, ByVal OcrCode5 As String) As VPM4Row
            Dim rowVPM4Row As VPM4Row = CType(Me.NewRow,VPM4Row)
            Dim columnValuesArray() As Object = New Object() {AcctCode, AcctName, DesCrip, DocNum, GrossAmnt, GrssAmntFC, VatAmnt, VatAmntFC, VatPrcnt, LogInstanc, OcrCode, OcrCode2, OcrCode3, OcrCode4, OcrCode5}
            rowVPM4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowVPM4Row)
            Return rowVPM4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VPM4DataTable = CType(MyBase.Clone,VPM4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VPM4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAcctCode = MyBase.Columns("AcctCode")
            Me.columnAcctName = MyBase.Columns("AcctName")
            Me.columnDesCrip = MyBase.Columns("Descrip")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnGrossAmnt = MyBase.Columns("GrossAmnt")
            Me.columnGrssAmntFC = MyBase.Columns("GrssAmntFC")
            Me.columnVatAmnt = MyBase.Columns("VatAmnt")
            Me.columnVatAmntFC = MyBase.Columns("VatAmntFC")
            Me.columnVatPrcnt = MyBase.Columns("VatPrcnt")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnOcrCode = MyBase.Columns("OcrCode")
            Me.columnOcrCode2 = MyBase.Columns("OcrCode2")
            Me.columnOcrCode3 = MyBase.Columns("OcrCode3")
            Me.columnOcrCode4 = MyBase.Columns("OcrCode4")
            Me.columnOcrCode5 = MyBase.Columns("OcrCode5")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAcctCode = New Global.System.Data.DataColumn("AcctCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctCode)
            Me.columnAcctName = New Global.System.Data.DataColumn("AcctName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctName)
            Me.columnDesCrip = New Global.System.Data.DataColumn("Descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "DesCrip")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DesCripColumn")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDesCrip")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_UserColumnName", "Descrip")
            MyBase.Columns.Add(Me.columnDesCrip)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnGrossAmnt = New Global.System.Data.DataColumn("GrossAmnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossAmnt)
            Me.columnGrssAmntFC = New Global.System.Data.DataColumn("GrssAmntFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrssAmntFC)
            Me.columnVatAmnt = New Global.System.Data.DataColumn("VatAmnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatAmnt)
            Me.columnVatAmntFC = New Global.System.Data.DataColumn("VatAmntFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatAmntFC)
            Me.columnVatPrcnt = New Global.System.Data.DataColumn("VatPrcnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatPrcnt)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnOcrCode = New Global.System.Data.DataColumn("OcrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode)
            Me.columnOcrCode2 = New Global.System.Data.DataColumn("OcrCode2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode2)
            Me.columnOcrCode3 = New Global.System.Data.DataColumn("OcrCode3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode3)
            Me.columnOcrCode4 = New Global.System.Data.DataColumn("OcrCode4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode4)
            Me.columnOcrCode5 = New Global.System.Data.DataColumn("OcrCode5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode5)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVPM4Row() As VPM4Row
            Return CType(Me.NewRow,VPM4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VPM4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VPM4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VPM4RowChangedEvent) Is Nothing) Then
                RaiseEvent VPM4RowChanged(Me, New VPM4RowChangeEvent(CType(e.Row,VPM4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VPM4RowChangingEvent) Is Nothing) Then
                RaiseEvent VPM4RowChanging(Me, New VPM4RowChangeEvent(CType(e.Row,VPM4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VPM4RowDeletedEvent) Is Nothing) Then
                RaiseEvent VPM4RowDeleted(Me, New VPM4RowChangeEvent(CType(e.Row,VPM4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VPM4RowDeletingEvent) Is Nothing) Then
                RaiseEvent VPM4RowDeleting(Me, New VPM4RowChangeEvent(CType(e.Row,VPM4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVPM4Row(ByVal row As VPM4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VPM4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VPM3DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCreditAcct As Global.System.Data.DataColumn
        
        Private columnCreditCard As Global.System.Data.DataColumn
        
        Private columnCreditCur As Global.System.Data.DataColumn
        
        Private columnCreditRate As Global.System.Data.DataColumn
        
        Private columnCreditSum As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnFirstDue As Global.System.Data.DataColumn
        
        Private columnFirstSum As Global.System.Data.DataColumn
        
        Private columnVoucherNum As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VPM3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstDueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstDue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VPM3Row
            Get
                Return CType(Me.Rows(index),VPM3Row)
            End Get
        End Property
        
        Public Event VPM3RowChanging As VPM3RowChangeEventHandler
        
        Public Event VPM3RowChanged As VPM3RowChangeEventHandler
        
        Public Event VPM3RowDeleting As VPM3RowChangeEventHandler
        
        Public Event VPM3RowDeleted As VPM3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVPM3Row(ByVal row As VPM3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVPM3Row(ByVal CreditAcct As String, ByVal CreditCard As Integer, ByVal CreditCur As String, ByVal CreditRate As Decimal, ByVal CreditSum As Decimal, ByVal DocNum As Long, ByVal FirstDue As Date, ByVal FirstSum As Decimal, ByVal VoucherNum As String, ByVal LogInstanc As Integer) As VPM3Row
            Dim rowVPM3Row As VPM3Row = CType(Me.NewRow,VPM3Row)
            Dim columnValuesArray() As Object = New Object() {CreditAcct, CreditCard, CreditCur, CreditRate, CreditSum, DocNum, FirstDue, FirstSum, VoucherNum, LogInstanc}
            rowVPM3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowVPM3Row)
            Return rowVPM3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VPM3DataTable = CType(MyBase.Clone,VPM3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VPM3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCreditAcct = MyBase.Columns("CreditAcct")
            Me.columnCreditCard = MyBase.Columns("CreditCard")
            Me.columnCreditCur = MyBase.Columns("CreditCur")
            Me.columnCreditRate = MyBase.Columns("CreditRate")
            Me.columnCreditSum = MyBase.Columns("CreditSum")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnFirstDue = MyBase.Columns("FirstDue")
            Me.columnFirstSum = MyBase.Columns("FirstSum")
            Me.columnVoucherNum = MyBase.Columns("VoucherNum")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCreditAcct = New Global.System.Data.DataColumn("CreditAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditAcct)
            Me.columnCreditCard = New Global.System.Data.DataColumn("CreditCard", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditCard)
            Me.columnCreditCur = New Global.System.Data.DataColumn("CreditCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditCur)
            Me.columnCreditRate = New Global.System.Data.DataColumn("CreditRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditRate)
            Me.columnCreditSum = New Global.System.Data.DataColumn("CreditSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditSum)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnFirstDue = New Global.System.Data.DataColumn("FirstDue", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstDue)
            Me.columnFirstSum = New Global.System.Data.DataColumn("FirstSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstSum)
            Me.columnVoucherNum = New Global.System.Data.DataColumn("VoucherNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherNum)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVPM3Row() As VPM3Row
            Return CType(Me.NewRow,VPM3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VPM3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VPM3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VPM3RowChangedEvent) Is Nothing) Then
                RaiseEvent VPM3RowChanged(Me, New VPM3RowChangeEvent(CType(e.Row,VPM3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VPM3RowChangingEvent) Is Nothing) Then
                RaiseEvent VPM3RowChanging(Me, New VPM3RowChangeEvent(CType(e.Row,VPM3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VPM3RowDeletedEvent) Is Nothing) Then
                RaiseEvent VPM3RowDeleted(Me, New VPM3RowChangeEvent(CType(e.Row,VPM3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VPM3RowDeletingEvent) Is Nothing) Then
                RaiseEvent VPM3RowDeleting(Me, New VPM3RowChangeEvent(CType(e.Row,VPM3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVPM3Row(ByVal row As VPM3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VPM3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VPM2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAppliedFC As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocLine As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnInvoiceId As Global.System.Data.DataColumn
        
        Private columnInvType As Global.System.Data.DataColumn
        
        Private columnSumApplied As Global.System.Data.DataColumn
        
        Private columnvatApplied As Global.System.Data.DataColumn
        
        Private columnvatAppldFC As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VPM2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppliedFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppliedFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vatAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vatAppldFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatAppldFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VPM2Row
            Get
                Return CType(Me.Rows(index),VPM2Row)
            End Get
        End Property
        
        Public Event VPM2RowChanging As VPM2RowChangeEventHandler
        
        Public Event VPM2RowChanged As VPM2RowChangeEventHandler
        
        Public Event VPM2RowDeleting As VPM2RowChangeEventHandler
        
        Public Event VPM2RowDeleted As VPM2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVPM2Row(ByVal row As VPM2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVPM2Row(ByVal AppliedFC As Decimal, ByVal DocEntry As Long, ByVal DocLine As Integer, ByVal DocNum As Long, ByVal DocRate As Decimal, ByVal InvoiceId As Long, ByVal InvType As String, ByVal SumApplied As Decimal, ByVal vatApplied As Decimal, ByVal vatAppldFC As Decimal, ByVal LogInstanc As Integer) As VPM2Row
            Dim rowVPM2Row As VPM2Row = CType(Me.NewRow,VPM2Row)
            Dim columnValuesArray() As Object = New Object() {AppliedFC, DocEntry, DocLine, DocNum, DocRate, InvoiceId, InvType, SumApplied, vatApplied, vatAppldFC, LogInstanc}
            rowVPM2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowVPM2Row)
            Return rowVPM2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VPM2DataTable = CType(MyBase.Clone,VPM2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VPM2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAppliedFC = MyBase.Columns("AppliedFC")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocLine = MyBase.Columns("DocLine")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnInvoiceId = MyBase.Columns("InvoiceId")
            Me.columnInvType = MyBase.Columns("InvType")
            Me.columnSumApplied = MyBase.Columns("SumApplied")
            Me.columnvatApplied = MyBase.Columns("vatApplied")
            Me.columnvatAppldFC = MyBase.Columns("vatAppldFC")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAppliedFC = New Global.System.Data.DataColumn("AppliedFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppliedFC)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocLine = New Global.System.Data.DataColumn("DocLine", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocLine)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnInvoiceId = New Global.System.Data.DataColumn("InvoiceId", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceId)
            Me.columnInvType = New Global.System.Data.DataColumn("InvType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvType)
            Me.columnSumApplied = New Global.System.Data.DataColumn("SumApplied", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumApplied)
            Me.columnvatApplied = New Global.System.Data.DataColumn("vatApplied", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatApplied)
            Me.columnvatAppldFC = New Global.System.Data.DataColumn("vatAppldFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatAppldFC)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVPM2Row() As VPM2Row
            Return CType(Me.NewRow,VPM2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VPM2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VPM2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VPM2RowChangedEvent) Is Nothing) Then
                RaiseEvent VPM2RowChanged(Me, New VPM2RowChangeEvent(CType(e.Row,VPM2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VPM2RowChangingEvent) Is Nothing) Then
                RaiseEvent VPM2RowChanging(Me, New VPM2RowChangeEvent(CType(e.Row,VPM2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VPM2RowDeletedEvent) Is Nothing) Then
                RaiseEvent VPM2RowDeleted(Me, New VPM2RowChangeEvent(CType(e.Row,VPM2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VPM2RowDeletingEvent) Is Nothing) Then
                RaiseEvent VPM2RowDeleting(Me, New VPM2RowChangeEvent(CType(e.Row,VPM2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVPM2Row(ByVal row As VPM2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VPM2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_NNM1_1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObjectCode As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_NNM1_1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_NNM1_1Row
            Get
                Return CType(Me.Rows(index),NCM_NNM1_1Row)
            End Get
        End Property
        
        Public Event NCM_NNM1_1RowChanging As NCM_NNM1_1RowChangeEventHandler
        
        Public Event NCM_NNM1_1RowChanged As NCM_NNM1_1RowChangeEventHandler
        
        Public Event NCM_NNM1_1RowDeleting As NCM_NNM1_1RowChangeEventHandler
        
        Public Event NCM_NNM1_1RowDeleted As NCM_NNM1_1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_NNM1_1Row(ByVal row As NCM_NNM1_1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_NNM1_1Row(ByVal ObjectCode As String, ByVal Series As Integer, ByVal SeriesName As String) As NCM_NNM1_1Row
            Dim rowNCM_NNM1_1Row As NCM_NNM1_1Row = CType(Me.NewRow,NCM_NNM1_1Row)
            Dim columnValuesArray() As Object = New Object() {ObjectCode, Series, SeriesName}
            rowNCM_NNM1_1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_NNM1_1Row)
            Return rowNCM_NNM1_1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_NNM1_1DataTable = CType(MyBase.Clone,NCM_NNM1_1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_NNM1_1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectCode = MyBase.Columns("ObjectCode")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectCode = New Global.System.Data.DataColumn("ObjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectCode)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_NNM1_1Row() As NCM_NNM1_1Row
            Return CType(Me.NewRow,NCM_NNM1_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_NNM1_1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_NNM1_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_NNM1_1RowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_1RowChanged(Me, New NCM_NNM1_1RowChangeEvent(CType(e.Row,NCM_NNM1_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_NNM1_1RowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_1RowChanging(Me, New NCM_NNM1_1RowChangeEvent(CType(e.Row,NCM_NNM1_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_NNM1_1RowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_1RowDeleted(Me, New NCM_NNM1_1RowChangeEvent(CType(e.Row,NCM_NNM1_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_NNM1_1RowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_1RowDeleting(Me, New NCM_NNM1_1RowChangeEvent(CType(e.Row,NCM_NNM1_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_NNM1_1Row(ByVal row As NCM_NNM1_1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_NNM1_1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_NNM1_2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObjectCode As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_NNM1_2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_NNM1_2Row
            Get
                Return CType(Me.Rows(index),NCM_NNM1_2Row)
            End Get
        End Property
        
        Public Event NCM_NNM1_2RowChanging As NCM_NNM1_2RowChangeEventHandler
        
        Public Event NCM_NNM1_2RowChanged As NCM_NNM1_2RowChangeEventHandler
        
        Public Event NCM_NNM1_2RowDeleting As NCM_NNM1_2RowChangeEventHandler
        
        Public Event NCM_NNM1_2RowDeleted As NCM_NNM1_2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_NNM1_2Row(ByVal row As NCM_NNM1_2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_NNM1_2Row(ByVal ObjectCode As String, ByVal Series As Integer, ByVal SeriesName As String) As NCM_NNM1_2Row
            Dim rowNCM_NNM1_2Row As NCM_NNM1_2Row = CType(Me.NewRow,NCM_NNM1_2Row)
            Dim columnValuesArray() As Object = New Object() {ObjectCode, Series, SeriesName}
            rowNCM_NNM1_2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_NNM1_2Row)
            Return rowNCM_NNM1_2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_NNM1_2DataTable = CType(MyBase.Clone,NCM_NNM1_2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_NNM1_2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectCode = MyBase.Columns("ObjectCode")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectCode = New Global.System.Data.DataColumn("ObjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectCode)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_NNM1_2Row() As NCM_NNM1_2Row
            Return CType(Me.NewRow,NCM_NNM1_2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_NNM1_2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_NNM1_2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_NNM1_2RowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_2RowChanged(Me, New NCM_NNM1_2RowChangeEvent(CType(e.Row,NCM_NNM1_2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_NNM1_2RowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_2RowChanging(Me, New NCM_NNM1_2RowChangeEvent(CType(e.Row,NCM_NNM1_2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_NNM1_2RowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_2RowDeleted(Me, New NCM_NNM1_2RowChangeEvent(CType(e.Row,NCM_NNM1_2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_NNM1_2RowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_2RowDeleting(Me, New NCM_NNM1_2RowChangeEvent(CType(e.Row,NCM_NNM1_2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_NNM1_2Row(ByVal row As NCM_NNM1_2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_NNM1_2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_NNM1_3DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObjectCode As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_NNM1_3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_NNM1_3Row
            Get
                Return CType(Me.Rows(index),NCM_NNM1_3Row)
            End Get
        End Property
        
        Public Event NCM_NNM1_3RowChanging As NCM_NNM1_3RowChangeEventHandler
        
        Public Event NCM_NNM1_3RowChanged As NCM_NNM1_3RowChangeEventHandler
        
        Public Event NCM_NNM1_3RowDeleting As NCM_NNM1_3RowChangeEventHandler
        
        Public Event NCM_NNM1_3RowDeleted As NCM_NNM1_3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_NNM1_3Row(ByVal row As NCM_NNM1_3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_NNM1_3Row(ByVal ObjectCode As String, ByVal Series As Integer, ByVal SeriesName As String) As NCM_NNM1_3Row
            Dim rowNCM_NNM1_3Row As NCM_NNM1_3Row = CType(Me.NewRow,NCM_NNM1_3Row)
            Dim columnValuesArray() As Object = New Object() {ObjectCode, Series, SeriesName}
            rowNCM_NNM1_3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_NNM1_3Row)
            Return rowNCM_NNM1_3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_NNM1_3DataTable = CType(MyBase.Clone,NCM_NNM1_3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_NNM1_3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectCode = MyBase.Columns("ObjectCode")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectCode = New Global.System.Data.DataColumn("ObjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectCode)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_NNM1_3Row() As NCM_NNM1_3Row
            Return CType(Me.NewRow,NCM_NNM1_3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_NNM1_3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_NNM1_3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_NNM1_3RowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_3RowChanged(Me, New NCM_NNM1_3RowChangeEvent(CType(e.Row,NCM_NNM1_3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_NNM1_3RowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_3RowChanging(Me, New NCM_NNM1_3RowChangeEvent(CType(e.Row,NCM_NNM1_3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_NNM1_3RowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_3RowDeleted(Me, New NCM_NNM1_3RowChangeEvent(CType(e.Row,NCM_NNM1_3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_NNM1_3RowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_3RowDeleting(Me, New NCM_NNM1_3RowChangeEvent(CType(e.Row,NCM_NNM1_3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_NNM1_3Row(ByVal row As NCM_NNM1_3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_NNM1_3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_NNM1_4DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObjectCode As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_NNM1_4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_NNM1_4Row
            Get
                Return CType(Me.Rows(index),NCM_NNM1_4Row)
            End Get
        End Property
        
        Public Event NCM_NNM1_4RowChanging As NCM_NNM1_4RowChangeEventHandler
        
        Public Event NCM_NNM1_4RowChanged As NCM_NNM1_4RowChangeEventHandler
        
        Public Event NCM_NNM1_4RowDeleting As NCM_NNM1_4RowChangeEventHandler
        
        Public Event NCM_NNM1_4RowDeleted As NCM_NNM1_4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_NNM1_4Row(ByVal row As NCM_NNM1_4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_NNM1_4Row(ByVal ObjectCode As String, ByVal Series As Integer, ByVal SeriesName As String) As NCM_NNM1_4Row
            Dim rowNCM_NNM1_4Row As NCM_NNM1_4Row = CType(Me.NewRow,NCM_NNM1_4Row)
            Dim columnValuesArray() As Object = New Object() {ObjectCode, Series, SeriesName}
            rowNCM_NNM1_4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_NNM1_4Row)
            Return rowNCM_NNM1_4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_NNM1_4DataTable = CType(MyBase.Clone,NCM_NNM1_4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_NNM1_4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectCode = MyBase.Columns("ObjectCode")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectCode = New Global.System.Data.DataColumn("ObjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectCode)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_NNM1_4Row() As NCM_NNM1_4Row
            Return CType(Me.NewRow,NCM_NNM1_4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_NNM1_4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_NNM1_4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_NNM1_4RowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_4RowChanged(Me, New NCM_NNM1_4RowChangeEvent(CType(e.Row,NCM_NNM1_4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_NNM1_4RowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_4RowChanging(Me, New NCM_NNM1_4RowChangeEvent(CType(e.Row,NCM_NNM1_4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_NNM1_4RowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_4RowDeleted(Me, New NCM_NNM1_4RowChangeEvent(CType(e.Row,NCM_NNM1_4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_NNM1_4RowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_4RowDeleting(Me, New NCM_NNM1_4RowChangeEvent(CType(e.Row,NCM_NNM1_4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_NNM1_4Row(ByVal row As NCM_NNM1_4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_NNM1_4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_NNM1_5DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObjectCode As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_NNM1_5"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_NNM1_5Row
            Get
                Return CType(Me.Rows(index),NCM_NNM1_5Row)
            End Get
        End Property
        
        Public Event NCM_NNM1_5RowChanging As NCM_NNM1_5RowChangeEventHandler
        
        Public Event NCM_NNM1_5RowChanged As NCM_NNM1_5RowChangeEventHandler
        
        Public Event NCM_NNM1_5RowDeleting As NCM_NNM1_5RowChangeEventHandler
        
        Public Event NCM_NNM1_5RowDeleted As NCM_NNM1_5RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_NNM1_5Row(ByVal row As NCM_NNM1_5Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_NNM1_5Row(ByVal ObjectCode As String, ByVal Series As Integer, ByVal SeriesName As String) As NCM_NNM1_5Row
            Dim rowNCM_NNM1_5Row As NCM_NNM1_5Row = CType(Me.NewRow,NCM_NNM1_5Row)
            Dim columnValuesArray() As Object = New Object() {ObjectCode, Series, SeriesName}
            rowNCM_NNM1_5Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_NNM1_5Row)
            Return rowNCM_NNM1_5Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_NNM1_5DataTable = CType(MyBase.Clone,NCM_NNM1_5DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_NNM1_5DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectCode = MyBase.Columns("ObjectCode")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectCode = New Global.System.Data.DataColumn("ObjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectCode)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_NNM1_5Row() As NCM_NNM1_5Row
            Return CType(Me.NewRow,NCM_NNM1_5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_NNM1_5Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_NNM1_5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_NNM1_5RowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_5RowChanged(Me, New NCM_NNM1_5RowChangeEvent(CType(e.Row,NCM_NNM1_5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_NNM1_5RowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_5RowChanging(Me, New NCM_NNM1_5RowChangeEvent(CType(e.Row,NCM_NNM1_5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_NNM1_5RowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_5RowDeleted(Me, New NCM_NNM1_5RowChangeEvent(CType(e.Row,NCM_NNM1_5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_NNM1_5RowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_5RowDeleting(Me, New NCM_NNM1_5RowChangeEvent(CType(e.Row,NCM_NNM1_5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_NNM1_5Row(ByVal row As NCM_NNM1_5Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_NNM1_5DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_NNM1_6DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObjectCode As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_NNM1_6"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_NNM1_6Row
            Get
                Return CType(Me.Rows(index),NCM_NNM1_6Row)
            End Get
        End Property
        
        Public Event NCM_NNM1_6RowChanging As NCM_NNM1_6RowChangeEventHandler
        
        Public Event NCM_NNM1_6RowChanged As NCM_NNM1_6RowChangeEventHandler
        
        Public Event NCM_NNM1_6RowDeleting As NCM_NNM1_6RowChangeEventHandler
        
        Public Event NCM_NNM1_6RowDeleted As NCM_NNM1_6RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_NNM1_6Row(ByVal row As NCM_NNM1_6Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_NNM1_6Row(ByVal ObjectCode As String, ByVal Series As Integer, ByVal SeriesName As String) As NCM_NNM1_6Row
            Dim rowNCM_NNM1_6Row As NCM_NNM1_6Row = CType(Me.NewRow,NCM_NNM1_6Row)
            Dim columnValuesArray() As Object = New Object() {ObjectCode, Series, SeriesName}
            rowNCM_NNM1_6Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_NNM1_6Row)
            Return rowNCM_NNM1_6Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_NNM1_6DataTable = CType(MyBase.Clone,NCM_NNM1_6DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_NNM1_6DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectCode = MyBase.Columns("ObjectCode")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectCode = New Global.System.Data.DataColumn("ObjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectCode)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_NNM1_6Row() As NCM_NNM1_6Row
            Return CType(Me.NewRow,NCM_NNM1_6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_NNM1_6Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_NNM1_6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_NNM1_6RowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_6RowChanged(Me, New NCM_NNM1_6RowChangeEvent(CType(e.Row,NCM_NNM1_6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_NNM1_6RowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_6RowChanging(Me, New NCM_NNM1_6RowChangeEvent(CType(e.Row,NCM_NNM1_6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_NNM1_6RowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_6RowDeleted(Me, New NCM_NNM1_6RowChangeEvent(CType(e.Row,NCM_NNM1_6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_NNM1_6RowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_6RowDeleting(Me, New NCM_NNM1_6RowChangeEvent(CType(e.Row,NCM_NNM1_6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_NNM1_6Row(ByVal row As NCM_NNM1_6Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_NNM1_6DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_NNM1_7DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObjectCode As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_NNM1_7"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_NNM1_7Row
            Get
                Return CType(Me.Rows(index),NCM_NNM1_7Row)
            End Get
        End Property
        
        Public Event NCM_NNM1_7RowChanging As NCM_NNM1_7RowChangeEventHandler
        
        Public Event NCM_NNM1_7RowChanged As NCM_NNM1_7RowChangeEventHandler
        
        Public Event NCM_NNM1_7RowDeleting As NCM_NNM1_7RowChangeEventHandler
        
        Public Event NCM_NNM1_7RowDeleted As NCM_NNM1_7RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_NNM1_7Row(ByVal row As NCM_NNM1_7Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_NNM1_7Row(ByVal ObjectCode As String, ByVal Series As Integer, ByVal SeriesName As String) As NCM_NNM1_7Row
            Dim rowNCM_NNM1_7Row As NCM_NNM1_7Row = CType(Me.NewRow,NCM_NNM1_7Row)
            Dim columnValuesArray() As Object = New Object() {ObjectCode, Series, SeriesName}
            rowNCM_NNM1_7Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_NNM1_7Row)
            Return rowNCM_NNM1_7Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_NNM1_7DataTable = CType(MyBase.Clone,NCM_NNM1_7DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_NNM1_7DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectCode = MyBase.Columns("ObjectCode")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectCode = New Global.System.Data.DataColumn("ObjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectCode)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_NNM1_7Row() As NCM_NNM1_7Row
            Return CType(Me.NewRow,NCM_NNM1_7Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_NNM1_7Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_NNM1_7Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_NNM1_7RowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_7RowChanged(Me, New NCM_NNM1_7RowChangeEvent(CType(e.Row,NCM_NNM1_7Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_NNM1_7RowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_7RowChanging(Me, New NCM_NNM1_7RowChangeEvent(CType(e.Row,NCM_NNM1_7Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_NNM1_7RowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_7RowDeleted(Me, New NCM_NNM1_7RowChangeEvent(CType(e.Row,NCM_NNM1_7Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_NNM1_7RowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_NNM1_7RowDeleting(Me, New NCM_NNM1_7RowChangeEvent(CType(e.Row,NCM_NNM1_7Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_NNM1_7Row(ByVal row As NCM_NNM1_7Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_NNM1_7DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OJDTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocSeries As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnDueDate As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnMemo As Global.System.Data.DataColumn
        
        Private columnObjType As Global.System.Data.DataColumn
        
        Private columnRef1 As Global.System.Data.DataColumn
        
        Private columnRef2 As Global.System.Data.DataColumn
        
        Private columnRef3 As Global.System.Data.DataColumn
        
        Private columnRefDate As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesStr As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnTransCode As Global.System.Data.DataColumn
        
        Private columnTransCurr As Global.System.Data.DataColumn
        
        Private columnTransId As Global.System.Data.DataColumn
        
        Private columnTransType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OJDT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocSeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesStrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesStr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransCurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OJDTRow
            Get
                Return CType(Me.Rows(index),OJDTRow)
            End Get
        End Property
        
        Public Event OJDTRowChanging As OJDTRowChangeEventHandler
        
        Public Event OJDTRowChanged As OJDTRowChangeEventHandler
        
        Public Event OJDTRowDeleting As OJDTRowChangeEventHandler
        
        Public Event OJDTRowDeleted As OJDTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOJDTRow(ByVal row As OJDTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOJDTRow( _
                    ByVal DocSeries As Integer,  _
                    ByVal DocType As String,  _
                    ByVal DueDate As Date,  _
                    ByVal Number As Long,  _
                    ByVal Memo As String,  _
                    ByVal ObjType As String,  _
                    ByVal Ref1 As String,  _
                    ByVal Ref2 As String,  _
                    ByVal Ref3 As String,  _
                    ByVal RefDate As Date,  _
                    ByVal Series As Integer,  _
                    ByVal SeriesStr As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal TransCode As String,  _
                    ByVal TransCurr As String,  _
                    ByVal TransId As Long,  _
                    ByVal TransType As String) As OJDTRow
            Dim rowOJDTRow As OJDTRow = CType(Me.NewRow,OJDTRow)
            Dim columnValuesArray() As Object = New Object() {DocSeries, DocType, DueDate, Number, Memo, ObjType, Ref1, Ref2, Ref3, RefDate, Series, SeriesStr, TaxDate, TransCode, TransCurr, TransId, TransType}
            rowOJDTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOJDTRow)
            Return rowOJDTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OJDTDataTable = CType(MyBase.Clone,OJDTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OJDTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocSeries = MyBase.Columns("DocSeries")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnDueDate = MyBase.Columns("DueDate")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnMemo = MyBase.Columns("Memo")
            Me.columnObjType = MyBase.Columns("ObjType")
            Me.columnRef1 = MyBase.Columns("Ref1")
            Me.columnRef2 = MyBase.Columns("Ref2")
            Me.columnRef3 = MyBase.Columns("Ref3")
            Me.columnRefDate = MyBase.Columns("RefDate")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesStr = MyBase.Columns("SeriesStr")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnTransCode = MyBase.Columns("TransCode")
            Me.columnTransCurr = MyBase.Columns("TransCurr")
            Me.columnTransId = MyBase.Columns("TransId")
            Me.columnTransType = MyBase.Columns("TransType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocSeries = New Global.System.Data.DataColumn("DocSeries", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocSeries)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnDueDate = New Global.System.Data.DataColumn("DueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDueDate)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnMemo = New Global.System.Data.DataColumn("Memo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemo)
            Me.columnObjType = New Global.System.Data.DataColumn("ObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjType)
            Me.columnRef1 = New Global.System.Data.DataColumn("Ref1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef1)
            Me.columnRef2 = New Global.System.Data.DataColumn("Ref2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef2)
            Me.columnRef3 = New Global.System.Data.DataColumn("Ref3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef3)
            Me.columnRefDate = New Global.System.Data.DataColumn("RefDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefDate)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesStr = New Global.System.Data.DataColumn("SeriesStr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesStr)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnTransCode = New Global.System.Data.DataColumn("TransCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransCode)
            Me.columnTransCurr = New Global.System.Data.DataColumn("TransCurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransCurr)
            Me.columnTransId = New Global.System.Data.DataColumn("TransId", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransId)
            Me.columnTransType = New Global.System.Data.DataColumn("TransType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransType)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOJDTRow() As OJDTRow
            Return CType(Me.NewRow,OJDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OJDTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OJDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OJDTRowChangedEvent) Is Nothing) Then
                RaiseEvent OJDTRowChanged(Me, New OJDTRowChangeEvent(CType(e.Row,OJDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OJDTRowChangingEvent) Is Nothing) Then
                RaiseEvent OJDTRowChanging(Me, New OJDTRowChangeEvent(CType(e.Row,OJDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OJDTRowDeletedEvent) Is Nothing) Then
                RaiseEvent OJDTRowDeleted(Me, New OJDTRowChangeEvent(CType(e.Row,OJDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OJDTRowDeletingEvent) Is Nothing) Then
                RaiseEvent OJDTRowDeleting(Me, New OJDTRowChangeEvent(CType(e.Row,OJDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOJDTRow(ByVal row As OJDTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OJDTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INV1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnLineNum As Global.System.Data.DataColumn
        
        Private columnVisOrder As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDscription As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnTotalFrgn As Global.System.Data.DataColumn
        
        Private columnLineTotal As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INV1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DscriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDscription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalFrgnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalFrgn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INV1Row
            Get
                Return CType(Me.Rows(index),INV1Row)
            End Get
        End Property
        
        Public Event INV1RowChanging As INV1RowChangeEventHandler
        
        Public Event INV1RowChanged As INV1RowChangeEventHandler
        
        Public Event INV1RowDeleting As INV1RowChangeEventHandler
        
        Public Event INV1RowDeleted As INV1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINV1Row(ByVal row As INV1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINV1Row(ByVal DocEntry As Long, ByVal LineNum As Integer, ByVal VisOrder As Integer, ByVal ItemCode As String, ByVal Dscription As String, ByVal Quantity As Decimal, ByVal Price As Decimal, ByVal TotalFrgn As Decimal, ByVal LineTotal As Decimal, ByVal LogInstanc As Integer, ByVal Rate As Decimal) As INV1Row
            Dim rowINV1Row As INV1Row = CType(Me.NewRow,INV1Row)
            Dim columnValuesArray() As Object = New Object() {DocEntry, LineNum, VisOrder, ItemCode, Dscription, Quantity, Price, TotalFrgn, LineTotal, LogInstanc, Rate}
            rowINV1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowINV1Row)
            Return rowINV1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INV1DataTable = CType(MyBase.Clone,INV1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INV1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnLineNum = MyBase.Columns("LineNum")
            Me.columnVisOrder = MyBase.Columns("VisOrder")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDscription = MyBase.Columns("Dscription")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnTotalFrgn = MyBase.Columns("TotalFrgn")
            Me.columnLineTotal = MyBase.Columns("LineTotal")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnRate = MyBase.Columns("Rate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnLineNum = New Global.System.Data.DataColumn("LineNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNum)
            Me.columnVisOrder = New Global.System.Data.DataColumn("VisOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisOrder)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDscription = New Global.System.Data.DataColumn("Dscription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDscription)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnTotalFrgn = New Global.System.Data.DataColumn("TotalFrgn", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalFrgn)
            Me.columnLineTotal = New Global.System.Data.DataColumn("LineTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineTotal)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnRate = New Global.System.Data.DataColumn("Rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINV1Row() As INV1Row
            Return CType(Me.NewRow,INV1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INV1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INV1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INV1RowChangedEvent) Is Nothing) Then
                RaiseEvent INV1RowChanged(Me, New INV1RowChangeEvent(CType(e.Row,INV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INV1RowChangingEvent) Is Nothing) Then
                RaiseEvent INV1RowChanging(Me, New INV1RowChangeEvent(CType(e.Row,INV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INV1RowDeletedEvent) Is Nothing) Then
                RaiseEvent INV1RowDeleted(Me, New INV1RowChangeEvent(CType(e.Row,INV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INV1RowDeletingEvent) Is Nothing) Then
                RaiseEvent INV1RowDeleting(Me, New INV1RowChangeEvent(CType(e.Row,INV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINV1Row(ByVal row As INV1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INV1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RIN1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnLineNum As Global.System.Data.DataColumn
        
        Private columnVisOrder As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDscription As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnTotalFrgn As Global.System.Data.DataColumn
        
        Private columnLineTotal As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RIN1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DscriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDscription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalFrgnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalFrgn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RIN1Row
            Get
                Return CType(Me.Rows(index),RIN1Row)
            End Get
        End Property
        
        Public Event RIN1RowChanging As RIN1RowChangeEventHandler
        
        Public Event RIN1RowChanged As RIN1RowChangeEventHandler
        
        Public Event RIN1RowDeleting As RIN1RowChangeEventHandler
        
        Public Event RIN1RowDeleted As RIN1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRIN1Row(ByVal row As RIN1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRIN1Row(ByVal DocEntry As Long, ByVal LineNum As Integer, ByVal VisOrder As Integer, ByVal ItemCode As String, ByVal Dscription As String, ByVal Quantity As Decimal, ByVal Price As Decimal, ByVal TotalFrgn As Decimal, ByVal LineTotal As Decimal, ByVal LogInstanc As Integer, ByVal Rate As Decimal) As RIN1Row
            Dim rowRIN1Row As RIN1Row = CType(Me.NewRow,RIN1Row)
            Dim columnValuesArray() As Object = New Object() {DocEntry, LineNum, VisOrder, ItemCode, Dscription, Quantity, Price, TotalFrgn, LineTotal, LogInstanc, Rate}
            rowRIN1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowRIN1Row)
            Return rowRIN1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RIN1DataTable = CType(MyBase.Clone,RIN1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RIN1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnLineNum = MyBase.Columns("LineNum")
            Me.columnVisOrder = MyBase.Columns("VisOrder")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDscription = MyBase.Columns("Dscription")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnTotalFrgn = MyBase.Columns("TotalFrgn")
            Me.columnLineTotal = MyBase.Columns("LineTotal")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnRate = MyBase.Columns("Rate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnLineNum = New Global.System.Data.DataColumn("LineNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNum)
            Me.columnVisOrder = New Global.System.Data.DataColumn("VisOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisOrder)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDscription = New Global.System.Data.DataColumn("Dscription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDscription)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnTotalFrgn = New Global.System.Data.DataColumn("TotalFrgn", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalFrgn)
            Me.columnLineTotal = New Global.System.Data.DataColumn("LineTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineTotal)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnRate = New Global.System.Data.DataColumn("Rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRIN1Row() As RIN1Row
            Return CType(Me.NewRow,RIN1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RIN1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RIN1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RIN1RowChangedEvent) Is Nothing) Then
                RaiseEvent RIN1RowChanged(Me, New RIN1RowChangeEvent(CType(e.Row,RIN1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RIN1RowChangingEvent) Is Nothing) Then
                RaiseEvent RIN1RowChanging(Me, New RIN1RowChangeEvent(CType(e.Row,RIN1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RIN1RowDeletedEvent) Is Nothing) Then
                RaiseEvent RIN1RowDeleted(Me, New RIN1RowChangeEvent(CType(e.Row,RIN1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RIN1RowDeletingEvent) Is Nothing) Then
                RaiseEvent RIN1RowDeleting(Me, New RIN1RowChangeEvent(CType(e.Row,RIN1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRIN1Row(ByVal row As RIN1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RIN1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PCH1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnLineNum As Global.System.Data.DataColumn
        
        Private columnVisOrder As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDscription As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnTotalFrgn As Global.System.Data.DataColumn
        
        Private columnLineTotal As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PCH1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DscriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDscription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalFrgnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalFrgn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PCH1Row
            Get
                Return CType(Me.Rows(index),PCH1Row)
            End Get
        End Property
        
        Public Event PCH1RowChanging As PCH1RowChangeEventHandler
        
        Public Event PCH1RowChanged As PCH1RowChangeEventHandler
        
        Public Event PCH1RowDeleting As PCH1RowChangeEventHandler
        
        Public Event PCH1RowDeleted As PCH1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPCH1Row(ByVal row As PCH1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPCH1Row(ByVal DocEntry As Long, ByVal LineNum As Integer, ByVal VisOrder As Integer, ByVal ItemCode As String, ByVal Dscription As String, ByVal Quantity As Decimal, ByVal Price As Decimal, ByVal TotalFrgn As Decimal, ByVal LineTotal As Decimal, ByVal LogInstanc As Integer, ByVal Rate As Decimal) As PCH1Row
            Dim rowPCH1Row As PCH1Row = CType(Me.NewRow,PCH1Row)
            Dim columnValuesArray() As Object = New Object() {DocEntry, LineNum, VisOrder, ItemCode, Dscription, Quantity, Price, TotalFrgn, LineTotal, LogInstanc, Rate}
            rowPCH1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPCH1Row)
            Return rowPCH1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PCH1DataTable = CType(MyBase.Clone,PCH1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PCH1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnLineNum = MyBase.Columns("LineNum")
            Me.columnVisOrder = MyBase.Columns("VisOrder")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDscription = MyBase.Columns("Dscription")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnTotalFrgn = MyBase.Columns("TotalFrgn")
            Me.columnLineTotal = MyBase.Columns("LineTotal")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnRate = MyBase.Columns("Rate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnLineNum = New Global.System.Data.DataColumn("LineNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNum)
            Me.columnVisOrder = New Global.System.Data.DataColumn("VisOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisOrder)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDscription = New Global.System.Data.DataColumn("Dscription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDscription)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnTotalFrgn = New Global.System.Data.DataColumn("TotalFrgn", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalFrgn)
            Me.columnLineTotal = New Global.System.Data.DataColumn("LineTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineTotal)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnRate = New Global.System.Data.DataColumn("Rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPCH1Row() As PCH1Row
            Return CType(Me.NewRow,PCH1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PCH1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PCH1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PCH1RowChangedEvent) Is Nothing) Then
                RaiseEvent PCH1RowChanged(Me, New PCH1RowChangeEvent(CType(e.Row,PCH1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PCH1RowChangingEvent) Is Nothing) Then
                RaiseEvent PCH1RowChanging(Me, New PCH1RowChangeEvent(CType(e.Row,PCH1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PCH1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PCH1RowDeleted(Me, New PCH1RowChangeEvent(CType(e.Row,PCH1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PCH1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PCH1RowDeleting(Me, New PCH1RowChangeEvent(CType(e.Row,PCH1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePCH1Row(ByVal row As PCH1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PCH1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DPO1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnLineNum As Global.System.Data.DataColumn
        
        Private columnVisOrder As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDscription As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnTotalFrgn As Global.System.Data.DataColumn
        
        Private columnLineTotal As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DPO1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DscriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDscription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalFrgnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalFrgn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DPO1Row
            Get
                Return CType(Me.Rows(index),DPO1Row)
            End Get
        End Property
        
        Public Event DPO1RowChanging As DPO1RowChangeEventHandler
        
        Public Event DPO1RowChanged As DPO1RowChangeEventHandler
        
        Public Event DPO1RowDeleting As DPO1RowChangeEventHandler
        
        Public Event DPO1RowDeleted As DPO1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDPO1Row(ByVal row As DPO1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDPO1Row(ByVal DocEntry As Long, ByVal LineNum As Integer, ByVal VisOrder As Integer, ByVal ItemCode As String, ByVal Dscription As String, ByVal Quantity As Decimal, ByVal Price As Decimal, ByVal TotalFrgn As Decimal, ByVal LineTotal As Decimal, ByVal LogInstanc As Integer, ByVal Rate As Decimal) As DPO1Row
            Dim rowDPO1Row As DPO1Row = CType(Me.NewRow,DPO1Row)
            Dim columnValuesArray() As Object = New Object() {DocEntry, LineNum, VisOrder, ItemCode, Dscription, Quantity, Price, TotalFrgn, LineTotal, LogInstanc, Rate}
            rowDPO1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDPO1Row)
            Return rowDPO1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DPO1DataTable = CType(MyBase.Clone,DPO1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DPO1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnLineNum = MyBase.Columns("LineNum")
            Me.columnVisOrder = MyBase.Columns("VisOrder")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDscription = MyBase.Columns("Dscription")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnTotalFrgn = MyBase.Columns("TotalFrgn")
            Me.columnLineTotal = MyBase.Columns("LineTotal")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnRate = MyBase.Columns("Rate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnLineNum = New Global.System.Data.DataColumn("LineNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNum)
            Me.columnVisOrder = New Global.System.Data.DataColumn("VisOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisOrder)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDscription = New Global.System.Data.DataColumn("Dscription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDscription)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnTotalFrgn = New Global.System.Data.DataColumn("TotalFrgn", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalFrgn)
            Me.columnLineTotal = New Global.System.Data.DataColumn("LineTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineTotal)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnRate = New Global.System.Data.DataColumn("Rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDPO1Row() As DPO1Row
            Return CType(Me.NewRow,DPO1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DPO1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DPO1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DPO1RowChangedEvent) Is Nothing) Then
                RaiseEvent DPO1RowChanged(Me, New DPO1RowChangeEvent(CType(e.Row,DPO1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DPO1RowChangingEvent) Is Nothing) Then
                RaiseEvent DPO1RowChanging(Me, New DPO1RowChangeEvent(CType(e.Row,DPO1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DPO1RowDeletedEvent) Is Nothing) Then
                RaiseEvent DPO1RowDeleted(Me, New DPO1RowChangeEvent(CType(e.Row,DPO1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DPO1RowDeletingEvent) Is Nothing) Then
                RaiseEvent DPO1RowDeleting(Me, New DPO1RowChangeEvent(CType(e.Row,DPO1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDPO1Row(ByVal row As DPO1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DPO1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RPC1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnLineNum As Global.System.Data.DataColumn
        
        Private columnVisOrder As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDscription As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnTotalFrgn As Global.System.Data.DataColumn
        
        Private columnLineTotal As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RPC1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DscriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDscription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalFrgnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalFrgn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RPC1Row
            Get
                Return CType(Me.Rows(index),RPC1Row)
            End Get
        End Property
        
        Public Event RPC1RowChanging As RPC1RowChangeEventHandler
        
        Public Event RPC1RowChanged As RPC1RowChangeEventHandler
        
        Public Event RPC1RowDeleting As RPC1RowChangeEventHandler
        
        Public Event RPC1RowDeleted As RPC1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRPC1Row(ByVal row As RPC1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRPC1Row(ByVal DocEntry As Long, ByVal LineNum As Integer, ByVal VisOrder As Integer, ByVal ItemCode As String, ByVal Dscription As String, ByVal Quantity As Decimal, ByVal Price As Decimal, ByVal TotalFrgn As Decimal, ByVal LineTotal As Decimal, ByVal LogInstanc As Integer, ByVal Rate As Decimal) As RPC1Row
            Dim rowRPC1Row As RPC1Row = CType(Me.NewRow,RPC1Row)
            Dim columnValuesArray() As Object = New Object() {DocEntry, LineNum, VisOrder, ItemCode, Dscription, Quantity, Price, TotalFrgn, LineTotal, LogInstanc, Rate}
            rowRPC1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowRPC1Row)
            Return rowRPC1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RPC1DataTable = CType(MyBase.Clone,RPC1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RPC1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnLineNum = MyBase.Columns("LineNum")
            Me.columnVisOrder = MyBase.Columns("VisOrder")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDscription = MyBase.Columns("Dscription")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnTotalFrgn = MyBase.Columns("TotalFrgn")
            Me.columnLineTotal = MyBase.Columns("LineTotal")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnRate = MyBase.Columns("Rate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnLineNum = New Global.System.Data.DataColumn("LineNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNum)
            Me.columnVisOrder = New Global.System.Data.DataColumn("VisOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisOrder)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDscription = New Global.System.Data.DataColumn("Dscription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDscription)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnTotalFrgn = New Global.System.Data.DataColumn("TotalFrgn", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalFrgn)
            Me.columnLineTotal = New Global.System.Data.DataColumn("LineTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineTotal)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnRate = New Global.System.Data.DataColumn("Rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRPC1Row() As RPC1Row
            Return CType(Me.NewRow,RPC1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RPC1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RPC1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RPC1RowChangedEvent) Is Nothing) Then
                RaiseEvent RPC1RowChanged(Me, New RPC1RowChangeEvent(CType(e.Row,RPC1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RPC1RowChangingEvent) Is Nothing) Then
                RaiseEvent RPC1RowChanging(Me, New RPC1RowChangeEvent(CType(e.Row,RPC1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RPC1RowDeletedEvent) Is Nothing) Then
                RaiseEvent RPC1RowDeleted(Me, New RPC1RowChangeEvent(CType(e.Row,RPC1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RPC1RowDeletingEvent) Is Nothing) Then
                RaiseEvent RPC1RowDeleting(Me, New RPC1RowChangeEvent(CType(e.Row,RPC1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRPC1Row(ByVal row As RPC1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RPC1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DPI1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnLineNum As Global.System.Data.DataColumn
        
        Private columnVisOrder As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDscription As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnTotalFrgn As Global.System.Data.DataColumn
        
        Private columnLineTotal As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DPI1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DscriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDscription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalFrgnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalFrgn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DPI1Row
            Get
                Return CType(Me.Rows(index),DPI1Row)
            End Get
        End Property
        
        Public Event DPI1RowChanging As DPI1RowChangeEventHandler
        
        Public Event DPI1RowChanged As DPI1RowChangeEventHandler
        
        Public Event DPI1RowDeleting As DPI1RowChangeEventHandler
        
        Public Event DPI1RowDeleted As DPI1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDPI1Row(ByVal row As DPI1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDPI1Row(ByVal DocEntry As Long, ByVal LineNum As Integer, ByVal VisOrder As Integer, ByVal ItemCode As String, ByVal Dscription As String, ByVal Quantity As Decimal, ByVal Price As Decimal, ByVal TotalFrgn As Decimal, ByVal LineTotal As Decimal, ByVal LogInstanc As Integer, ByVal Rate As Decimal) As DPI1Row
            Dim rowDPI1Row As DPI1Row = CType(Me.NewRow,DPI1Row)
            Dim columnValuesArray() As Object = New Object() {DocEntry, LineNum, VisOrder, ItemCode, Dscription, Quantity, Price, TotalFrgn, LineTotal, LogInstanc, Rate}
            rowDPI1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDPI1Row)
            Return rowDPI1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DPI1DataTable = CType(MyBase.Clone,DPI1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DPI1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnLineNum = MyBase.Columns("LineNum")
            Me.columnVisOrder = MyBase.Columns("VisOrder")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDscription = MyBase.Columns("Dscription")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnTotalFrgn = MyBase.Columns("TotalFrgn")
            Me.columnLineTotal = MyBase.Columns("LineTotal")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnRate = MyBase.Columns("Rate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnLineNum = New Global.System.Data.DataColumn("LineNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineNum)
            Me.columnVisOrder = New Global.System.Data.DataColumn("VisOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisOrder)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDscription = New Global.System.Data.DataColumn("Dscription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDscription)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnTotalFrgn = New Global.System.Data.DataColumn("TotalFrgn", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalFrgn)
            Me.columnLineTotal = New Global.System.Data.DataColumn("LineTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineTotal)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnRate = New Global.System.Data.DataColumn("Rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDPI1Row() As DPI1Row
            Return CType(Me.NewRow,DPI1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DPI1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DPI1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DPI1RowChangedEvent) Is Nothing) Then
                RaiseEvent DPI1RowChanged(Me, New DPI1RowChangeEvent(CType(e.Row,DPI1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DPI1RowChangingEvent) Is Nothing) Then
                RaiseEvent DPI1RowChanging(Me, New DPI1RowChangeEvent(CType(e.Row,DPI1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DPI1RowDeletedEvent) Is Nothing) Then
                RaiseEvent DPI1RowDeleted(Me, New DPI1RowChangeEvent(CType(e.Row,DPI1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DPI1RowDeletingEvent) Is Nothing) Then
                RaiseEvent DPI1RowDeleting(Me, New DPI1RowChangeEvent(CType(e.Row,DPI1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDPI1Row(ByVal row As DPI1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DPI1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OINVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocCur As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnNumAtCard As Global.System.Data.DataColumn
        
        Private columnObjType As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnVatSum As Global.System.Data.DataColumn
        
        Private columnVatSumFC As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OINV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAtCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAtCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OINVRow
            Get
                Return CType(Me.Rows(index),OINVRow)
            End Get
        End Property
        
        Public Event OINVRowChanging As OINVRowChangeEventHandler
        
        Public Event OINVRowChanged As OINVRowChangeEventHandler
        
        Public Event OINVRowDeleting As OINVRowChangeEventHandler
        
        Public Event OINVRowDeleted As OINVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOINVRow(ByVal row As OINVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOINVRow( _
                    ByVal CardCode As String,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocCur As String,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal NumAtCard As String,  _
                    ByVal ObjType As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal VatSum As Decimal,  _
                    ByVal VatSumFC As Decimal,  _
                    ByVal Series As Integer,  _
                    ByVal LogInstanc As Integer) As OINVRow
            Dim rowOINVRow As OINVRow = CType(Me.NewRow,OINVRow)
            Dim columnValuesArray() As Object = New Object() {CardCode, DocEntry, DocNum, DocDate, DocDueDate, DocRate, DocCur, DocTotal, DocTotalFC, DocType, NumAtCard, ObjType, TaxDate, VatSum, VatSumFC, Series, LogInstanc}
            rowOINVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOINVRow)
            Return rowOINVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OINVDataTable = CType(MyBase.Clone,OINVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OINVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocCur = MyBase.Columns("DocCur")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnNumAtCard = MyBase.Columns("NumAtCard")
            Me.columnObjType = MyBase.Columns("ObjType")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnVatSum = MyBase.Columns("VatSum")
            Me.columnVatSumFC = MyBase.Columns("VatSumFC")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocCur = New Global.System.Data.DataColumn("DocCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCur)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnNumAtCard = New Global.System.Data.DataColumn("NumAtCard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAtCard)
            Me.columnObjType = New Global.System.Data.DataColumn("ObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjType)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnVatSum = New Global.System.Data.DataColumn("VatSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSum)
            Me.columnVatSumFC = New Global.System.Data.DataColumn("VatSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSumFC)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOINVRow() As OINVRow
            Return CType(Me.NewRow,OINVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OINVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OINVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OINVRowChangedEvent) Is Nothing) Then
                RaiseEvent OINVRowChanged(Me, New OINVRowChangeEvent(CType(e.Row,OINVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OINVRowChangingEvent) Is Nothing) Then
                RaiseEvent OINVRowChanging(Me, New OINVRowChangeEvent(CType(e.Row,OINVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OINVRowDeletedEvent) Is Nothing) Then
                RaiseEvent OINVRowDeleted(Me, New OINVRowChangeEvent(CType(e.Row,OINVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OINVRowDeletingEvent) Is Nothing) Then
                RaiseEvent OINVRowDeleting(Me, New OINVRowChangeEvent(CType(e.Row,OINVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOINVRow(ByVal row As OINVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OINVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORPCDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocCur As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnNumAtCard As Global.System.Data.DataColumn
        
        Private columnObjType As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnVatSum As Global.System.Data.DataColumn
        
        Private columnVatSumFC As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORPC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAtCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAtCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORPCRow
            Get
                Return CType(Me.Rows(index),ORPCRow)
            End Get
        End Property
        
        Public Event ORPCRowChanging As ORPCRowChangeEventHandler
        
        Public Event ORPCRowChanged As ORPCRowChangeEventHandler
        
        Public Event ORPCRowDeleting As ORPCRowChangeEventHandler
        
        Public Event ORPCRowDeleted As ORPCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORPCRow(ByVal row As ORPCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORPCRow( _
                    ByVal CardCode As String,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocCur As String,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal NumAtCard As String,  _
                    ByVal ObjType As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal VatSum As Decimal,  _
                    ByVal VatSumFC As Decimal,  _
                    ByVal Series As Integer,  _
                    ByVal LogInstanc As Integer) As ORPCRow
            Dim rowORPCRow As ORPCRow = CType(Me.NewRow,ORPCRow)
            Dim columnValuesArray() As Object = New Object() {CardCode, DocEntry, DocNum, DocDate, DocDueDate, DocRate, DocCur, DocTotal, DocTotalFC, DocType, NumAtCard, ObjType, TaxDate, VatSum, VatSumFC, Series, LogInstanc}
            rowORPCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORPCRow)
            Return rowORPCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORPCDataTable = CType(MyBase.Clone,ORPCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORPCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocCur = MyBase.Columns("DocCur")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnNumAtCard = MyBase.Columns("NumAtCard")
            Me.columnObjType = MyBase.Columns("ObjType")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnVatSum = MyBase.Columns("VatSum")
            Me.columnVatSumFC = MyBase.Columns("VatSumFC")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocCur = New Global.System.Data.DataColumn("DocCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCur)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnNumAtCard = New Global.System.Data.DataColumn("NumAtCard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAtCard)
            Me.columnObjType = New Global.System.Data.DataColumn("ObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjType)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnVatSum = New Global.System.Data.DataColumn("VatSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSum)
            Me.columnVatSumFC = New Global.System.Data.DataColumn("VatSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSumFC)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORPCRow() As ORPCRow
            Return CType(Me.NewRow,ORPCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORPCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORPCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORPCRowChangedEvent) Is Nothing) Then
                RaiseEvent ORPCRowChanged(Me, New ORPCRowChangeEvent(CType(e.Row,ORPCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORPCRowChangingEvent) Is Nothing) Then
                RaiseEvent ORPCRowChanging(Me, New ORPCRowChangeEvent(CType(e.Row,ORPCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORPCRowDeletedEvent) Is Nothing) Then
                RaiseEvent ORPCRowDeleted(Me, New ORPCRowChangeEvent(CType(e.Row,ORPCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORPCRowDeletingEvent) Is Nothing) Then
                RaiseEvent ORPCRowDeleting(Me, New ORPCRowChangeEvent(CType(e.Row,ORPCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORPCRow(ByVal row As ORPCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORPCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORINDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocCur As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnNumAtCard As Global.System.Data.DataColumn
        
        Private columnObjType As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnVatSum As Global.System.Data.DataColumn
        
        Private columnVatSumFC As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORIN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAtCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAtCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORINRow
            Get
                Return CType(Me.Rows(index),ORINRow)
            End Get
        End Property
        
        Public Event ORINRowChanging As ORINRowChangeEventHandler
        
        Public Event ORINRowChanged As ORINRowChangeEventHandler
        
        Public Event ORINRowDeleting As ORINRowChangeEventHandler
        
        Public Event ORINRowDeleted As ORINRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORINRow(ByVal row As ORINRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORINRow( _
                    ByVal CardCode As String,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocCur As String,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal NumAtCard As String,  _
                    ByVal ObjType As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal VatSum As Decimal,  _
                    ByVal VatSumFC As Decimal,  _
                    ByVal Series As Integer,  _
                    ByVal LogInstanc As Integer) As ORINRow
            Dim rowORINRow As ORINRow = CType(Me.NewRow,ORINRow)
            Dim columnValuesArray() As Object = New Object() {CardCode, DocEntry, DocNum, DocDate, DocDueDate, DocRate, DocCur, DocTotal, DocTotalFC, DocType, NumAtCard, ObjType, TaxDate, VatSum, VatSumFC, Series, LogInstanc}
            rowORINRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORINRow)
            Return rowORINRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORINDataTable = CType(MyBase.Clone,ORINDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORINDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocCur = MyBase.Columns("DocCur")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnNumAtCard = MyBase.Columns("NumAtCard")
            Me.columnObjType = MyBase.Columns("ObjType")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnVatSum = MyBase.Columns("VatSum")
            Me.columnVatSumFC = MyBase.Columns("VatSumFC")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocCur = New Global.System.Data.DataColumn("DocCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCur)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnNumAtCard = New Global.System.Data.DataColumn("NumAtCard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAtCard)
            Me.columnObjType = New Global.System.Data.DataColumn("ObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjType)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnVatSum = New Global.System.Data.DataColumn("VatSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSum)
            Me.columnVatSumFC = New Global.System.Data.DataColumn("VatSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSumFC)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORINRow() As ORINRow
            Return CType(Me.NewRow,ORINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORINRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORINRowChangedEvent) Is Nothing) Then
                RaiseEvent ORINRowChanged(Me, New ORINRowChangeEvent(CType(e.Row,ORINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORINRowChangingEvent) Is Nothing) Then
                RaiseEvent ORINRowChanging(Me, New ORINRowChangeEvent(CType(e.Row,ORINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORINRowDeletedEvent) Is Nothing) Then
                RaiseEvent ORINRowDeleted(Me, New ORINRowChangeEvent(CType(e.Row,ORINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORINRowDeletingEvent) Is Nothing) Then
                RaiseEvent ORINRowDeleting(Me, New ORINRowChangeEvent(CType(e.Row,ORINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORINRow(ByVal row As ORINRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORINDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OPCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocCur As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnNumAtCard As Global.System.Data.DataColumn
        
        Private columnObjType As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnVatSum As Global.System.Data.DataColumn
        
        Private columnVatSumFC As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OPCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAtCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAtCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OPCHRow
            Get
                Return CType(Me.Rows(index),OPCHRow)
            End Get
        End Property
        
        Public Event OPCHRowChanging As OPCHRowChangeEventHandler
        
        Public Event OPCHRowChanged As OPCHRowChangeEventHandler
        
        Public Event OPCHRowDeleting As OPCHRowChangeEventHandler
        
        Public Event OPCHRowDeleted As OPCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOPCHRow(ByVal row As OPCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOPCHRow( _
                    ByVal CardCode As String,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocCur As String,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal NumAtCard As String,  _
                    ByVal ObjType As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal VatSum As Decimal,  _
                    ByVal VatSumFC As Decimal,  _
                    ByVal Series As Integer,  _
                    ByVal LogInstanc As Integer) As OPCHRow
            Dim rowOPCHRow As OPCHRow = CType(Me.NewRow,OPCHRow)
            Dim columnValuesArray() As Object = New Object() {CardCode, DocEntry, DocNum, DocDate, DocDueDate, DocRate, DocCur, DocTotal, DocTotalFC, DocType, NumAtCard, ObjType, TaxDate, VatSum, VatSumFC, Series, LogInstanc}
            rowOPCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOPCHRow)
            Return rowOPCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OPCHDataTable = CType(MyBase.Clone,OPCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OPCHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocCur = MyBase.Columns("DocCur")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnNumAtCard = MyBase.Columns("NumAtCard")
            Me.columnObjType = MyBase.Columns("ObjType")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnVatSum = MyBase.Columns("VatSum")
            Me.columnVatSumFC = MyBase.Columns("VatSumFC")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocCur = New Global.System.Data.DataColumn("DocCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCur)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnNumAtCard = New Global.System.Data.DataColumn("NumAtCard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAtCard)
            Me.columnObjType = New Global.System.Data.DataColumn("ObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjType)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnVatSum = New Global.System.Data.DataColumn("VatSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSum)
            Me.columnVatSumFC = New Global.System.Data.DataColumn("VatSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSumFC)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOPCHRow() As OPCHRow
            Return CType(Me.NewRow,OPCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OPCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OPCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OPCHRowChangedEvent) Is Nothing) Then
                RaiseEvent OPCHRowChanged(Me, New OPCHRowChangeEvent(CType(e.Row,OPCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OPCHRowChangingEvent) Is Nothing) Then
                RaiseEvent OPCHRowChanging(Me, New OPCHRowChangeEvent(CType(e.Row,OPCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OPCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent OPCHRowDeleted(Me, New OPCHRowChangeEvent(CType(e.Row,OPCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OPCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent OPCHRowDeleting(Me, New OPCHRowChangeEvent(CType(e.Row,OPCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOPCHRow(ByVal row As OPCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OPCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ODPIDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocCur As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnNumAtCard As Global.System.Data.DataColumn
        
        Private columnObjType As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnVatSum As Global.System.Data.DataColumn
        
        Private columnVatSumFC As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ODPI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAtCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAtCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ODPIRow
            Get
                Return CType(Me.Rows(index),ODPIRow)
            End Get
        End Property
        
        Public Event ODPIRowChanging As ODPIRowChangeEventHandler
        
        Public Event ODPIRowChanged As ODPIRowChangeEventHandler
        
        Public Event ODPIRowDeleting As ODPIRowChangeEventHandler
        
        Public Event ODPIRowDeleted As ODPIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddODPIRow(ByVal row As ODPIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddODPIRow( _
                    ByVal CardCode As String,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocCur As String,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal NumAtCard As String,  _
                    ByVal ObjType As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal VatSum As Decimal,  _
                    ByVal VatSumFC As Decimal,  _
                    ByVal Series As Integer,  _
                    ByVal LogInstanc As Integer) As ODPIRow
            Dim rowODPIRow As ODPIRow = CType(Me.NewRow,ODPIRow)
            Dim columnValuesArray() As Object = New Object() {CardCode, DocEntry, DocNum, DocDate, DocDueDate, DocRate, DocCur, DocTotal, DocTotalFC, DocType, NumAtCard, ObjType, TaxDate, VatSum, VatSumFC, Series, LogInstanc}
            rowODPIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowODPIRow)
            Return rowODPIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ODPIDataTable = CType(MyBase.Clone,ODPIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ODPIDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocCur = MyBase.Columns("DocCur")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnNumAtCard = MyBase.Columns("NumAtCard")
            Me.columnObjType = MyBase.Columns("ObjType")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnVatSum = MyBase.Columns("VatSum")
            Me.columnVatSumFC = MyBase.Columns("VatSumFC")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocCur = New Global.System.Data.DataColumn("DocCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCur)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnNumAtCard = New Global.System.Data.DataColumn("NumAtCard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAtCard)
            Me.columnObjType = New Global.System.Data.DataColumn("ObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjType)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnVatSum = New Global.System.Data.DataColumn("VatSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSum)
            Me.columnVatSumFC = New Global.System.Data.DataColumn("VatSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSumFC)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewODPIRow() As ODPIRow
            Return CType(Me.NewRow,ODPIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ODPIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ODPIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ODPIRowChangedEvent) Is Nothing) Then
                RaiseEvent ODPIRowChanged(Me, New ODPIRowChangeEvent(CType(e.Row,ODPIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ODPIRowChangingEvent) Is Nothing) Then
                RaiseEvent ODPIRowChanging(Me, New ODPIRowChangeEvent(CType(e.Row,ODPIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ODPIRowDeletedEvent) Is Nothing) Then
                RaiseEvent ODPIRowDeleted(Me, New ODPIRowChangeEvent(CType(e.Row,ODPIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ODPIRowDeletingEvent) Is Nothing) Then
                RaiseEvent ODPIRowDeleting(Me, New ODPIRowChangeEvent(CType(e.Row,ODPIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveODPIRow(ByVal row As ODPIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ODPIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ODPODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocCur As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnNumAtCard As Global.System.Data.DataColumn
        
        Private columnObjType As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnVatSum As Global.System.Data.DataColumn
        
        Private columnVatSumFC As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ODPO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAtCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAtCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ODPORow
            Get
                Return CType(Me.Rows(index),ODPORow)
            End Get
        End Property
        
        Public Event ODPORowChanging As ODPORowChangeEventHandler
        
        Public Event ODPORowChanged As ODPORowChangeEventHandler
        
        Public Event ODPORowDeleting As ODPORowChangeEventHandler
        
        Public Event ODPORowDeleted As ODPORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddODPORow(ByVal row As ODPORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddODPORow( _
                    ByVal CardCode As String,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocCur As String,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal NumAtCard As String,  _
                    ByVal ObjType As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal VatSum As Decimal,  _
                    ByVal VatSumFC As Decimal,  _
                    ByVal Series As Integer,  _
                    ByVal LogInstanc As Integer) As ODPORow
            Dim rowODPORow As ODPORow = CType(Me.NewRow,ODPORow)
            Dim columnValuesArray() As Object = New Object() {CardCode, DocEntry, DocNum, DocDate, DocDueDate, DocRate, DocCur, DocTotal, DocTotalFC, DocType, NumAtCard, ObjType, TaxDate, VatSum, VatSumFC, Series, LogInstanc}
            rowODPORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowODPORow)
            Return rowODPORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ODPODataTable = CType(MyBase.Clone,ODPODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ODPODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocCur = MyBase.Columns("DocCur")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnNumAtCard = MyBase.Columns("NumAtCard")
            Me.columnObjType = MyBase.Columns("ObjType")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnVatSum = MyBase.Columns("VatSum")
            Me.columnVatSumFC = MyBase.Columns("VatSumFC")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocCur = New Global.System.Data.DataColumn("DocCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCur)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnNumAtCard = New Global.System.Data.DataColumn("NumAtCard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAtCard)
            Me.columnObjType = New Global.System.Data.DataColumn("ObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjType)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnVatSum = New Global.System.Data.DataColumn("VatSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSum)
            Me.columnVatSumFC = New Global.System.Data.DataColumn("VatSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSumFC)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewODPORow() As ODPORow
            Return CType(Me.NewRow,ODPORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ODPORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ODPORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ODPORowChangedEvent) Is Nothing) Then
                RaiseEvent ODPORowChanged(Me, New ODPORowChangeEvent(CType(e.Row,ODPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ODPORowChangingEvent) Is Nothing) Then
                RaiseEvent ODPORowChanging(Me, New ODPORowChangeEvent(CType(e.Row,ODPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ODPORowDeletedEvent) Is Nothing) Then
                RaiseEvent ODPORowDeleted(Me, New ODPORowChangeEvent(CType(e.Row,ODPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ODPORowDeletingEvent) Is Nothing) Then
                RaiseEvent ODPORowDeleting(Me, New ODPORowChangeEvent(CType(e.Row,ODPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveODPORow(ByVal row As ODPORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ODPODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NNM1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObjectCode As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnBeginStr As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NNM1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeginStrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeginStr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NNM1Row
            Get
                Return CType(Me.Rows(index),NNM1Row)
            End Get
        End Property
        
        Public Event NNM1RowChanging As NNM1RowChangeEventHandler
        
        Public Event NNM1RowChanged As NNM1RowChangeEventHandler
        
        Public Event NNM1RowDeleting As NNM1RowChangeEventHandler
        
        Public Event NNM1RowDeleted As NNM1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNNM1Row(ByVal row As NNM1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNNM1Row(ByVal ObjectCode As String, ByVal Series As Integer, ByVal BeginStr As String, ByVal SeriesName As String) As NNM1Row
            Dim rowNNM1Row As NNM1Row = CType(Me.NewRow,NNM1Row)
            Dim columnValuesArray() As Object = New Object() {ObjectCode, Series, BeginStr, SeriesName}
            rowNNM1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowNNM1Row)
            Return rowNNM1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NNM1DataTable = CType(MyBase.Clone,NNM1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NNM1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectCode = MyBase.Columns("ObjectCode")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnBeginStr = MyBase.Columns("BeginStr")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectCode = New Global.System.Data.DataColumn("ObjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectCode)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnBeginStr = New Global.System.Data.DataColumn("BeginStr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeginStr)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNNM1Row() As NNM1Row
            Return CType(Me.NewRow,NNM1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NNM1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NNM1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NNM1RowChangedEvent) Is Nothing) Then
                RaiseEvent NNM1RowChanged(Me, New NNM1RowChangeEvent(CType(e.Row,NNM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NNM1RowChangingEvent) Is Nothing) Then
                RaiseEvent NNM1RowChanging(Me, New NNM1RowChangeEvent(CType(e.Row,NNM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NNM1RowDeletedEvent) Is Nothing) Then
                RaiseEvent NNM1RowDeleted(Me, New NNM1RowChangeEvent(CType(e.Row,NNM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NNM1RowDeletingEvent) Is Nothing) Then
                RaiseEvent NNM1RowDeleting(Me, New NNM1RowChangeEvent(CType(e.Row,NNM1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNNM1Row(ByVal row As NNM1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NNM1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class __NCM_IMAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFLAG As Global.System.Data.DataColumn
        
        Private columnSRNO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "@NCM_IMAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SRNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSRNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As __NCM_IMAGERow
            Get
                Return CType(Me.Rows(index),__NCM_IMAGERow)
            End Get
        End Property
        
        Public Event __NCM_IMAGERowChanging As __NCM_IMAGERowChangeEventHandler
        
        Public Event __NCM_IMAGERowChanged As __NCM_IMAGERowChangeEventHandler
        
        Public Event __NCM_IMAGERowDeleting As __NCM_IMAGERowChangeEventHandler
        
        Public Event __NCM_IMAGERowDeleted As __NCM_IMAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Add__NCM_IMAGERow(ByVal row As __NCM_IMAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Add__NCM_IMAGERow(ByVal FLAG As Integer, ByVal SRNO As Integer) As __NCM_IMAGERow
            Dim row__NCM_IMAGERow As __NCM_IMAGERow = CType(Me.NewRow,__NCM_IMAGERow)
            Dim columnValuesArray() As Object = New Object() {FLAG, SRNO}
            row__NCM_IMAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(row__NCM_IMAGERow)
            Return row__NCM_IMAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As __NCM_IMAGEDataTable = CType(MyBase.Clone,__NCM_IMAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New __NCM_IMAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFLAG = MyBase.Columns("FLAG")
            Me.columnSRNO = MyBase.Columns("SRNO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFLAG = New Global.System.Data.DataColumn("FLAG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFLAG)
            Me.columnSRNO = New Global.System.Data.DataColumn("SRNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSRNO)
            Me.ExtendedProperties.Add("Generator_TableVarName", "_table_NCM_IMAGE")
            Me.ExtendedProperties.Add("Generator_UserTableName", "@NCM_IMAGE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function New__NCM_IMAGERow() As __NCM_IMAGERow
            Return CType(Me.NewRow,__NCM_IMAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New __NCM_IMAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(__NCM_IMAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.__NCM_IMAGERowChangedEvent) Is Nothing) Then
                RaiseEvent __NCM_IMAGERowChanged(Me, New __NCM_IMAGERowChangeEvent(CType(e.Row,__NCM_IMAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.__NCM_IMAGERowChangingEvent) Is Nothing) Then
                RaiseEvent __NCM_IMAGERowChanging(Me, New __NCM_IMAGERowChangeEvent(CType(e.Row,__NCM_IMAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.__NCM_IMAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent __NCM_IMAGERowDeleted(Me, New __NCM_IMAGERowChangeEvent(CType(e.Row,__NCM_IMAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.__NCM_IMAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent __NCM_IMAGERowDeleting(Me, New __NCM_IMAGERowChangeEvent(CType(e.Row,__NCM_IMAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Remove__NCM_IMAGERow(ByVal row As __NCM_IMAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "__NCM_IMAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OPDFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnBcgSum As Global.System.Data.DataColumn
        
        Private columnBcgSumFC As Global.System.Data.DataColumn
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnCardName As Global.System.Data.DataColumn
        
        Private columnCashAcct As Global.System.Data.DataColumn
        
        Private columnCashSum As Global.System.Data.DataColumn
        
        Private columnCashSumFC As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCounterRef As Global.System.Data.DataColumn
        
        Private columnDocCurr As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnRef1 As Global.System.Data.DataColumn
        
        Private columnRef2 As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesStr As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnTransId As Global.System.Data.DataColumn
        
        Private columnTrsfrAcct As Global.System.Data.DataColumn
        
        Private columnTrsfrDate As Global.System.Data.DataColumn
        
        Private columnTrsfrRef As Global.System.Data.DataColumn
        
        Private columnTrsfrSum As Global.System.Data.DataColumn
        
        Private columnTrsfrSumFC As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnDiffCurr As Global.System.Data.DataColumn
        
        Private columnPrjCode As Global.System.Data.DataColumn
        
        Private columnJrnlMemo As Global.System.Data.DataColumn
        
        Private columnContactPerson As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OPDF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BcgSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBcgSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BcgSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBcgSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesStrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesStr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiffCurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiffCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrjCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrjCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JrnlMemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJrnlMemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPerson
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OPDFRow
            Get
                Return CType(Me.Rows(index),OPDFRow)
            End Get
        End Property
        
        Public Event OPDFRowChanging As OPDFRowChangeEventHandler
        
        Public Event OPDFRowChanged As OPDFRowChangeEventHandler
        
        Public Event OPDFRowDeleting As OPDFRowChangeEventHandler
        
        Public Event OPDFRowDeleted As OPDFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOPDFRow(ByVal row As OPDFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOPDFRow( _
                    ByVal Address As String,  _
                    ByVal BcgSum As Decimal,  _
                    ByVal BcgSumFC As Decimal,  _
                    ByVal CardCode As String,  _
                    ByVal CardName As String,  _
                    ByVal CashAcct As String,  _
                    ByVal CashSum As Decimal,  _
                    ByVal CashSumFC As Decimal,  _
                    ByVal Comments As String,  _
                    ByVal CounterRef As String,  _
                    ByVal DocCurr As String,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal Ref1 As String,  _
                    ByVal Ref2 As String,  _
                    ByVal Series As Integer,  _
                    ByVal SeriesStr As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal TransId As Integer,  _
                    ByVal TrsfrAcct As String,  _
                    ByVal TrsfrDate As Date,  _
                    ByVal TrsfrRef As String,  _
                    ByVal TrsfrSum As Decimal,  _
                    ByVal TrsfrSumFC As Decimal,  _
                    ByVal LogInstanc As Integer,  _
                    ByVal DiffCurr As String,  _
                    ByVal PrjCode As String,  _
                    ByVal JrnlMemo As String,  _
                    ByVal ContactPerson As String) As OPDFRow
            Dim rowOPDFRow As OPDFRow = CType(Me.NewRow,OPDFRow)
            Dim columnValuesArray() As Object = New Object() {Address, BcgSum, BcgSumFC, CardCode, CardName, CashAcct, CashSum, CashSumFC, Comments, CounterRef, DocCurr, DocDate, DocDueDate, DocEntry, DocNum, DocRate, DocTotal, DocTotalFC, DocType, Ref1, Ref2, Series, SeriesStr, TaxDate, TransId, TrsfrAcct, TrsfrDate, TrsfrRef, TrsfrSum, TrsfrSumFC, LogInstanc, DiffCurr, PrjCode, JrnlMemo, ContactPerson}
            rowOPDFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOPDFRow)
            Return rowOPDFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OPDFDataTable = CType(MyBase.Clone,OPDFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OPDFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnBcgSum = MyBase.Columns("BcgSum")
            Me.columnBcgSumFC = MyBase.Columns("BcgSumFC")
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnCardName = MyBase.Columns("CardName")
            Me.columnCashAcct = MyBase.Columns("CashAcct")
            Me.columnCashSum = MyBase.Columns("CashSum")
            Me.columnCashSumFC = MyBase.Columns("CashSumFC")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCounterRef = MyBase.Columns("CounterRef")
            Me.columnDocCurr = MyBase.Columns("DocCurr")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnRef1 = MyBase.Columns("Ref1")
            Me.columnRef2 = MyBase.Columns("Ref2")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesStr = MyBase.Columns("SeriesStr")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnTransId = MyBase.Columns("TransId")
            Me.columnTrsfrAcct = MyBase.Columns("TrsfrAcct")
            Me.columnTrsfrDate = MyBase.Columns("TrsfrDate")
            Me.columnTrsfrRef = MyBase.Columns("TrsfrRef")
            Me.columnTrsfrSum = MyBase.Columns("TrsfrSum")
            Me.columnTrsfrSumFC = MyBase.Columns("TrsfrSumFC")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnDiffCurr = MyBase.Columns("DiffCurr")
            Me.columnPrjCode = MyBase.Columns("PrjCode")
            Me.columnJrnlMemo = MyBase.Columns("JrnlMemo")
            Me.columnContactPerson = MyBase.Columns("ContactPerson")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnBcgSum = New Global.System.Data.DataColumn("BcgSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBcgSum)
            Me.columnBcgSumFC = New Global.System.Data.DataColumn("BcgSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBcgSumFC)
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnCardName = New Global.System.Data.DataColumn("CardName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardName)
            Me.columnCashAcct = New Global.System.Data.DataColumn("CashAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashAcct)
            Me.columnCashSum = New Global.System.Data.DataColumn("CashSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashSum)
            Me.columnCashSumFC = New Global.System.Data.DataColumn("CashSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashSumFC)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCounterRef = New Global.System.Data.DataColumn("CounterRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterRef)
            Me.columnDocCurr = New Global.System.Data.DataColumn("DocCurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCurr)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnRef1 = New Global.System.Data.DataColumn("Ref1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef1)
            Me.columnRef2 = New Global.System.Data.DataColumn("Ref2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef2)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesStr = New Global.System.Data.DataColumn("SeriesStr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesStr)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnTransId = New Global.System.Data.DataColumn("TransId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransId)
            Me.columnTrsfrAcct = New Global.System.Data.DataColumn("TrsfrAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrAcct)
            Me.columnTrsfrDate = New Global.System.Data.DataColumn("TrsfrDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrDate)
            Me.columnTrsfrRef = New Global.System.Data.DataColumn("TrsfrRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrRef)
            Me.columnTrsfrSum = New Global.System.Data.DataColumn("TrsfrSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrSum)
            Me.columnTrsfrSumFC = New Global.System.Data.DataColumn("TrsfrSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrSumFC)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnDiffCurr = New Global.System.Data.DataColumn("DiffCurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiffCurr)
            Me.columnPrjCode = New Global.System.Data.DataColumn("PrjCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrjCode)
            Me.columnJrnlMemo = New Global.System.Data.DataColumn("JrnlMemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJrnlMemo)
            Me.columnContactPerson = New Global.System.Data.DataColumn("ContactPerson", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPerson)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOPDFRow() As OPDFRow
            Return CType(Me.NewRow,OPDFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OPDFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OPDFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OPDFRowChangedEvent) Is Nothing) Then
                RaiseEvent OPDFRowChanged(Me, New OPDFRowChangeEvent(CType(e.Row,OPDFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OPDFRowChangingEvent) Is Nothing) Then
                RaiseEvent OPDFRowChanging(Me, New OPDFRowChangeEvent(CType(e.Row,OPDFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OPDFRowDeletedEvent) Is Nothing) Then
                RaiseEvent OPDFRowDeleted(Me, New OPDFRowChangeEvent(CType(e.Row,OPDFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OPDFRowDeletingEvent) Is Nothing) Then
                RaiseEvent OPDFRowDeleting(Me, New OPDFRowChangeEvent(CType(e.Row,OPDFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOPDFRow(ByVal row As OPDFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OPDFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PDF1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAcctNum As Global.System.Data.DataColumn
        
        Private columnBankCode As Global.System.Data.DataColumn
        
        Private columnCheckNum As Global.System.Data.DataColumn
        
        Private columnCheckSum As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnDetais As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDueDate As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PDF1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BankCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBankCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetaisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetais
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PDF1Row
            Get
                Return CType(Me.Rows(index),PDF1Row)
            End Get
        End Property
        
        Public Event PDF1RowChanging As PDF1RowChangeEventHandler
        
        Public Event PDF1RowChanged As PDF1RowChangeEventHandler
        
        Public Event PDF1RowDeleting As PDF1RowChangeEventHandler
        
        Public Event PDF1RowDeleted As PDF1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPDF1Row(ByVal row As PDF1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPDF1Row(ByVal AcctNum As String, ByVal BankCode As String, ByVal CheckNum As Long, ByVal CheckSum As Decimal, ByVal Currency As String, ByVal Detais As String, ByVal DocNum As Long, ByVal DueDate As Date, ByVal LogInstanc As Integer) As PDF1Row
            Dim rowPDF1Row As PDF1Row = CType(Me.NewRow,PDF1Row)
            Dim columnValuesArray() As Object = New Object() {AcctNum, BankCode, CheckNum, CheckSum, Currency, Detais, DocNum, DueDate, LogInstanc}
            rowPDF1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPDF1Row)
            Return rowPDF1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PDF1DataTable = CType(MyBase.Clone,PDF1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PDF1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAcctNum = MyBase.Columns("AcctNum")
            Me.columnBankCode = MyBase.Columns("BankCode")
            Me.columnCheckNum = MyBase.Columns("CheckNum")
            Me.columnCheckSum = MyBase.Columns("CheckSum")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnDetais = MyBase.Columns("Detais")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDueDate = MyBase.Columns("DueDate")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAcctNum = New Global.System.Data.DataColumn("AcctNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctNum)
            Me.columnBankCode = New Global.System.Data.DataColumn("BankCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBankCode)
            Me.columnCheckNum = New Global.System.Data.DataColumn("CheckNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckNum)
            Me.columnCheckSum = New Global.System.Data.DataColumn("CheckSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckSum)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnDetais = New Global.System.Data.DataColumn("Detais", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetais)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDueDate = New Global.System.Data.DataColumn("DueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDueDate)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPDF1Row() As PDF1Row
            Return CType(Me.NewRow,PDF1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PDF1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PDF1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PDF1RowChangedEvent) Is Nothing) Then
                RaiseEvent PDF1RowChanged(Me, New PDF1RowChangeEvent(CType(e.Row,PDF1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PDF1RowChangingEvent) Is Nothing) Then
                RaiseEvent PDF1RowChanging(Me, New PDF1RowChangeEvent(CType(e.Row,PDF1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PDF1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PDF1RowDeleted(Me, New PDF1RowChangeEvent(CType(e.Row,PDF1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PDF1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PDF1RowDeleting(Me, New PDF1RowChangeEvent(CType(e.Row,PDF1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePDF1Row(ByVal row As PDF1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PDF1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PDF4DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAcctCode As Global.System.Data.DataColumn
        
        Private columnAcctName As Global.System.Data.DataColumn
        
        Private columnDesCrip As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnGrossAmnt As Global.System.Data.DataColumn
        
        Private columnGrssAmntFC As Global.System.Data.DataColumn
        
        Private columnVatAmnt As Global.System.Data.DataColumn
        
        Private columnVatAmntFC As Global.System.Data.DataColumn
        
        Private columnVatPrcnt As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnOcrCode As Global.System.Data.DataColumn
        
        Private columnOcrCode2 As Global.System.Data.DataColumn
        
        Private columnOcrCode3 As Global.System.Data.DataColumn
        
        Private columnOcrCode4 As Global.System.Data.DataColumn
        
        Private columnOcrCode5 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PDF4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesCripColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesCrip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrossAmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossAmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrssAmntFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrssAmntFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatAmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatAmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatAmntFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatAmntFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatPrcntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatPrcnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PDF4Row
            Get
                Return CType(Me.Rows(index),PDF4Row)
            End Get
        End Property
        
        Public Event PDF4RowChanging As PDF4RowChangeEventHandler
        
        Public Event PDF4RowChanged As PDF4RowChangeEventHandler
        
        Public Event PDF4RowDeleting As PDF4RowChangeEventHandler
        
        Public Event PDF4RowDeleted As PDF4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPDF4Row(ByVal row As PDF4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPDF4Row(ByVal AcctCode As String, ByVal AcctName As String, ByVal DesCrip As String, ByVal DocNum As Long, ByVal GrossAmnt As Decimal, ByVal GrssAmntFC As Decimal, ByVal VatAmnt As Decimal, ByVal VatAmntFC As Decimal, ByVal VatPrcnt As Decimal, ByVal LogInstanc As Integer, ByVal OcrCode As String, ByVal OcrCode2 As String, ByVal OcrCode3 As String, ByVal OcrCode4 As String, ByVal OcrCode5 As String) As PDF4Row
            Dim rowPDF4Row As PDF4Row = CType(Me.NewRow,PDF4Row)
            Dim columnValuesArray() As Object = New Object() {AcctCode, AcctName, DesCrip, DocNum, GrossAmnt, GrssAmntFC, VatAmnt, VatAmntFC, VatPrcnt, LogInstanc, OcrCode, OcrCode2, OcrCode3, OcrCode4, OcrCode5}
            rowPDF4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPDF4Row)
            Return rowPDF4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PDF4DataTable = CType(MyBase.Clone,PDF4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PDF4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAcctCode = MyBase.Columns("AcctCode")
            Me.columnAcctName = MyBase.Columns("AcctName")
            Me.columnDesCrip = MyBase.Columns("Descrip")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnGrossAmnt = MyBase.Columns("GrossAmnt")
            Me.columnGrssAmntFC = MyBase.Columns("GrssAmntFC")
            Me.columnVatAmnt = MyBase.Columns("VatAmnt")
            Me.columnVatAmntFC = MyBase.Columns("VatAmntFC")
            Me.columnVatPrcnt = MyBase.Columns("VatPrcnt")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnOcrCode = MyBase.Columns("OcrCode")
            Me.columnOcrCode2 = MyBase.Columns("OcrCode2")
            Me.columnOcrCode3 = MyBase.Columns("OcrCode3")
            Me.columnOcrCode4 = MyBase.Columns("OcrCode4")
            Me.columnOcrCode5 = MyBase.Columns("OcrCode5")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAcctCode = New Global.System.Data.DataColumn("AcctCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctCode)
            Me.columnAcctName = New Global.System.Data.DataColumn("AcctName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctName)
            Me.columnDesCrip = New Global.System.Data.DataColumn("Descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "DesCrip")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DesCripColumn")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDesCrip")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_UserColumnName", "Descrip")
            MyBase.Columns.Add(Me.columnDesCrip)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnGrossAmnt = New Global.System.Data.DataColumn("GrossAmnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossAmnt)
            Me.columnGrssAmntFC = New Global.System.Data.DataColumn("GrssAmntFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrssAmntFC)
            Me.columnVatAmnt = New Global.System.Data.DataColumn("VatAmnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatAmnt)
            Me.columnVatAmntFC = New Global.System.Data.DataColumn("VatAmntFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatAmntFC)
            Me.columnVatPrcnt = New Global.System.Data.DataColumn("VatPrcnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatPrcnt)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnOcrCode = New Global.System.Data.DataColumn("OcrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode)
            Me.columnOcrCode2 = New Global.System.Data.DataColumn("OcrCode2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode2)
            Me.columnOcrCode3 = New Global.System.Data.DataColumn("OcrCode3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode3)
            Me.columnOcrCode4 = New Global.System.Data.DataColumn("OcrCode4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode4)
            Me.columnOcrCode5 = New Global.System.Data.DataColumn("OcrCode5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode5)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPDF4Row() As PDF4Row
            Return CType(Me.NewRow,PDF4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PDF4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PDF4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PDF4RowChangedEvent) Is Nothing) Then
                RaiseEvent PDF4RowChanged(Me, New PDF4RowChangeEvent(CType(e.Row,PDF4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PDF4RowChangingEvent) Is Nothing) Then
                RaiseEvent PDF4RowChanging(Me, New PDF4RowChangeEvent(CType(e.Row,PDF4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PDF4RowDeletedEvent) Is Nothing) Then
                RaiseEvent PDF4RowDeleted(Me, New PDF4RowChangeEvent(CType(e.Row,PDF4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PDF4RowDeletingEvent) Is Nothing) Then
                RaiseEvent PDF4RowDeleting(Me, New PDF4RowChangeEvent(CType(e.Row,PDF4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePDF4Row(ByVal row As PDF4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PDF4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PDF2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAppliedFC As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocLine As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnInvoiceId As Global.System.Data.DataColumn
        
        Private columnInvType As Global.System.Data.DataColumn
        
        Private columnSumApplied As Global.System.Data.DataColumn
        
        Private columnvatApplied As Global.System.Data.DataColumn
        
        Private columnvatAppldFC As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PDF2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppliedFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppliedFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vatAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vatAppldFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatAppldFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PDF2Row
            Get
                Return CType(Me.Rows(index),PDF2Row)
            End Get
        End Property
        
        Public Event PDF2RowChanging As PDF2RowChangeEventHandler
        
        Public Event PDF2RowChanged As PDF2RowChangeEventHandler
        
        Public Event PDF2RowDeleting As PDF2RowChangeEventHandler
        
        Public Event PDF2RowDeleted As PDF2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPDF2Row(ByVal row As PDF2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPDF2Row(ByVal AppliedFC As Decimal, ByVal DocEntry As Long, ByVal DocLine As Integer, ByVal DocNum As Long, ByVal DocRate As Decimal, ByVal InvoiceId As Long, ByVal InvType As String, ByVal SumApplied As Decimal, ByVal vatApplied As Decimal, ByVal vatAppldFC As Decimal, ByVal LogInstanc As Integer) As PDF2Row
            Dim rowPDF2Row As PDF2Row = CType(Me.NewRow,PDF2Row)
            Dim columnValuesArray() As Object = New Object() {AppliedFC, DocEntry, DocLine, DocNum, DocRate, InvoiceId, InvType, SumApplied, vatApplied, vatAppldFC, LogInstanc}
            rowPDF2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPDF2Row)
            Return rowPDF2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PDF2DataTable = CType(MyBase.Clone,PDF2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PDF2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAppliedFC = MyBase.Columns("AppliedFC")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocLine = MyBase.Columns("DocLine")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnInvoiceId = MyBase.Columns("InvoiceId")
            Me.columnInvType = MyBase.Columns("InvType")
            Me.columnSumApplied = MyBase.Columns("SumApplied")
            Me.columnvatApplied = MyBase.Columns("vatApplied")
            Me.columnvatAppldFC = MyBase.Columns("vatAppldFC")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAppliedFC = New Global.System.Data.DataColumn("AppliedFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppliedFC)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocLine = New Global.System.Data.DataColumn("DocLine", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocLine)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnInvoiceId = New Global.System.Data.DataColumn("InvoiceId", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceId)
            Me.columnInvType = New Global.System.Data.DataColumn("InvType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvType)
            Me.columnSumApplied = New Global.System.Data.DataColumn("SumApplied", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumApplied)
            Me.columnvatApplied = New Global.System.Data.DataColumn("vatApplied", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatApplied)
            Me.columnvatAppldFC = New Global.System.Data.DataColumn("vatAppldFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatAppldFC)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPDF2Row() As PDF2Row
            Return CType(Me.NewRow,PDF2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PDF2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PDF2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PDF2RowChangedEvent) Is Nothing) Then
                RaiseEvent PDF2RowChanged(Me, New PDF2RowChangeEvent(CType(e.Row,PDF2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PDF2RowChangingEvent) Is Nothing) Then
                RaiseEvent PDF2RowChanging(Me, New PDF2RowChangeEvent(CType(e.Row,PDF2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PDF2RowDeletedEvent) Is Nothing) Then
                RaiseEvent PDF2RowDeleted(Me, New PDF2RowChangeEvent(CType(e.Row,PDF2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PDF2RowDeletingEvent) Is Nothing) Then
                RaiseEvent PDF2RowDeleting(Me, New PDF2RowChangeEvent(CType(e.Row,PDF2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePDF2Row(ByVal row As PDF2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PDF2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PDF3DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCreditAcct As Global.System.Data.DataColumn
        
        Private columnCreditCard As Global.System.Data.DataColumn
        
        Private columnCreditCur As Global.System.Data.DataColumn
        
        Private columnCreditRate As Global.System.Data.DataColumn
        
        Private columnCreditSum As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnFirstDue As Global.System.Data.DataColumn
        
        Private columnFirstSum As Global.System.Data.DataColumn
        
        Private columnVoucherNum As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PDF3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstDueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstDue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PDF3Row
            Get
                Return CType(Me.Rows(index),PDF3Row)
            End Get
        End Property
        
        Public Event PDF3RowChanging As PDF3RowChangeEventHandler
        
        Public Event PDF3RowChanged As PDF3RowChangeEventHandler
        
        Public Event PDF3RowDeleting As PDF3RowChangeEventHandler
        
        Public Event PDF3RowDeleted As PDF3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPDF3Row(ByVal row As PDF3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPDF3Row(ByVal CreditAcct As String, ByVal CreditCard As Integer, ByVal CreditCur As String, ByVal CreditRate As Decimal, ByVal CreditSum As Decimal, ByVal DocNum As Long, ByVal FirstDue As Date, ByVal FirstSum As Decimal, ByVal VoucherNum As String, ByVal LogInstanc As Integer) As PDF3Row
            Dim rowPDF3Row As PDF3Row = CType(Me.NewRow,PDF3Row)
            Dim columnValuesArray() As Object = New Object() {CreditAcct, CreditCard, CreditCur, CreditRate, CreditSum, DocNum, FirstDue, FirstSum, VoucherNum, LogInstanc}
            rowPDF3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPDF3Row)
            Return rowPDF3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PDF3DataTable = CType(MyBase.Clone,PDF3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PDF3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCreditAcct = MyBase.Columns("CreditAcct")
            Me.columnCreditCard = MyBase.Columns("CreditCard")
            Me.columnCreditCur = MyBase.Columns("CreditCur")
            Me.columnCreditRate = MyBase.Columns("CreditRate")
            Me.columnCreditSum = MyBase.Columns("CreditSum")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnFirstDue = MyBase.Columns("FirstDue")
            Me.columnFirstSum = MyBase.Columns("FirstSum")
            Me.columnVoucherNum = MyBase.Columns("VoucherNum")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCreditAcct = New Global.System.Data.DataColumn("CreditAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditAcct)
            Me.columnCreditCard = New Global.System.Data.DataColumn("CreditCard", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditCard)
            Me.columnCreditCur = New Global.System.Data.DataColumn("CreditCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditCur)
            Me.columnCreditRate = New Global.System.Data.DataColumn("CreditRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditRate)
            Me.columnCreditSum = New Global.System.Data.DataColumn("CreditSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditSum)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnFirstDue = New Global.System.Data.DataColumn("FirstDue", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstDue)
            Me.columnFirstSum = New Global.System.Data.DataColumn("FirstSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstSum)
            Me.columnVoucherNum = New Global.System.Data.DataColumn("VoucherNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherNum)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPDF3Row() As PDF3Row
            Return CType(Me.NewRow,PDF3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PDF3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PDF3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PDF3RowChangedEvent) Is Nothing) Then
                RaiseEvent PDF3RowChanged(Me, New PDF3RowChangeEvent(CType(e.Row,PDF3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PDF3RowChangingEvent) Is Nothing) Then
                RaiseEvent PDF3RowChanging(Me, New PDF3RowChangeEvent(CType(e.Row,PDF3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PDF3RowDeletedEvent) Is Nothing) Then
                RaiseEvent PDF3RowDeleted(Me, New PDF3RowChangeEvent(CType(e.Row,PDF3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PDF3RowDeletingEvent) Is Nothing) Then
                RaiseEvent PDF3RowDeleting(Me, New PDF3RowChangeEvent(CType(e.Row,PDF3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePDF3Row(ByVal row As PDF3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PDF3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NCM_VIEW_DRAFTPV_INVOICEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPaymentDocType As Global.System.Data.DataColumn
        
        Private columnPaymentDocEntry As Global.System.Data.DataColumn
        
        Private columnPaymentDocNum As Global.System.Data.DataColumn
        
        Private columnInvType As Global.System.Data.DataColumn
        
        Private columnInvoiceId As Global.System.Data.DataColumn
        
        Private columnSumApplied As Global.System.Data.DataColumn
        
        Private columnAppliedFC As Global.System.Data.DataColumn
        
        Private columnPaymentDocRate As Global.System.Data.DataColumn
        
        Private columnPaymentObjType As Global.System.Data.DataColumn
        
        Private columnvatApplied As Global.System.Data.DataColumn
        
        Private columnvatAppldFC As Global.System.Data.DataColumn
        
        Private columnVisOrder As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDscription As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnLineTotal As Global.System.Data.DataColumn
        
        Private columnTotalFrgn As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocCur As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnNumAtCard As Global.System.Data.DataColumn
        
        Private columnObjType As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnVatSum As Global.System.Data.DataColumn
        
        Private columnVatSumFC As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_VIEW_DRAFTPV_INVOICE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentDocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentDocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentDocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppliedFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppliedFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentDocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vatAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vatAppldFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatAppldFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DscriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDscription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalFrgnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalFrgn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAtCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAtCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NCM_VIEW_DRAFTPV_INVOICERow
            Get
                Return CType(Me.Rows(index),NCM_VIEW_DRAFTPV_INVOICERow)
            End Get
        End Property
        
        Public Event NCM_VIEW_DRAFTPV_INVOICERowChanging As NCM_VIEW_DRAFTPV_INVOICERowChangeEventHandler
        
        Public Event NCM_VIEW_DRAFTPV_INVOICERowChanged As NCM_VIEW_DRAFTPV_INVOICERowChangeEventHandler
        
        Public Event NCM_VIEW_DRAFTPV_INVOICERowDeleting As NCM_VIEW_DRAFTPV_INVOICERowChangeEventHandler
        
        Public Event NCM_VIEW_DRAFTPV_INVOICERowDeleted As NCM_VIEW_DRAFTPV_INVOICERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNCM_VIEW_DRAFTPV_INVOICERow(ByVal row As NCM_VIEW_DRAFTPV_INVOICERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNCM_VIEW_DRAFTPV_INVOICERow( _
                    ByVal PaymentDocType As String,  _
                    ByVal PaymentDocEntry As Long,  _
                    ByVal PaymentDocNum As Long,  _
                    ByVal InvType As String,  _
                    ByVal InvoiceId As Long,  _
                    ByVal SumApplied As Decimal,  _
                    ByVal AppliedFC As Decimal,  _
                    ByVal PaymentDocRate As Decimal,  _
                    ByVal PaymentObjType As String,  _
                    ByVal vatApplied As Decimal,  _
                    ByVal vatAppldFC As Decimal,  _
                    ByVal VisOrder As Integer,  _
                    ByVal ItemCode As String,  _
                    ByVal Dscription As String,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Price As Decimal,  _
                    ByVal LineTotal As Decimal,  _
                    ByVal TotalFrgn As Decimal,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocCur As String,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal NumAtCard As String,  _
                    ByVal ObjType As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal VatSum As Decimal,  _
                    ByVal VatSumFC As Decimal,  _
                    ByVal SeriesName As String) As NCM_VIEW_DRAFTPV_INVOICERow
            Dim rowNCM_VIEW_DRAFTPV_INVOICERow As NCM_VIEW_DRAFTPV_INVOICERow = CType(Me.NewRow,NCM_VIEW_DRAFTPV_INVOICERow)
            Dim columnValuesArray() As Object = New Object() {PaymentDocType, PaymentDocEntry, PaymentDocNum, InvType, InvoiceId, SumApplied, AppliedFC, PaymentDocRate, PaymentObjType, vatApplied, vatAppldFC, VisOrder, ItemCode, Dscription, Quantity, Price, LineTotal, TotalFrgn, DocEntry, DocNum, DocDate, DocDueDate, DocRate, DocCur, DocTotal, DocTotalFC, DocType, NumAtCard, ObjType, TaxDate, VatSum, VatSumFC, SeriesName}
            rowNCM_VIEW_DRAFTPV_INVOICERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNCM_VIEW_DRAFTPV_INVOICERow)
            Return rowNCM_VIEW_DRAFTPV_INVOICERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NCM_VIEW_DRAFTPV_INVOICEDataTable = CType(MyBase.Clone,NCM_VIEW_DRAFTPV_INVOICEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NCM_VIEW_DRAFTPV_INVOICEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPaymentDocType = MyBase.Columns("PaymentDocType")
            Me.columnPaymentDocEntry = MyBase.Columns("PaymentDocEntry")
            Me.columnPaymentDocNum = MyBase.Columns("PaymentDocNum")
            Me.columnInvType = MyBase.Columns("InvType")
            Me.columnInvoiceId = MyBase.Columns("InvoiceId")
            Me.columnSumApplied = MyBase.Columns("SumApplied")
            Me.columnAppliedFC = MyBase.Columns("AppliedFC")
            Me.columnPaymentDocRate = MyBase.Columns("PaymentDocRate")
            Me.columnPaymentObjType = MyBase.Columns("PaymentObjType")
            Me.columnvatApplied = MyBase.Columns("vatApplied")
            Me.columnvatAppldFC = MyBase.Columns("vatAppldFC")
            Me.columnVisOrder = MyBase.Columns("VisOrder")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDscription = MyBase.Columns("Dscription")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnLineTotal = MyBase.Columns("LineTotal")
            Me.columnTotalFrgn = MyBase.Columns("TotalFrgn")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocCur = MyBase.Columns("DocCur")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnNumAtCard = MyBase.Columns("NumAtCard")
            Me.columnObjType = MyBase.Columns("ObjType")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnVatSum = MyBase.Columns("VatSum")
            Me.columnVatSumFC = MyBase.Columns("VatSumFC")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPaymentDocType = New Global.System.Data.DataColumn("PaymentDocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentDocType)
            Me.columnPaymentDocEntry = New Global.System.Data.DataColumn("PaymentDocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentDocEntry)
            Me.columnPaymentDocNum = New Global.System.Data.DataColumn("PaymentDocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentDocNum)
            Me.columnInvType = New Global.System.Data.DataColumn("InvType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvType)
            Me.columnInvoiceId = New Global.System.Data.DataColumn("InvoiceId", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceId)
            Me.columnSumApplied = New Global.System.Data.DataColumn("SumApplied", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumApplied)
            Me.columnAppliedFC = New Global.System.Data.DataColumn("AppliedFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppliedFC)
            Me.columnPaymentDocRate = New Global.System.Data.DataColumn("PaymentDocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentDocRate)
            Me.columnPaymentObjType = New Global.System.Data.DataColumn("PaymentObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentObjType)
            Me.columnvatApplied = New Global.System.Data.DataColumn("vatApplied", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatApplied)
            Me.columnvatAppldFC = New Global.System.Data.DataColumn("vatAppldFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatAppldFC)
            Me.columnVisOrder = New Global.System.Data.DataColumn("VisOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisOrder)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDscription = New Global.System.Data.DataColumn("Dscription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDscription)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnLineTotal = New Global.System.Data.DataColumn("LineTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineTotal)
            Me.columnTotalFrgn = New Global.System.Data.DataColumn("TotalFrgn", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalFrgn)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocCur = New Global.System.Data.DataColumn("DocCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCur)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnNumAtCard = New Global.System.Data.DataColumn("NumAtCard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAtCard)
            Me.columnObjType = New Global.System.Data.DataColumn("ObjType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjType)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnVatSum = New Global.System.Data.DataColumn("VatSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSum)
            Me.columnVatSumFC = New Global.System.Data.DataColumn("VatSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatSumFC)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNCM_VIEW_DRAFTPV_INVOICERow() As NCM_VIEW_DRAFTPV_INVOICERow
            Return CType(Me.NewRow,NCM_VIEW_DRAFTPV_INVOICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NCM_VIEW_DRAFTPV_INVOICERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NCM_VIEW_DRAFTPV_INVOICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NCM_VIEW_DRAFTPV_INVOICERowChangedEvent) Is Nothing) Then
                RaiseEvent NCM_VIEW_DRAFTPV_INVOICERowChanged(Me, New NCM_VIEW_DRAFTPV_INVOICERowChangeEvent(CType(e.Row,NCM_VIEW_DRAFTPV_INVOICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NCM_VIEW_DRAFTPV_INVOICERowChangingEvent) Is Nothing) Then
                RaiseEvent NCM_VIEW_DRAFTPV_INVOICERowChanging(Me, New NCM_VIEW_DRAFTPV_INVOICERowChangeEvent(CType(e.Row,NCM_VIEW_DRAFTPV_INVOICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NCM_VIEW_DRAFTPV_INVOICERowDeletedEvent) Is Nothing) Then
                RaiseEvent NCM_VIEW_DRAFTPV_INVOICERowDeleted(Me, New NCM_VIEW_DRAFTPV_INVOICERowChangeEvent(CType(e.Row,NCM_VIEW_DRAFTPV_INVOICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NCM_VIEW_DRAFTPV_INVOICERowDeletingEvent) Is Nothing) Then
                RaiseEvent NCM_VIEW_DRAFTPV_INVOICERowDeleting(Me, New NCM_VIEW_DRAFTPV_INVOICERowChangeEvent(CType(e.Row,NCM_VIEW_DRAFTPV_INVOICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNCM_VIEW_DRAFTPV_INVOICERow(ByVal row As NCM_VIEW_DRAFTPV_INVOICERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NCM_VIEW_DRAFTPV_INVOICEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORCTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnBcgSum As Global.System.Data.DataColumn
        
        Private columnBcgSumFC As Global.System.Data.DataColumn
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnCardName As Global.System.Data.DataColumn
        
        Private columnCashAcct As Global.System.Data.DataColumn
        
        Private columnCashSum As Global.System.Data.DataColumn
        
        Private columnCashSumFC As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCounterRef As Global.System.Data.DataColumn
        
        Private columnDocCurr As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnDocDueDate As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnDocTotal As Global.System.Data.DataColumn
        
        Private columnDocTotalFC As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnRef1 As Global.System.Data.DataColumn
        
        Private columnRef2 As Global.System.Data.DataColumn
        
        Private columnSeries As Global.System.Data.DataColumn
        
        Private columnSeriesStr As Global.System.Data.DataColumn
        
        Private columnTaxDate As Global.System.Data.DataColumn
        
        Private columnTransId As Global.System.Data.DataColumn
        
        Private columnTrsfrAcct As Global.System.Data.DataColumn
        
        Private columnTrsfrDate As Global.System.Data.DataColumn
        
        Private columnTrsfrRef As Global.System.Data.DataColumn
        
        Private columnTrsfrSum As Global.System.Data.DataColumn
        
        Private columnTrsfrSumFC As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnUserSign As Global.System.Data.DataColumn
        
        Private columnPayToCode As Global.System.Data.DataColumn
        
        Private columnNoDocSum As Global.System.Data.DataColumn
        
        Private columnNoDocSumFC As Global.System.Data.DataColumn
        
        Private columnPrjCode As Global.System.Data.DataColumn
        
        Private columnJrnlMemo As Global.System.Data.DataColumn
        
        Private columnContactPerson As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORCT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BcgSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBcgSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BcgSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBcgSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocCurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocCurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTotalFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTotalFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesStrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesStr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrsfrSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrsfrSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserSignColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserSign
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayToCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayToCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoDocSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoDocSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoDocSumFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoDocSumFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrjCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrjCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JrnlMemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJrnlMemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPerson
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORCTRow
            Get
                Return CType(Me.Rows(index),ORCTRow)
            End Get
        End Property
        
        Public Event ORCTRowChanging As ORCTRowChangeEventHandler
        
        Public Event ORCTRowChanged As ORCTRowChangeEventHandler
        
        Public Event ORCTRowDeleting As ORCTRowChangeEventHandler
        
        Public Event ORCTRowDeleted As ORCTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORCTRow(ByVal row As ORCTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORCTRow( _
                    ByVal Address As String,  _
                    ByVal BcgSum As Decimal,  _
                    ByVal BcgSumFC As Decimal,  _
                    ByVal CardCode As String,  _
                    ByVal CardName As String,  _
                    ByVal CashAcct As String,  _
                    ByVal CashSum As Decimal,  _
                    ByVal CashSumFC As Decimal,  _
                    ByVal Comments As String,  _
                    ByVal CounterRef As String,  _
                    ByVal DocCurr As String,  _
                    ByVal DocDate As Date,  _
                    ByVal DocDueDate As Date,  _
                    ByVal DocEntry As Long,  _
                    ByVal DocNum As Long,  _
                    ByVal DocRate As Decimal,  _
                    ByVal DocTotal As Decimal,  _
                    ByVal DocTotalFC As Decimal,  _
                    ByVal DocType As String,  _
                    ByVal Ref1 As String,  _
                    ByVal Ref2 As String,  _
                    ByVal Series As Integer,  _
                    ByVal SeriesStr As String,  _
                    ByVal TaxDate As Date,  _
                    ByVal TransId As Integer,  _
                    ByVal TrsfrAcct As String,  _
                    ByVal TrsfrDate As Date,  _
                    ByVal TrsfrRef As String,  _
                    ByVal TrsfrSum As Decimal,  _
                    ByVal TrsfrSumFC As Decimal,  _
                    ByVal LogInstanc As Integer,  _
                    ByVal UserSign As Integer,  _
                    ByVal PayToCode As String,  _
                    ByVal NoDocSum As Decimal,  _
                    ByVal NoDocSumFC As Decimal,  _
                    ByVal PrjCode As String,  _
                    ByVal JrnlMemo As String,  _
                    ByVal ContactPerson As String) As ORCTRow
            Dim rowORCTRow As ORCTRow = CType(Me.NewRow,ORCTRow)
            Dim columnValuesArray() As Object = New Object() {Address, BcgSum, BcgSumFC, CardCode, CardName, CashAcct, CashSum, CashSumFC, Comments, CounterRef, DocCurr, DocDate, DocDueDate, DocEntry, DocNum, DocRate, DocTotal, DocTotalFC, DocType, Ref1, Ref2, Series, SeriesStr, TaxDate, TransId, TrsfrAcct, TrsfrDate, TrsfrRef, TrsfrSum, TrsfrSumFC, LogInstanc, UserSign, PayToCode, NoDocSum, NoDocSumFC, PrjCode, JrnlMemo, ContactPerson}
            rowORCTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORCTRow)
            Return rowORCTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORCTDataTable = CType(MyBase.Clone,ORCTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORCTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnBcgSum = MyBase.Columns("BcgSum")
            Me.columnBcgSumFC = MyBase.Columns("BcgSumFC")
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnCardName = MyBase.Columns("CardName")
            Me.columnCashAcct = MyBase.Columns("CashAcct")
            Me.columnCashSum = MyBase.Columns("CashSum")
            Me.columnCashSumFC = MyBase.Columns("CashSumFC")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCounterRef = MyBase.Columns("CounterRef")
            Me.columnDocCurr = MyBase.Columns("DocCurr")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnDocDueDate = MyBase.Columns("DocDueDate")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnDocTotal = MyBase.Columns("DocTotal")
            Me.columnDocTotalFC = MyBase.Columns("DocTotalFC")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnRef1 = MyBase.Columns("Ref1")
            Me.columnRef2 = MyBase.Columns("Ref2")
            Me.columnSeries = MyBase.Columns("Series")
            Me.columnSeriesStr = MyBase.Columns("SeriesStr")
            Me.columnTaxDate = MyBase.Columns("TaxDate")
            Me.columnTransId = MyBase.Columns("TransId")
            Me.columnTrsfrAcct = MyBase.Columns("TrsfrAcct")
            Me.columnTrsfrDate = MyBase.Columns("TrsfrDate")
            Me.columnTrsfrRef = MyBase.Columns("TrsfrRef")
            Me.columnTrsfrSum = MyBase.Columns("TrsfrSum")
            Me.columnTrsfrSumFC = MyBase.Columns("TrsfrSumFC")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnUserSign = MyBase.Columns("UserSign")
            Me.columnPayToCode = MyBase.Columns("PayToCode")
            Me.columnNoDocSum = MyBase.Columns("NoDocSum")
            Me.columnNoDocSumFC = MyBase.Columns("NoDocSumFC")
            Me.columnPrjCode = MyBase.Columns("PrjCode")
            Me.columnJrnlMemo = MyBase.Columns("JrnlMemo")
            Me.columnContactPerson = MyBase.Columns("ContactPerson")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnBcgSum = New Global.System.Data.DataColumn("BcgSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBcgSum)
            Me.columnBcgSumFC = New Global.System.Data.DataColumn("BcgSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBcgSumFC)
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnCardName = New Global.System.Data.DataColumn("CardName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardName)
            Me.columnCashAcct = New Global.System.Data.DataColumn("CashAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashAcct)
            Me.columnCashSum = New Global.System.Data.DataColumn("CashSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashSum)
            Me.columnCashSumFC = New Global.System.Data.DataColumn("CashSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashSumFC)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCounterRef = New Global.System.Data.DataColumn("CounterRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterRef)
            Me.columnDocCurr = New Global.System.Data.DataColumn("DocCurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocCurr)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnDocDueDate = New Global.System.Data.DataColumn("DocDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDueDate)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnDocTotal = New Global.System.Data.DataColumn("DocTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotal)
            Me.columnDocTotalFC = New Global.System.Data.DataColumn("DocTotalFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTotalFC)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnRef1 = New Global.System.Data.DataColumn("Ref1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef1)
            Me.columnRef2 = New Global.System.Data.DataColumn("Ref2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef2)
            Me.columnSeries = New Global.System.Data.DataColumn("Series", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeries)
            Me.columnSeriesStr = New Global.System.Data.DataColumn("SeriesStr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesStr)
            Me.columnTaxDate = New Global.System.Data.DataColumn("TaxDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxDate)
            Me.columnTransId = New Global.System.Data.DataColumn("TransId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransId)
            Me.columnTrsfrAcct = New Global.System.Data.DataColumn("TrsfrAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrAcct)
            Me.columnTrsfrDate = New Global.System.Data.DataColumn("TrsfrDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrDate)
            Me.columnTrsfrRef = New Global.System.Data.DataColumn("TrsfrRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrRef)
            Me.columnTrsfrSum = New Global.System.Data.DataColumn("TrsfrSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrSum)
            Me.columnTrsfrSumFC = New Global.System.Data.DataColumn("TrsfrSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrsfrSumFC)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnUserSign = New Global.System.Data.DataColumn("UserSign", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserSign)
            Me.columnPayToCode = New Global.System.Data.DataColumn("PayToCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayToCode)
            Me.columnNoDocSum = New Global.System.Data.DataColumn("NoDocSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoDocSum)
            Me.columnNoDocSumFC = New Global.System.Data.DataColumn("NoDocSumFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoDocSumFC)
            Me.columnPrjCode = New Global.System.Data.DataColumn("PrjCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrjCode)
            Me.columnJrnlMemo = New Global.System.Data.DataColumn("JrnlMemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJrnlMemo)
            Me.columnContactPerson = New Global.System.Data.DataColumn("ContactPerson", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPerson)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORCTRow() As ORCTRow
            Return CType(Me.NewRow,ORCTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORCTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORCTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORCTRowChangedEvent) Is Nothing) Then
                RaiseEvent ORCTRowChanged(Me, New ORCTRowChangeEvent(CType(e.Row,ORCTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORCTRowChangingEvent) Is Nothing) Then
                RaiseEvent ORCTRowChanging(Me, New ORCTRowChangeEvent(CType(e.Row,ORCTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORCTRowDeletedEvent) Is Nothing) Then
                RaiseEvent ORCTRowDeleted(Me, New ORCTRowChangeEvent(CType(e.Row,ORCTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORCTRowDeletingEvent) Is Nothing) Then
                RaiseEvent ORCTRowDeleting(Me, New ORCTRowChangeEvent(CType(e.Row,ORCTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORCTRow(ByVal row As ORCTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORCTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OUSRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnINTERNAL_K As Global.System.Data.DataColumn
        
        Private columnU_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OUSR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTERNAL_KColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTERNAL_K
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OUSRRow
            Get
                Return CType(Me.Rows(index),OUSRRow)
            End Get
        End Property
        
        Public Event OUSRRowChanging As OUSRRowChangeEventHandler
        
        Public Event OUSRRowChanged As OUSRRowChangeEventHandler
        
        Public Event OUSRRowDeleting As OUSRRowChangeEventHandler
        
        Public Event OUSRRowDeleted As OUSRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOUSRRow(ByVal row As OUSRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOUSRRow(ByVal INTERNAL_K As Integer, ByVal U_NAME As String) As OUSRRow
            Dim rowOUSRRow As OUSRRow = CType(Me.NewRow,OUSRRow)
            Dim columnValuesArray() As Object = New Object() {INTERNAL_K, U_NAME}
            rowOUSRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOUSRRow)
            Return rowOUSRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OUSRDataTable = CType(MyBase.Clone,OUSRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OUSRDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINTERNAL_K = MyBase.Columns("INTERNAL_K")
            Me.columnU_NAME = MyBase.Columns("U_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINTERNAL_K = New Global.System.Data.DataColumn("INTERNAL_K", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTERNAL_K)
            Me.columnU_NAME = New Global.System.Data.DataColumn("U_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_NAME)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOUSRRow() As OUSRRow
            Return CType(Me.NewRow,OUSRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OUSRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OUSRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OUSRRowChangedEvent) Is Nothing) Then
                RaiseEvent OUSRRowChanged(Me, New OUSRRowChangeEvent(CType(e.Row,OUSRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OUSRRowChangingEvent) Is Nothing) Then
                RaiseEvent OUSRRowChanging(Me, New OUSRRowChangeEvent(CType(e.Row,OUSRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OUSRRowDeletedEvent) Is Nothing) Then
                RaiseEvent OUSRRowDeleted(Me, New OUSRRowChangeEvent(CType(e.Row,OUSRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OUSRRowDeletingEvent) Is Nothing) Then
                RaiseEvent OUSRRowDeleting(Me, New OUSRRowChangeEvent(CType(e.Row,OUSRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOUSRRow(ByVal row As OUSRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OUSRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RCT2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAppliedFC As Global.System.Data.DataColumn
        
        Private columnDocEntry As Global.System.Data.DataColumn
        
        Private columnDocLine As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocRate As Global.System.Data.DataColumn
        
        Private columnInvoiceId As Global.System.Data.DataColumn
        
        Private columnInvType As Global.System.Data.DataColumn
        
        Private columnSumApplied As Global.System.Data.DataColumn
        
        Private columnvatApplied As Global.System.Data.DataColumn
        
        Private columnvatAppldFC As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RCT2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppliedFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppliedFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vatAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vatAppldFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatAppldFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RCT2Row
            Get
                Return CType(Me.Rows(index),RCT2Row)
            End Get
        End Property
        
        Public Event RCT2RowChanging As RCT2RowChangeEventHandler
        
        Public Event RCT2RowChanged As RCT2RowChangeEventHandler
        
        Public Event RCT2RowDeleting As RCT2RowChangeEventHandler
        
        Public Event RCT2RowDeleted As RCT2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRCT2Row(ByVal row As RCT2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRCT2Row(ByVal AppliedFC As Decimal, ByVal DocEntry As Long, ByVal DocLine As Integer, ByVal DocNum As Long, ByVal DocRate As Decimal, ByVal InvoiceId As Long, ByVal InvType As String, ByVal SumApplied As Decimal, ByVal vatApplied As Decimal, ByVal vatAppldFC As Decimal, ByVal LogInstanc As Integer) As RCT2Row
            Dim rowRCT2Row As RCT2Row = CType(Me.NewRow,RCT2Row)
            Dim columnValuesArray() As Object = New Object() {AppliedFC, DocEntry, DocLine, DocNum, DocRate, InvoiceId, InvType, SumApplied, vatApplied, vatAppldFC, LogInstanc}
            rowRCT2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowRCT2Row)
            Return rowRCT2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RCT2DataTable = CType(MyBase.Clone,RCT2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RCT2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAppliedFC = MyBase.Columns("AppliedFC")
            Me.columnDocEntry = MyBase.Columns("DocEntry")
            Me.columnDocLine = MyBase.Columns("DocLine")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocRate = MyBase.Columns("DocRate")
            Me.columnInvoiceId = MyBase.Columns("InvoiceId")
            Me.columnInvType = MyBase.Columns("InvType")
            Me.columnSumApplied = MyBase.Columns("SumApplied")
            Me.columnvatApplied = MyBase.Columns("vatApplied")
            Me.columnvatAppldFC = MyBase.Columns("vatAppldFC")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAppliedFC = New Global.System.Data.DataColumn("AppliedFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppliedFC)
            Me.columnDocEntry = New Global.System.Data.DataColumn("DocEntry", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocEntry)
            Me.columnDocLine = New Global.System.Data.DataColumn("DocLine", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocLine)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocRate = New Global.System.Data.DataColumn("DocRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocRate)
            Me.columnInvoiceId = New Global.System.Data.DataColumn("InvoiceId", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceId)
            Me.columnInvType = New Global.System.Data.DataColumn("InvType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvType)
            Me.columnSumApplied = New Global.System.Data.DataColumn("SumApplied", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumApplied)
            Me.columnvatApplied = New Global.System.Data.DataColumn("vatApplied", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatApplied)
            Me.columnvatAppldFC = New Global.System.Data.DataColumn("vatAppldFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatAppldFC)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRCT2Row() As RCT2Row
            Return CType(Me.NewRow,RCT2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RCT2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RCT2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RCT2RowChangedEvent) Is Nothing) Then
                RaiseEvent RCT2RowChanged(Me, New RCT2RowChangeEvent(CType(e.Row,RCT2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RCT2RowChangingEvent) Is Nothing) Then
                RaiseEvent RCT2RowChanging(Me, New RCT2RowChangeEvent(CType(e.Row,RCT2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RCT2RowDeletedEvent) Is Nothing) Then
                RaiseEvent RCT2RowDeleted(Me, New RCT2RowChangeEvent(CType(e.Row,RCT2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RCT2RowDeletingEvent) Is Nothing) Then
                RaiseEvent RCT2RowDeleting(Me, New RCT2RowChangeEvent(CType(e.Row,RCT2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRCT2Row(ByVal row As RCT2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RCT2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RCT3DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCreditAcct As Global.System.Data.DataColumn
        
        Private columnCreditCard As Global.System.Data.DataColumn
        
        Private columnCreditCur As Global.System.Data.DataColumn
        
        Private columnCreditRate As Global.System.Data.DataColumn
        
        Private columnCreditSum As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnFirstDue As Global.System.Data.DataColumn
        
        Private columnFirstSum As Global.System.Data.DataColumn
        
        Private columnVoucherNum As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RCT3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditAcctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditAcct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditCardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditCard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstDueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstDue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RCT3Row
            Get
                Return CType(Me.Rows(index),RCT3Row)
            End Get
        End Property
        
        Public Event RCT3RowChanging As RCT3RowChangeEventHandler
        
        Public Event RCT3RowChanged As RCT3RowChangeEventHandler
        
        Public Event RCT3RowDeleting As RCT3RowChangeEventHandler
        
        Public Event RCT3RowDeleted As RCT3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRCT3Row(ByVal row As RCT3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRCT3Row(ByVal CreditAcct As String, ByVal CreditCard As Integer, ByVal CreditCur As String, ByVal CreditRate As Decimal, ByVal CreditSum As Decimal, ByVal DocNum As Long, ByVal FirstDue As Date, ByVal FirstSum As Decimal, ByVal VoucherNum As String, ByVal LogInstanc As Integer) As RCT3Row
            Dim rowRCT3Row As RCT3Row = CType(Me.NewRow,RCT3Row)
            Dim columnValuesArray() As Object = New Object() {CreditAcct, CreditCard, CreditCur, CreditRate, CreditSum, DocNum, FirstDue, FirstSum, VoucherNum, LogInstanc}
            rowRCT3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowRCT3Row)
            Return rowRCT3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RCT3DataTable = CType(MyBase.Clone,RCT3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RCT3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCreditAcct = MyBase.Columns("CreditAcct")
            Me.columnCreditCard = MyBase.Columns("CreditCard")
            Me.columnCreditCur = MyBase.Columns("CreditCur")
            Me.columnCreditRate = MyBase.Columns("CreditRate")
            Me.columnCreditSum = MyBase.Columns("CreditSum")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnFirstDue = MyBase.Columns("FirstDue")
            Me.columnFirstSum = MyBase.Columns("FirstSum")
            Me.columnVoucherNum = MyBase.Columns("VoucherNum")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCreditAcct = New Global.System.Data.DataColumn("CreditAcct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditAcct)
            Me.columnCreditCard = New Global.System.Data.DataColumn("CreditCard", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditCard)
            Me.columnCreditCur = New Global.System.Data.DataColumn("CreditCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditCur)
            Me.columnCreditRate = New Global.System.Data.DataColumn("CreditRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditRate)
            Me.columnCreditSum = New Global.System.Data.DataColumn("CreditSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditSum)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnFirstDue = New Global.System.Data.DataColumn("FirstDue", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstDue)
            Me.columnFirstSum = New Global.System.Data.DataColumn("FirstSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstSum)
            Me.columnVoucherNum = New Global.System.Data.DataColumn("VoucherNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherNum)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRCT3Row() As RCT3Row
            Return CType(Me.NewRow,RCT3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RCT3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RCT3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RCT3RowChangedEvent) Is Nothing) Then
                RaiseEvent RCT3RowChanged(Me, New RCT3RowChangeEvent(CType(e.Row,RCT3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RCT3RowChangingEvent) Is Nothing) Then
                RaiseEvent RCT3RowChanging(Me, New RCT3RowChangeEvent(CType(e.Row,RCT3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RCT3RowDeletedEvent) Is Nothing) Then
                RaiseEvent RCT3RowDeleted(Me, New RCT3RowChangeEvent(CType(e.Row,RCT3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RCT3RowDeletingEvent) Is Nothing) Then
                RaiseEvent RCT3RowDeleting(Me, New RCT3RowChangeEvent(CType(e.Row,RCT3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRCT3Row(ByVal row As RCT3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RCT3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RCT4DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAcctCode As Global.System.Data.DataColumn
        
        Private columnAcctName As Global.System.Data.DataColumn
        
        Private columnDesCrip As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnGrossAmnt As Global.System.Data.DataColumn
        
        Private columnGrssAmntFC As Global.System.Data.DataColumn
        
        Private columnVatAmnt As Global.System.Data.DataColumn
        
        Private columnVatAmntFC As Global.System.Data.DataColumn
        
        Private columnVatPrcnt As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        Private columnOcrCode As Global.System.Data.DataColumn
        
        Private columnOcrCode2 As Global.System.Data.DataColumn
        
        Private columnOcrCode3 As Global.System.Data.DataColumn
        
        Private columnOcrCode4 As Global.System.Data.DataColumn
        
        Private columnOcrCode5 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RCT4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesCripColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesCrip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrossAmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrossAmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrssAmntFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrssAmntFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatAmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatAmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatAmntFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatAmntFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VatPrcntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVatPrcnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcrCode5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcrCode5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RCT4Row
            Get
                Return CType(Me.Rows(index),RCT4Row)
            End Get
        End Property
        
        Public Event RCT4RowChanging As RCT4RowChangeEventHandler
        
        Public Event RCT4RowChanged As RCT4RowChangeEventHandler
        
        Public Event RCT4RowDeleting As RCT4RowChangeEventHandler
        
        Public Event RCT4RowDeleted As RCT4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRCT4Row(ByVal row As RCT4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRCT4Row(ByVal AcctCode As String, ByVal AcctName As String, ByVal DesCrip As String, ByVal DocNum As Long, ByVal GrossAmnt As Decimal, ByVal GrssAmntFC As Decimal, ByVal VatAmnt As Decimal, ByVal VatAmntFC As Decimal, ByVal VatPrcnt As Decimal, ByVal LogInstanc As Integer, ByVal OcrCode As String, ByVal OcrCode2 As String, ByVal OcrCode3 As String, ByVal OcrCode4 As String, ByVal OcrCode5 As String) As RCT4Row
            Dim rowRCT4Row As RCT4Row = CType(Me.NewRow,RCT4Row)
            Dim columnValuesArray() As Object = New Object() {AcctCode, AcctName, DesCrip, DocNum, GrossAmnt, GrssAmntFC, VatAmnt, VatAmntFC, VatPrcnt, LogInstanc, OcrCode, OcrCode2, OcrCode3, OcrCode4, OcrCode5}
            rowRCT4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowRCT4Row)
            Return rowRCT4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RCT4DataTable = CType(MyBase.Clone,RCT4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RCT4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAcctCode = MyBase.Columns("AcctCode")
            Me.columnAcctName = MyBase.Columns("AcctName")
            Me.columnDesCrip = MyBase.Columns("Descrip")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnGrossAmnt = MyBase.Columns("GrossAmnt")
            Me.columnGrssAmntFC = MyBase.Columns("GrssAmntFC")
            Me.columnVatAmnt = MyBase.Columns("VatAmnt")
            Me.columnVatAmntFC = MyBase.Columns("VatAmntFC")
            Me.columnVatPrcnt = MyBase.Columns("VatPrcnt")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
            Me.columnOcrCode = MyBase.Columns("OcrCode")
            Me.columnOcrCode2 = MyBase.Columns("OcrCode2")
            Me.columnOcrCode3 = MyBase.Columns("OcrCode3")
            Me.columnOcrCode4 = MyBase.Columns("OcrCode4")
            Me.columnOcrCode5 = MyBase.Columns("OcrCode5")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAcctCode = New Global.System.Data.DataColumn("AcctCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctCode)
            Me.columnAcctName = New Global.System.Data.DataColumn("AcctName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctName)
            Me.columnDesCrip = New Global.System.Data.DataColumn("Descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "DesCrip")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DesCripColumn")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDesCrip")
            Me.columnDesCrip.ExtendedProperties.Add("Generator_UserColumnName", "Descrip")
            MyBase.Columns.Add(Me.columnDesCrip)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnGrossAmnt = New Global.System.Data.DataColumn("GrossAmnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrossAmnt)
            Me.columnGrssAmntFC = New Global.System.Data.DataColumn("GrssAmntFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrssAmntFC)
            Me.columnVatAmnt = New Global.System.Data.DataColumn("VatAmnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatAmnt)
            Me.columnVatAmntFC = New Global.System.Data.DataColumn("VatAmntFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatAmntFC)
            Me.columnVatPrcnt = New Global.System.Data.DataColumn("VatPrcnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVatPrcnt)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
            Me.columnOcrCode = New Global.System.Data.DataColumn("OcrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode)
            Me.columnOcrCode2 = New Global.System.Data.DataColumn("OcrCode2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode2)
            Me.columnOcrCode3 = New Global.System.Data.DataColumn("OcrCode3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode3)
            Me.columnOcrCode4 = New Global.System.Data.DataColumn("OcrCode4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode4)
            Me.columnOcrCode5 = New Global.System.Data.DataColumn("OcrCode5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcrCode5)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRCT4Row() As RCT4Row
            Return CType(Me.NewRow,RCT4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RCT4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RCT4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RCT4RowChangedEvent) Is Nothing) Then
                RaiseEvent RCT4RowChanged(Me, New RCT4RowChangeEvent(CType(e.Row,RCT4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RCT4RowChangingEvent) Is Nothing) Then
                RaiseEvent RCT4RowChanging(Me, New RCT4RowChangeEvent(CType(e.Row,RCT4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RCT4RowDeletedEvent) Is Nothing) Then
                RaiseEvent RCT4RowDeleted(Me, New RCT4RowChangeEvent(CType(e.Row,RCT4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RCT4RowDeletingEvent) Is Nothing) Then
                RaiseEvent RCT4RowDeleting(Me, New RCT4RowChangeEvent(CType(e.Row,RCT4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRCT4Row(ByVal row As RCT4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RCT4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RCT1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAcctNum As Global.System.Data.DataColumn
        
        Private columnBankCode As Global.System.Data.DataColumn
        
        Private columnCheckNum As Global.System.Data.DataColumn
        
        Private columnCheckSum As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnDetais As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDueDate As Global.System.Data.DataColumn
        
        Private columnLogInstanc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RCT1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BankCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBankCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckSumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckSum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetaisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetais
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogInstancColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogInstanc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RCT1Row
            Get
                Return CType(Me.Rows(index),RCT1Row)
            End Get
        End Property
        
        Public Event RCT1RowChanging As RCT1RowChangeEventHandler
        
        Public Event RCT1RowChanged As RCT1RowChangeEventHandler
        
        Public Event RCT1RowDeleting As RCT1RowChangeEventHandler
        
        Public Event RCT1RowDeleted As RCT1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRCT1Row(ByVal row As RCT1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRCT1Row(ByVal AcctNum As String, ByVal BankCode As String, ByVal CheckNum As Long, ByVal CheckSum As Decimal, ByVal Currency As String, ByVal Detais As String, ByVal DocNum As Long, ByVal DueDate As Date, ByVal LogInstanc As Integer) As RCT1Row
            Dim rowRCT1Row As RCT1Row = CType(Me.NewRow,RCT1Row)
            Dim columnValuesArray() As Object = New Object() {AcctNum, BankCode, CheckNum, CheckSum, Currency, Detais, DocNum, DueDate, LogInstanc}
            rowRCT1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowRCT1Row)
            Return rowRCT1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RCT1DataTable = CType(MyBase.Clone,RCT1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RCT1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAcctNum = MyBase.Columns("AcctNum")
            Me.columnBankCode = MyBase.Columns("BankCode")
            Me.columnCheckNum = MyBase.Columns("CheckNum")
            Me.columnCheckSum = MyBase.Columns("CheckSum")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnDetais = MyBase.Columns("Detais")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDueDate = MyBase.Columns("DueDate")
            Me.columnLogInstanc = MyBase.Columns("LogInstanc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAcctNum = New Global.System.Data.DataColumn("AcctNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctNum)
            Me.columnBankCode = New Global.System.Data.DataColumn("BankCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBankCode)
            Me.columnCheckNum = New Global.System.Data.DataColumn("CheckNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckNum)
            Me.columnCheckSum = New Global.System.Data.DataColumn("CheckSum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckSum)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnDetais = New Global.System.Data.DataColumn("Detais", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetais)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDueDate = New Global.System.Data.DataColumn("DueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDueDate)
            Me.columnLogInstanc = New Global.System.Data.DataColumn("LogInstanc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogInstanc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRCT1Row() As RCT1Row
            Return CType(Me.NewRow,RCT1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RCT1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RCT1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RCT1RowChangedEvent) Is Nothing) Then
                RaiseEvent RCT1RowChanged(Me, New RCT1RowChangeEvent(CType(e.Row,RCT1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RCT1RowChangingEvent) Is Nothing) Then
                RaiseEvent RCT1RowChanging(Me, New RCT1RowChangeEvent(CType(e.Row,RCT1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RCT1RowDeletedEvent) Is Nothing) Then
                RaiseEvent RCT1RowDeleted(Me, New RCT1RowChangeEvent(CType(e.Row,RCT1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RCT1RowDeletingEvent) Is Nothing) Then
                RaiseEvent RCT1RowDeleting(Me, New RCT1RowChangeEvent(CType(e.Row,RCT1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRCT1Row(ByVal row As RCT1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_PAYMENT = New DS_PAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RCT1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OVPMRow
        Inherits Global.System.Data.DataRow
        
        Private tableOVPM As OVPMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOVPM = CType(Me.Table,OVPMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BcgSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.BcgSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BcgSum' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.BcgSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BcgSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.BcgSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BcgSumFC' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.BcgSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.CardNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardName' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.CardNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.CashAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashAcct' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.CashAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.CashSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashSum' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.CashSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.CashSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashSumFC' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.CashSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CounterRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.CounterRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterRef' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.CounterRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCurr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocCurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCurr' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocCurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.Ref1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref1' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.Ref1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.Ref2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref2' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.Ref2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesStr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.SeriesStrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesStr' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.SeriesStrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.TransIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransId' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.TransIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.TrsfrAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrAcct' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.TrsfrAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.TrsfrDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrDate' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.TrsfrDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.TrsfrRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrRef' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.TrsfrRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.TrsfrSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrSum' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.TrsfrSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.TrsfrSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrSumFC' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.TrsfrSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiffCurr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.DiffCurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiffCurr' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.DiffCurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrjCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.PrjCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrjCode' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.PrjCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JrnlMemo() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.JrnlMemoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JrnlMemo' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.JrnlMemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPerson() As String
            Get
                Try 
                    Return CType(Me(Me.tableOVPM.ContactPersonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPerson' in table 'OVPM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOVPM.ContactPersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableOVPM.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBcgSumNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.BcgSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBcgSumNull()
            Me(Me.tableOVPM.BcgSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBcgSumFCNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.BcgSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBcgSumFCNull()
            Me(Me.tableOVPM.BcgSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableOVPM.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardNameNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.CardNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardNameNull()
            Me(Me.tableOVPM.CardNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashAcctNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.CashAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashAcctNull()
            Me(Me.tableOVPM.CashAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashSumNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.CashSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashSumNull()
            Me(Me.tableOVPM.CashSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashSumFCNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.CashSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashSumFCNull()
            Me(Me.tableOVPM.CashSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableOVPM.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterRefNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.CounterRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterRefNull()
            Me(Me.tableOVPM.CounterRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurrNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocCurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurrNull()
            Me(Me.tableOVPM.DocCurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableOVPM.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableOVPM.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableOVPM.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableOVPM.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableOVPM.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableOVPM.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableOVPM.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableOVPM.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef1Null() As Boolean
            Return Me.IsNull(Me.tableOVPM.Ref1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef1Null()
            Me(Me.tableOVPM.Ref1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef2Null() As Boolean
            Return Me.IsNull(Me.tableOVPM.Ref2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef2Null()
            Me(Me.tableOVPM.Ref2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableOVPM.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesStrNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.SeriesStrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesStrNull()
            Me(Me.tableOVPM.SeriesStrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableOVPM.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransIdNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.TransIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransIdNull()
            Me(Me.tableOVPM.TransIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrAcctNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.TrsfrAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrAcctNull()
            Me(Me.tableOVPM.TrsfrAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrDateNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.TrsfrDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrDateNull()
            Me(Me.tableOVPM.TrsfrDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrRefNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.TrsfrRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrRefNull()
            Me(Me.tableOVPM.TrsfrRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrSumNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.TrsfrSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrSumNull()
            Me(Me.tableOVPM.TrsfrSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrSumFCNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.TrsfrSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrSumFCNull()
            Me(Me.tableOVPM.TrsfrSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableOVPM.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiffCurrNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.DiffCurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiffCurrNull()
            Me(Me.tableOVPM.DiffCurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrjCodeNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.PrjCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrjCodeNull()
            Me(Me.tableOVPM.PrjCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJrnlMemoNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.JrnlMemoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJrnlMemoNull()
            Me(Me.tableOVPM.JrnlMemoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPersonNull() As Boolean
            Return Me.IsNull(Me.tableOVPM.ContactPersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPersonNull()
            Me(Me.tableOVPM.ContactPersonColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ADM1Row
        Inherits Global.System.Data.DataRow
        
        Private tableADM1 As ADM1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableADM1 = CType(Me.Table,ADM1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Block() As String
            Get
                Try 
                    Return CType(Me(Me.tableADM1.BlockColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Block' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.BlockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableADM1.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableADM1.CodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Code' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property County() As String
            Get
                Try 
                    Return CType(Me(Me.tableADM1.CountyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'County' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.CountyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableADM1.CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntrntAdrs() As String
            Get
                Try 
                    Return CType(Me(Me.tableADM1.IntrntAdrsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IntrntAdrs' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.IntrntAdrsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableADM1.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Street() As String
            Get
                Try 
                    Return CType(Me(Me.tableADM1.StreetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Street' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.StreetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZipCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableADM1.ZipCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZipCode' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.ZipCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableADM1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'ADM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableADM1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBlockNull() As Boolean
            Return Me.IsNull(Me.tableADM1.BlockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBlockNull()
            Me(Me.tableADM1.BlockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableADM1.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableADM1.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tableADM1.CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeNull()
            Me(Me.tableADM1.CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountyNull() As Boolean
            Return Me.IsNull(Me.tableADM1.CountyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountyNull()
            Me(Me.tableADM1.CountyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tableADM1.CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountryNull()
            Me(Me.tableADM1.CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntrntAdrsNull() As Boolean
            Return Me.IsNull(Me.tableADM1.IntrntAdrsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntrntAdrsNull()
            Me(Me.tableADM1.IntrntAdrsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableADM1.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableADM1.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStreetNull() As Boolean
            Return Me.IsNull(Me.tableADM1.StreetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStreetNull()
            Me(Me.tableADM1.StreetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipCodeNull() As Boolean
            Return Me.IsNull(Me.tableADM1.ZipCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipCodeNull()
            Me(Me.tableADM1.ZipCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableADM1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableADM1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OADMRow
        Inherits Global.System.Data.DataRow
        
        Private tableOADM As OADMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOADM = CType(Me.Table,OADMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOADM.CodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Code' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompnyAddr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.CompnyAddrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompnyAddr' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.CompnyAddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompnyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.CompnyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompnyName' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.CompnyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property E_Mail() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.E_MailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'E_Mail' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.E_MailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxF() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.FaxFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxF' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.FaxFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FreeZoneNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.FreeZoneNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FreeZoneNo' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.FreeZoneNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MainCurncy() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.MainCurncyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MainCurncy' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.MainCurncyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.Phone1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone1' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.Phone1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone1F() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.Phone1FColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone1F' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.Phone1FColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.Phone2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone2' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.Phone2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RevOffice() As String
            Get
                Try 
                    Return CType(Me(Me.tableOADM.RevOfficeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RevOffice' in table 'OADM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOADM.RevOfficeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tableOADM.CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeNull()
            Me(Me.tableOADM.CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompnyAddrNull() As Boolean
            Return Me.IsNull(Me.tableOADM.CompnyAddrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompnyAddrNull()
            Me(Me.tableOADM.CompnyAddrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompnyNameNull() As Boolean
            Return Me.IsNull(Me.tableOADM.CompnyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompnyNameNull()
            Me(Me.tableOADM.CompnyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsE_MailNull() As Boolean
            Return Me.IsNull(Me.tableOADM.E_MailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetE_MailNull()
            Me(Me.tableOADM.E_MailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableOADM.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tableOADM.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxFNull() As Boolean
            Return Me.IsNull(Me.tableOADM.FaxFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxFNull()
            Me(Me.tableOADM.FaxFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFreeZoneNoNull() As Boolean
            Return Me.IsNull(Me.tableOADM.FreeZoneNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFreeZoneNoNull()
            Me(Me.tableOADM.FreeZoneNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMainCurncyNull() As Boolean
            Return Me.IsNull(Me.tableOADM.MainCurncyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMainCurncyNull()
            Me(Me.tableOADM.MainCurncyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhone1Null() As Boolean
            Return Me.IsNull(Me.tableOADM.Phone1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhone1Null()
            Me(Me.tableOADM.Phone1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhone1FNull() As Boolean
            Return Me.IsNull(Me.tableOADM.Phone1FColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhone1FNull()
            Me(Me.tableOADM.Phone1FColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhone2Null() As Boolean
            Return Me.IsNull(Me.tableOADM.Phone2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhone2Null()
            Me(Me.tableOADM.Phone2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRevOfficeNull() As Boolean
            Return Me.IsNull(Me.tableOADM.RevOfficeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRevOfficeNull()
            Me(Me.tableOADM.RevOfficeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableOACT As OACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOACT = CType(Me.Table,OACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.AcctCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctCode' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.AcctCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.AcctNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctName' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.AcctNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormatCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.FormatCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormatCode' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.FormatCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOACT.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_0() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_0Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_0' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_0Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_1' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_2' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_3() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_3' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_4() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_4' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_5() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_5' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_6() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_6' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_7() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_7' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_8() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_8' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Segment_9() As String
            Get
                Try 
                    Return CType(Me(Me.tableOACT.Segment_9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Segment_9' in table 'OACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOACT.Segment_9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctCodeNull() As Boolean
            Return Me.IsNull(Me.tableOACT.AcctCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctCodeNull()
            Me(Me.tableOACT.AcctCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctNameNull() As Boolean
            Return Me.IsNull(Me.tableOACT.AcctNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctNameNull()
            Me(Me.tableOACT.AcctNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormatCodeNull() As Boolean
            Return Me.IsNull(Me.tableOACT.FormatCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormatCodeNull()
            Me(Me.tableOACT.FormatCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableOACT.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableOACT.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_0Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_0Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_0Null()
            Me(Me.tableOACT.Segment_0Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_1Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_1Null()
            Me(Me.tableOACT.Segment_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_2Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_2Null()
            Me(Me.tableOACT.Segment_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_3Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_3Null()
            Me(Me.tableOACT.Segment_3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_4Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_4Null()
            Me(Me.tableOACT.Segment_4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_5Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_5Null()
            Me(Me.tableOACT.Segment_5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_6Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_6Null()
            Me(Me.tableOACT.Segment_6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_7Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_7Null()
            Me(Me.tableOACT.Segment_7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_8Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_8Null()
            Me(Me.tableOACT.Segment_8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSegment_9Null() As Boolean
            Return Me.IsNull(Me.tableOACT.Segment_9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSegment_9Null()
            Me(Me.tableOACT.Segment_9Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VPM1Row
        Inherits Global.System.Data.DataRow
        
        Private tableVPM1 As VPM1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVPM1 = CType(Me.Table,VPM1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.AcctNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctNum' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.AcctNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BankCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.BankCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BankCode' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.BankCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.CheckNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckNum' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.CheckNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.CheckSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckSum' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.CheckSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Details() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.DetailsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Details' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.DetailsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.DueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DueDate' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.DueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVPM1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'VPM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctNumNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.AcctNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctNumNull()
            Me(Me.tableVPM1.AcctNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBankCodeNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.BankCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBankCodeNull()
            Me(Me.tableVPM1.BankCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckNumNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.CheckNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckNumNull()
            Me(Me.tableVPM1.CheckNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.CheckSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckSumNull()
            Me(Me.tableVPM1.CheckSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyNull()
            Me(Me.tableVPM1.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetailsNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.DetailsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetailsNull()
            Me(Me.tableVPM1.DetailsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableVPM1.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.DueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDueDateNull()
            Me(Me.tableVPM1.DueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableVPM1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableVPM1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VPM4Row
        Inherits Global.System.Data.DataRow
        
        Private tableVPM4 As VPM4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVPM4 = CType(Me.Table,VPM4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.AcctCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctCode' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.AcctCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.AcctNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctName' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.AcctNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DesCrip() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.DesCripColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descrip' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.DesCripColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrossAmnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.GrossAmntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrossAmnt' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.GrossAmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrssAmntFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.GrssAmntFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrssAmntFC' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.GrssAmntFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatAmnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.VatAmntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatAmnt' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.VatAmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatAmntFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.VatAmntFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatAmntFC' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.VatAmntFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatPrcnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.VatPrcntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatPrcnt' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.VatPrcntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.OcrCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.OcrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.OcrCode2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode2' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.OcrCode2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode3() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.OcrCode3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode3' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.OcrCode3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode4() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.OcrCode4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode4' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.OcrCode4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode5() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM4.OcrCode5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode5' in table 'VPM4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM4.OcrCode5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctCodeNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.AcctCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctCodeNull()
            Me(Me.tableVPM4.AcctCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctNameNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.AcctNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctNameNull()
            Me(Me.tableVPM4.AcctNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesCripNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.DesCripColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesCripNull()
            Me(Me.tableVPM4.DesCripColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableVPM4.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrossAmntNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.GrossAmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrossAmntNull()
            Me(Me.tableVPM4.GrossAmntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrssAmntFCNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.GrssAmntFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrssAmntFCNull()
            Me(Me.tableVPM4.GrssAmntFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatAmntNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.VatAmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatAmntNull()
            Me(Me.tableVPM4.VatAmntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatAmntFCNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.VatAmntFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatAmntFCNull()
            Me(Me.tableVPM4.VatAmntFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatPrcntNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.VatPrcntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatPrcntNull()
            Me(Me.tableVPM4.VatPrcntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableVPM4.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCodeNull() As Boolean
            Return Me.IsNull(Me.tableVPM4.OcrCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCodeNull()
            Me(Me.tableVPM4.OcrCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode2Null() As Boolean
            Return Me.IsNull(Me.tableVPM4.OcrCode2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode2Null()
            Me(Me.tableVPM4.OcrCode2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode3Null() As Boolean
            Return Me.IsNull(Me.tableVPM4.OcrCode3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode3Null()
            Me(Me.tableVPM4.OcrCode3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode4Null() As Boolean
            Return Me.IsNull(Me.tableVPM4.OcrCode4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode4Null()
            Me(Me.tableVPM4.OcrCode4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode5Null() As Boolean
            Return Me.IsNull(Me.tableVPM4.OcrCode5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode5Null()
            Me(Me.tableVPM4.OcrCode5Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VPM3Row
        Inherits Global.System.Data.DataRow
        
        Private tableVPM3 As VPM3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVPM3 = CType(Me.Table,VPM3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.CreditAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditAcct' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.CreditAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditCard() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.CreditCardColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditCard' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.CreditCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.CreditCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditCur' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.CreditCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.CreditRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditRate' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.CreditRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.CreditSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditSum' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.CreditSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstDue() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.FirstDueColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstDue' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.FirstDueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.FirstSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstSum' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.FirstSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.VoucherNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherNum' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.VoucherNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVPM3.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'VPM3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM3.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditAcctNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.CreditAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditAcctNull()
            Me(Me.tableVPM3.CreditAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditCardNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.CreditCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditCardNull()
            Me(Me.tableVPM3.CreditCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditCurNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.CreditCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditCurNull()
            Me(Me.tableVPM3.CreditCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditRateNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.CreditRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditRateNull()
            Me(Me.tableVPM3.CreditRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditSumNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.CreditSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditSumNull()
            Me(Me.tableVPM3.CreditSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableVPM3.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstDueNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.FirstDueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstDueNull()
            Me(Me.tableVPM3.FirstDueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstSumNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.FirstSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstSumNull()
            Me(Me.tableVPM3.FirstSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherNumNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.VoucherNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherNumNull()
            Me(Me.tableVPM3.VoucherNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableVPM3.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableVPM3.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VPM2Row
        Inherits Global.System.Data.DataRow
        
        Private tableVPM2 As VPM2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVPM2 = CType(Me.Table,VPM2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AppliedFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.AppliedFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AppliedFC' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.AppliedFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocLine() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.DocLineColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocLine' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.DocLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceId() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.InvoiceIdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceId' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.InvoiceIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvType() As String
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.InvTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvType' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.InvTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumApplied() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.SumAppliedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumApplied' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.SumAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vatApplied() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.vatAppliedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatApplied' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.vatAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vatAppldFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.vatAppldFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatAppldFC' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.vatAppldFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVPM2.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'VPM2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVPM2.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppliedFCNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.AppliedFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppliedFCNull()
            Me(Me.tableVPM2.AppliedFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableVPM2.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocLineNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.DocLineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocLineNull()
            Me(Me.tableVPM2.DocLineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableVPM2.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableVPM2.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceIdNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.InvoiceIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceIdNull()
            Me(Me.tableVPM2.InvoiceIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvTypeNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.InvTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvTypeNull()
            Me(Me.tableVPM2.InvTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumAppliedNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.SumAppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumAppliedNull()
            Me(Me.tableVPM2.SumAppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvatAppliedNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.vatAppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvatAppliedNull()
            Me(Me.tableVPM2.vatAppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvatAppldFCNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.vatAppldFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvatAppldFCNull()
            Me(Me.tableVPM2.vatAppldFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableVPM2.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableVPM2.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_NNM1_1Row
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_NNM1_1 As NCM_NNM1_1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_NNM1_1 = CType(Me.Table,NCM_NNM1_1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_1.ObjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectCode' in table 'NCM_NNM1_1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_1.ObjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_1.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'NCM_NNM1_1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_1.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_1.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NCM_NNM1_1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_1.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_1.ObjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectCodeNull()
            Me(Me.tableNCM_NNM1_1.ObjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_1.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableNCM_NNM1_1.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_1.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNCM_NNM1_1.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_NNM1_2Row
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_NNM1_2 As NCM_NNM1_2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_NNM1_2 = CType(Me.Table,NCM_NNM1_2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_2.ObjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectCode' in table 'NCM_NNM1_2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_2.ObjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_2.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'NCM_NNM1_2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_2.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_2.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NCM_NNM1_2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_2.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_2.ObjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectCodeNull()
            Me(Me.tableNCM_NNM1_2.ObjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_2.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableNCM_NNM1_2.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_2.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNCM_NNM1_2.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_NNM1_3Row
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_NNM1_3 As NCM_NNM1_3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_NNM1_3 = CType(Me.Table,NCM_NNM1_3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_3.ObjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectCode' in table 'NCM_NNM1_3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_3.ObjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_3.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'NCM_NNM1_3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_3.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_3.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NCM_NNM1_3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_3.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_3.ObjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectCodeNull()
            Me(Me.tableNCM_NNM1_3.ObjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_3.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableNCM_NNM1_3.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_3.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNCM_NNM1_3.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_NNM1_4Row
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_NNM1_4 As NCM_NNM1_4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_NNM1_4 = CType(Me.Table,NCM_NNM1_4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_4.ObjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectCode' in table 'NCM_NNM1_4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_4.ObjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_4.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'NCM_NNM1_4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_4.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_4.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NCM_NNM1_4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_4.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_4.ObjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectCodeNull()
            Me(Me.tableNCM_NNM1_4.ObjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_4.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableNCM_NNM1_4.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_4.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNCM_NNM1_4.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_NNM1_5Row
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_NNM1_5 As NCM_NNM1_5DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_NNM1_5 = CType(Me.Table,NCM_NNM1_5DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_5.ObjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectCode' in table 'NCM_NNM1_5' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_5.ObjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_5.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'NCM_NNM1_5' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_5.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_5.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NCM_NNM1_5' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_5.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_5.ObjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectCodeNull()
            Me(Me.tableNCM_NNM1_5.ObjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_5.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableNCM_NNM1_5.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_5.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNCM_NNM1_5.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_NNM1_6Row
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_NNM1_6 As NCM_NNM1_6DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_NNM1_6 = CType(Me.Table,NCM_NNM1_6DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_6.ObjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectCode' in table 'NCM_NNM1_6' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_6.ObjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_6.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'NCM_NNM1_6' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_6.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_6.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NCM_NNM1_6' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_6.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_6.ObjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectCodeNull()
            Me(Me.tableNCM_NNM1_6.ObjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_6.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableNCM_NNM1_6.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_6.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNCM_NNM1_6.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_NNM1_7Row
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_NNM1_7 As NCM_NNM1_7DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_NNM1_7 = CType(Me.Table,NCM_NNM1_7DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_7.ObjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectCode' in table 'NCM_NNM1_7' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_7.ObjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_7.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'NCM_NNM1_7' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_7.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_NNM1_7.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NCM_NNM1_7' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_NNM1_7.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_7.ObjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectCodeNull()
            Me(Me.tableNCM_NNM1_7.ObjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_7.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableNCM_NNM1_7.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_NNM1_7.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNCM_NNM1_7.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OJDTRow
        Inherits Global.System.Data.DataRow
        
        Private tableOJDT As OJDTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOJDT = CType(Me.Table,OJDTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocSeries() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.DocSeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocSeries' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.DocSeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.DueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DueDate' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.DueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.NumberColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Memo() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.MemoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Memo' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.MemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.ObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjType' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.ObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.Ref1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref1' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.Ref1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.Ref2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref2' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.Ref2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref3() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.Ref3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref3' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.Ref3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.RefDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefDate' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.RefDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesStr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.SeriesStrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesStr' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.SeriesStrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.TransCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransCode' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.TransCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransCurr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.TransCurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransCurr' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.TransCurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransId() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.TransIdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransId' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.TransIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOJDT.TransTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransType' in table 'OJDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOJDT.TransTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocSeriesNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.DocSeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocSeriesNull()
            Me(Me.tableOJDT.DocSeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableOJDT.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.DueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDueDateNull()
            Me(Me.tableOJDT.DueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tableOJDT.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMemoNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.MemoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMemoNull()
            Me(Me.tableOJDT.MemoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.ObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjTypeNull()
            Me(Me.tableOJDT.ObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef1Null() As Boolean
            Return Me.IsNull(Me.tableOJDT.Ref1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef1Null()
            Me(Me.tableOJDT.Ref1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef2Null() As Boolean
            Return Me.IsNull(Me.tableOJDT.Ref2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef2Null()
            Me(Me.tableOJDT.Ref2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef3Null() As Boolean
            Return Me.IsNull(Me.tableOJDT.Ref3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef3Null()
            Me(Me.tableOJDT.Ref3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefDateNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.RefDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefDateNull()
            Me(Me.tableOJDT.RefDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableOJDT.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesStrNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.SeriesStrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesStrNull()
            Me(Me.tableOJDT.SeriesStrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableOJDT.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransCodeNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.TransCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransCodeNull()
            Me(Me.tableOJDT.TransCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransCurrNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.TransCurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransCurrNull()
            Me(Me.tableOJDT.TransCurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransIdNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.TransIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransIdNull()
            Me(Me.tableOJDT.TransIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransTypeNull() As Boolean
            Return Me.IsNull(Me.tableOJDT.TransTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransTypeNull()
            Me(Me.tableOJDT.TransTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INV1Row
        Inherits Global.System.Data.DataRow
        
        Private tableINV1 As INV1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINV1 = CType(Me.Table,INV1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableINV1.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINV1.LineNumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNum' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINV1.VisOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisOrder' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.VisOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableINV1.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dscription() As String
            Get
                Try 
                    Return CType(Me(Me.tableINV1.DscriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dscription' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.DscriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV1.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV1.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalFrgn() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV1.TotalFrgnColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalFrgn' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.TotalFrgnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV1.LineTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineTotal' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.LineTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINV1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV1.RateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rate' in table 'INV1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV1.RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableINV1.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableINV1.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumNull() As Boolean
            Return Me.IsNull(Me.tableINV1.LineNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumNull()
            Me(Me.tableINV1.LineNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisOrderNull() As Boolean
            Return Me.IsNull(Me.tableINV1.VisOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisOrderNull()
            Me(Me.tableINV1.VisOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableINV1.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableINV1.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDscriptionNull() As Boolean
            Return Me.IsNull(Me.tableINV1.DscriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDscriptionNull()
            Me(Me.tableINV1.DscriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableINV1.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableINV1.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableINV1.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableINV1.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalFrgnNull() As Boolean
            Return Me.IsNull(Me.tableINV1.TotalFrgnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalFrgnNull()
            Me(Me.tableINV1.TotalFrgnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineTotalNull() As Boolean
            Return Me.IsNull(Me.tableINV1.LineTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineTotalNull()
            Me(Me.tableINV1.LineTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableINV1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableINV1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRateNull() As Boolean
            Return Me.IsNull(Me.tableINV1.RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRateNull()
            Me(Me.tableINV1.RateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RIN1Row
        Inherits Global.System.Data.DataRow
        
        Private tableRIN1 As RIN1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRIN1 = CType(Me.Table,RIN1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.LineNumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNum' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.VisOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisOrder' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.VisOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dscription() As String
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.DscriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dscription' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.DscriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalFrgn() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.TotalFrgnColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalFrgn' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.TotalFrgnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.LineTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineTotal' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.LineTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRIN1.RateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rate' in table 'RIN1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRIN1.RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableRIN1.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.LineNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumNull()
            Me(Me.tableRIN1.LineNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisOrderNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.VisOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisOrderNull()
            Me(Me.tableRIN1.VisOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableRIN1.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDscriptionNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.DscriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDscriptionNull()
            Me(Me.tableRIN1.DscriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableRIN1.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableRIN1.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalFrgnNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.TotalFrgnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalFrgnNull()
            Me(Me.tableRIN1.TotalFrgnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineTotalNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.LineTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineTotalNull()
            Me(Me.tableRIN1.LineTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableRIN1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRateNull() As Boolean
            Return Me.IsNull(Me.tableRIN1.RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRateNull()
            Me(Me.tableRIN1.RateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PCH1Row
        Inherits Global.System.Data.DataRow
        
        Private tablePCH1 As PCH1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePCH1 = CType(Me.Table,PCH1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.LineNumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNum' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.VisOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisOrder' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.VisOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dscription() As String
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.DscriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dscription' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.DscriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalFrgn() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.TotalFrgnColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalFrgn' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.TotalFrgnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.LineTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineTotal' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.LineTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePCH1.RateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rate' in table 'PCH1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePCH1.RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tablePCH1.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.LineNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumNull()
            Me(Me.tablePCH1.LineNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisOrderNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.VisOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisOrderNull()
            Me(Me.tablePCH1.VisOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tablePCH1.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDscriptionNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.DscriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDscriptionNull()
            Me(Me.tablePCH1.DscriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tablePCH1.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tablePCH1.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalFrgnNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.TotalFrgnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalFrgnNull()
            Me(Me.tablePCH1.TotalFrgnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineTotalNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.LineTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineTotalNull()
            Me(Me.tablePCH1.LineTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tablePCH1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRateNull() As Boolean
            Return Me.IsNull(Me.tablePCH1.RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRateNull()
            Me(Me.tablePCH1.RateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DPO1Row
        Inherits Global.System.Data.DataRow
        
        Private tableDPO1 As DPO1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDPO1 = CType(Me.Table,DPO1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.LineNumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNum' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.VisOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisOrder' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.VisOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dscription() As String
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.DscriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dscription' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.DscriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalFrgn() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.TotalFrgnColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalFrgn' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.TotalFrgnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.LineTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineTotal' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.LineTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPO1.RateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rate' in table 'DPO1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPO1.RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableDPO1.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.LineNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumNull()
            Me(Me.tableDPO1.LineNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisOrderNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.VisOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisOrderNull()
            Me(Me.tableDPO1.VisOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableDPO1.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDscriptionNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.DscriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDscriptionNull()
            Me(Me.tableDPO1.DscriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableDPO1.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableDPO1.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalFrgnNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.TotalFrgnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalFrgnNull()
            Me(Me.tableDPO1.TotalFrgnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineTotalNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.LineTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineTotalNull()
            Me(Me.tableDPO1.LineTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableDPO1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRateNull() As Boolean
            Return Me.IsNull(Me.tableDPO1.RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRateNull()
            Me(Me.tableDPO1.RateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RPC1Row
        Inherits Global.System.Data.DataRow
        
        Private tableRPC1 As RPC1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRPC1 = CType(Me.Table,RPC1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.LineNumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNum' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.VisOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisOrder' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.VisOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dscription() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.DscriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dscription' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.DscriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalFrgn() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.TotalFrgnColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalFrgn' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.TotalFrgnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.LineTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineTotal' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.LineTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPC1.RateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rate' in table 'RPC1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPC1.RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableRPC1.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.LineNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumNull()
            Me(Me.tableRPC1.LineNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisOrderNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.VisOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisOrderNull()
            Me(Me.tableRPC1.VisOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableRPC1.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDscriptionNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.DscriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDscriptionNull()
            Me(Me.tableRPC1.DscriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableRPC1.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableRPC1.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalFrgnNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.TotalFrgnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalFrgnNull()
            Me(Me.tableRPC1.TotalFrgnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineTotalNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.LineTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineTotalNull()
            Me(Me.tableRPC1.LineTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableRPC1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRateNull() As Boolean
            Return Me.IsNull(Me.tableRPC1.RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRateNull()
            Me(Me.tableRPC1.RateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DPI1Row
        Inherits Global.System.Data.DataRow
        
        Private tableDPI1 As DPI1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDPI1 = CType(Me.Table,DPI1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineNum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.LineNumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineNum' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.LineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.VisOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisOrder' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.VisOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dscription() As String
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.DscriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dscription' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.DscriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalFrgn() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.TotalFrgnColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalFrgn' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.TotalFrgnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.LineTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineTotal' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.LineTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDPI1.RateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rate' in table 'DPI1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDPI1.RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableDPI1.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineNumNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.LineNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineNumNull()
            Me(Me.tableDPI1.LineNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisOrderNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.VisOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisOrderNull()
            Me(Me.tableDPI1.VisOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableDPI1.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDscriptionNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.DscriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDscriptionNull()
            Me(Me.tableDPI1.DscriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableDPI1.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableDPI1.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalFrgnNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.TotalFrgnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalFrgnNull()
            Me(Me.tableDPI1.TotalFrgnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineTotalNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.LineTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineTotalNull()
            Me(Me.tableDPI1.LineTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableDPI1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRateNull() As Boolean
            Return Me.IsNull(Me.tableDPI1.RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRateNull()
            Me(Me.tableDPI1.RateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OINVRow
        Inherits Global.System.Data.DataRow
        
        Private tableOINV As OINVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOINV = CType(Me.Table,OINVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOINV.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCur' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOINV.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAtCard() As String
            Get
                Try 
                    Return CType(Me(Me.tableOINV.NumAtCardColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAtCard' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.NumAtCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOINV.ObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjType' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.ObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOINV.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOINV.VatSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSum' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.VatSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOINV.VatSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSumFC' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.VatSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOINV.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOINV.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'OINV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOINV.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableOINV.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableOINV.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableOINV.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableOINV.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableOINV.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableOINV.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableOINV.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurNull()
            Me(Me.tableOINV.DocCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableOINV.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableOINV.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableOINV.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableOINV.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAtCardNull() As Boolean
            Return Me.IsNull(Me.tableOINV.NumAtCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAtCardNull()
            Me(Me.tableOINV.NumAtCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableOINV.ObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjTypeNull()
            Me(Me.tableOINV.ObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableOINV.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableOINV.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumNull() As Boolean
            Return Me.IsNull(Me.tableOINV.VatSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumNull()
            Me(Me.tableOINV.VatSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumFCNull() As Boolean
            Return Me.IsNull(Me.tableOINV.VatSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumFCNull()
            Me(Me.tableOINV.VatSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableOINV.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableOINV.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableOINV.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableOINV.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORPCRow
        Inherits Global.System.Data.DataRow
        
        Private tableORPC As ORPCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORPC = CType(Me.Table,ORPCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableORPC.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCur' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableORPC.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAtCard() As String
            Get
                Try 
                    Return CType(Me(Me.tableORPC.NumAtCardColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAtCard' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.NumAtCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableORPC.ObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjType' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.ObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORPC.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORPC.VatSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSum' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.VatSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORPC.VatSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSumFC' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.VatSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORPC.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORPC.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'ORPC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORPC.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableORPC.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableORPC.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableORPC.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableORPC.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableORPC.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableORPC.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableORPC.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurNull()
            Me(Me.tableORPC.DocCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableORPC.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableORPC.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableORPC.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableORPC.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAtCardNull() As Boolean
            Return Me.IsNull(Me.tableORPC.NumAtCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAtCardNull()
            Me(Me.tableORPC.NumAtCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableORPC.ObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjTypeNull()
            Me(Me.tableORPC.ObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableORPC.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableORPC.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumNull() As Boolean
            Return Me.IsNull(Me.tableORPC.VatSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumNull()
            Me(Me.tableORPC.VatSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumFCNull() As Boolean
            Return Me.IsNull(Me.tableORPC.VatSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumFCNull()
            Me(Me.tableORPC.VatSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableORPC.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableORPC.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableORPC.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableORPC.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORINRow
        Inherits Global.System.Data.DataRow
        
        Private tableORIN As ORINDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORIN = CType(Me.Table,ORINDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableORIN.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCur' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableORIN.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAtCard() As String
            Get
                Try 
                    Return CType(Me(Me.tableORIN.NumAtCardColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAtCard' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.NumAtCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableORIN.ObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjType' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.ObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORIN.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORIN.VatSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSum' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.VatSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORIN.VatSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSumFC' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.VatSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORIN.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORIN.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'ORIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORIN.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableORIN.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableORIN.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableORIN.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableORIN.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableORIN.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableORIN.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableORIN.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurNull()
            Me(Me.tableORIN.DocCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableORIN.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableORIN.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableORIN.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableORIN.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAtCardNull() As Boolean
            Return Me.IsNull(Me.tableORIN.NumAtCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAtCardNull()
            Me(Me.tableORIN.NumAtCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableORIN.ObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjTypeNull()
            Me(Me.tableORIN.ObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableORIN.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableORIN.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumNull() As Boolean
            Return Me.IsNull(Me.tableORIN.VatSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumNull()
            Me(Me.tableORIN.VatSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumFCNull() As Boolean
            Return Me.IsNull(Me.tableORIN.VatSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumFCNull()
            Me(Me.tableORIN.VatSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableORIN.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableORIN.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableORIN.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableORIN.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OPCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableOPCH As OPCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOPCH = CType(Me.Table,OPCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCur' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAtCard() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.NumAtCardColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAtCard' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.NumAtCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.ObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjType' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.ObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.VatSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSum' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.VatSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.VatSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSumFC' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.VatSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOPCH.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'OPCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPCH.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableOPCH.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableOPCH.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableOPCH.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableOPCH.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableOPCH.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableOPCH.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurNull()
            Me(Me.tableOPCH.DocCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableOPCH.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableOPCH.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableOPCH.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAtCardNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.NumAtCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAtCardNull()
            Me(Me.tableOPCH.NumAtCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.ObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjTypeNull()
            Me(Me.tableOPCH.ObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableOPCH.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.VatSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumNull()
            Me(Me.tableOPCH.VatSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumFCNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.VatSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumFCNull()
            Me(Me.tableOPCH.VatSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableOPCH.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableOPCH.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableOPCH.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ODPIRow
        Inherits Global.System.Data.DataRow
        
        Private tableODPI As ODPIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableODPI = CType(Me.Table,ODPIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPI.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCur' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPI.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAtCard() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPI.NumAtCardColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAtCard' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.NumAtCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPI.ObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjType' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.ObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableODPI.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPI.VatSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSum' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.VatSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPI.VatSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSumFC' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.VatSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableODPI.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableODPI.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'ODPI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPI.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableODPI.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableODPI.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableODPI.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableODPI.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableODPI.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableODPI.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableODPI.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurNull()
            Me(Me.tableODPI.DocCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableODPI.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableODPI.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableODPI.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableODPI.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAtCardNull() As Boolean
            Return Me.IsNull(Me.tableODPI.NumAtCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAtCardNull()
            Me(Me.tableODPI.NumAtCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableODPI.ObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjTypeNull()
            Me(Me.tableODPI.ObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableODPI.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableODPI.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumNull() As Boolean
            Return Me.IsNull(Me.tableODPI.VatSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumNull()
            Me(Me.tableODPI.VatSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumFCNull() As Boolean
            Return Me.IsNull(Me.tableODPI.VatSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumFCNull()
            Me(Me.tableODPI.VatSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableODPI.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableODPI.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableODPI.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableODPI.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ODPORow
        Inherits Global.System.Data.DataRow
        
        Private tableODPO As ODPODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableODPO = CType(Me.Table,ODPODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPO.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCur' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPO.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAtCard() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPO.NumAtCardColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAtCard' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.NumAtCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableODPO.ObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjType' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.ObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableODPO.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPO.VatSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSum' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.VatSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableODPO.VatSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSumFC' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.VatSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableODPO.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableODPO.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'ODPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODPO.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableODPO.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableODPO.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableODPO.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableODPO.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableODPO.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableODPO.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableODPO.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurNull()
            Me(Me.tableODPO.DocCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableODPO.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableODPO.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableODPO.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableODPO.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAtCardNull() As Boolean
            Return Me.IsNull(Me.tableODPO.NumAtCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAtCardNull()
            Me(Me.tableODPO.NumAtCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableODPO.ObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjTypeNull()
            Me(Me.tableODPO.ObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableODPO.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableODPO.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumNull() As Boolean
            Return Me.IsNull(Me.tableODPO.VatSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumNull()
            Me(Me.tableODPO.VatSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumFCNull() As Boolean
            Return Me.IsNull(Me.tableODPO.VatSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumFCNull()
            Me(Me.tableODPO.VatSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableODPO.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableODPO.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableODPO.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableODPO.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NNM1Row
        Inherits Global.System.Data.DataRow
        
        Private tableNNM1 As NNM1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNNM1 = CType(Me.Table,NNM1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNNM1.ObjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectCode' in table 'NNM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNNM1.ObjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNNM1.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'NNM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNNM1.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeginStr() As String
            Get
                Try 
                    Return CType(Me(Me.tableNNM1.BeginStrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BeginStr' in table 'NNM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNNM1.BeginStrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNNM1.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NNM1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNNM1.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableNNM1.ObjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectCodeNull()
            Me(Me.tableNNM1.ObjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableNNM1.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableNNM1.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeginStrNull() As Boolean
            Return Me.IsNull(Me.tableNNM1.BeginStrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeginStrNull()
            Me(Me.tableNNM1.BeginStrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNNM1.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNNM1.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class __NCM_IMAGERow
        Inherits Global.System.Data.DataRow
        
        Private _table_NCM_IMAGE As __NCM_IMAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me._table_NCM_IMAGE = CType(Me.Table,__NCM_IMAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FLAG() As Integer
            Get
                Try 
                    Return CType(Me(Me._table_NCM_IMAGE.FLAGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FLAG' in table '@NCM_IMAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._table_NCM_IMAGE.FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SRNO() As Integer
            Get
                Try 
                    Return CType(Me(Me._table_NCM_IMAGE.SRNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SRNO' in table '@NCM_IMAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._table_NCM_IMAGE.SRNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFLAGNull() As Boolean
            Return Me.IsNull(Me._table_NCM_IMAGE.FLAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFLAGNull()
            Me(Me._table_NCM_IMAGE.FLAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSRNONull() As Boolean
            Return Me.IsNull(Me._table_NCM_IMAGE.SRNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSRNONull()
            Me(Me._table_NCM_IMAGE.SRNOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OPDFRow
        Inherits Global.System.Data.DataRow
        
        Private tableOPDF As OPDFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOPDF = CType(Me.Table,OPDFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BcgSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.BcgSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BcgSum' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.BcgSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BcgSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.BcgSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BcgSumFC' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.BcgSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.CardNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardName' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.CardNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.CashAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashAcct' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.CashAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.CashSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashSum' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.CashSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.CashSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashSumFC' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.CashSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CounterRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.CounterRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterRef' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.CounterRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCurr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocCurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCurr' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocCurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.Ref1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref1' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.Ref1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.Ref2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref2' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.Ref2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesStr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.SeriesStrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesStr' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.SeriesStrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.TransIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransId' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.TransIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.TrsfrAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrAcct' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.TrsfrAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.TrsfrDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrDate' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.TrsfrDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.TrsfrRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrRef' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.TrsfrRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.TrsfrSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrSum' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.TrsfrSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.TrsfrSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrSumFC' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.TrsfrSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiffCurr() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.DiffCurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiffCurr' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.DiffCurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrjCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.PrjCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrjCode' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.PrjCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JrnlMemo() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.JrnlMemoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JrnlMemo' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.JrnlMemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPerson() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPDF.ContactPersonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPerson' in table 'OPDF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPDF.ContactPersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableOPDF.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBcgSumNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.BcgSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBcgSumNull()
            Me(Me.tableOPDF.BcgSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBcgSumFCNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.BcgSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBcgSumFCNull()
            Me(Me.tableOPDF.BcgSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableOPDF.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardNameNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.CardNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardNameNull()
            Me(Me.tableOPDF.CardNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashAcctNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.CashAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashAcctNull()
            Me(Me.tableOPDF.CashAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashSumNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.CashSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashSumNull()
            Me(Me.tableOPDF.CashSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashSumFCNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.CashSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashSumFCNull()
            Me(Me.tableOPDF.CashSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableOPDF.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterRefNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.CounterRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterRefNull()
            Me(Me.tableOPDF.CounterRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurrNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocCurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurrNull()
            Me(Me.tableOPDF.DocCurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableOPDF.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableOPDF.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableOPDF.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableOPDF.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableOPDF.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableOPDF.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableOPDF.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableOPDF.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef1Null() As Boolean
            Return Me.IsNull(Me.tableOPDF.Ref1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef1Null()
            Me(Me.tableOPDF.Ref1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef2Null() As Boolean
            Return Me.IsNull(Me.tableOPDF.Ref2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef2Null()
            Me(Me.tableOPDF.Ref2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableOPDF.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesStrNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.SeriesStrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesStrNull()
            Me(Me.tableOPDF.SeriesStrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableOPDF.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransIdNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.TransIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransIdNull()
            Me(Me.tableOPDF.TransIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrAcctNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.TrsfrAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrAcctNull()
            Me(Me.tableOPDF.TrsfrAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrDateNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.TrsfrDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrDateNull()
            Me(Me.tableOPDF.TrsfrDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrRefNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.TrsfrRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrRefNull()
            Me(Me.tableOPDF.TrsfrRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrSumNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.TrsfrSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrSumNull()
            Me(Me.tableOPDF.TrsfrSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrSumFCNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.TrsfrSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrSumFCNull()
            Me(Me.tableOPDF.TrsfrSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableOPDF.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiffCurrNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.DiffCurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiffCurrNull()
            Me(Me.tableOPDF.DiffCurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrjCodeNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.PrjCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrjCodeNull()
            Me(Me.tableOPDF.PrjCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJrnlMemoNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.JrnlMemoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJrnlMemoNull()
            Me(Me.tableOPDF.JrnlMemoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPersonNull() As Boolean
            Return Me.IsNull(Me.tableOPDF.ContactPersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPersonNull()
            Me(Me.tableOPDF.ContactPersonColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PDF1Row
        Inherits Global.System.Data.DataRow
        
        Private tablePDF1 As PDF1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePDF1 = CType(Me.Table,PDF1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctNum() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.AcctNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctNum' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.AcctNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BankCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.BankCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BankCode' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.BankCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.CheckNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckNum' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.CheckNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.CheckSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckSum' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.CheckSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Detais() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.DetaisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Detais' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.DetaisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.DueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DueDate' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.DueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePDF1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'PDF1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctNumNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.AcctNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctNumNull()
            Me(Me.tablePDF1.AcctNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBankCodeNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.BankCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBankCodeNull()
            Me(Me.tablePDF1.BankCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckNumNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.CheckNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckNumNull()
            Me(Me.tablePDF1.CheckNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.CheckSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckSumNull()
            Me(Me.tablePDF1.CheckSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyNull()
            Me(Me.tablePDF1.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetaisNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.DetaisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetaisNull()
            Me(Me.tablePDF1.DetaisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tablePDF1.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.DueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDueDateNull()
            Me(Me.tablePDF1.DueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tablePDF1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tablePDF1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PDF4Row
        Inherits Global.System.Data.DataRow
        
        Private tablePDF4 As PDF4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePDF4 = CType(Me.Table,PDF4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.AcctCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctCode' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.AcctCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.AcctNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctName' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.AcctNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DesCrip() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.DesCripColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descrip' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.DesCripColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrossAmnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.GrossAmntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrossAmnt' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.GrossAmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrssAmntFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.GrssAmntFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrssAmntFC' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.GrssAmntFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatAmnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.VatAmntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatAmnt' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.VatAmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatAmntFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.VatAmntFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatAmntFC' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.VatAmntFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatPrcnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.VatPrcntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatPrcnt' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.VatPrcntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.OcrCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.OcrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.OcrCode2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode2' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.OcrCode2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode3() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.OcrCode3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode3' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.OcrCode3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode4() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.OcrCode4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode4' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.OcrCode4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode5() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF4.OcrCode5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode5' in table 'PDF4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF4.OcrCode5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctCodeNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.AcctCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctCodeNull()
            Me(Me.tablePDF4.AcctCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctNameNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.AcctNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctNameNull()
            Me(Me.tablePDF4.AcctNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesCripNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.DesCripColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesCripNull()
            Me(Me.tablePDF4.DesCripColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tablePDF4.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrossAmntNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.GrossAmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrossAmntNull()
            Me(Me.tablePDF4.GrossAmntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrssAmntFCNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.GrssAmntFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrssAmntFCNull()
            Me(Me.tablePDF4.GrssAmntFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatAmntNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.VatAmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatAmntNull()
            Me(Me.tablePDF4.VatAmntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatAmntFCNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.VatAmntFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatAmntFCNull()
            Me(Me.tablePDF4.VatAmntFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatPrcntNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.VatPrcntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatPrcntNull()
            Me(Me.tablePDF4.VatPrcntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tablePDF4.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCodeNull() As Boolean
            Return Me.IsNull(Me.tablePDF4.OcrCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCodeNull()
            Me(Me.tablePDF4.OcrCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode2Null() As Boolean
            Return Me.IsNull(Me.tablePDF4.OcrCode2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode2Null()
            Me(Me.tablePDF4.OcrCode2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode3Null() As Boolean
            Return Me.IsNull(Me.tablePDF4.OcrCode3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode3Null()
            Me(Me.tablePDF4.OcrCode3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode4Null() As Boolean
            Return Me.IsNull(Me.tablePDF4.OcrCode4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode4Null()
            Me(Me.tablePDF4.OcrCode4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode5Null() As Boolean
            Return Me.IsNull(Me.tablePDF4.OcrCode5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode5Null()
            Me(Me.tablePDF4.OcrCode5Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PDF2Row
        Inherits Global.System.Data.DataRow
        
        Private tablePDF2 As PDF2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePDF2 = CType(Me.Table,PDF2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AppliedFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.AppliedFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AppliedFC' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.AppliedFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocLine() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.DocLineColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocLine' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.DocLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceId() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.InvoiceIdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceId' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.InvoiceIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvType() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.InvTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvType' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.InvTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumApplied() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.SumAppliedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumApplied' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.SumAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vatApplied() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.vatAppliedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatApplied' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.vatAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vatAppldFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.vatAppldFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatAppldFC' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.vatAppldFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePDF2.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'PDF2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF2.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppliedFCNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.AppliedFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppliedFCNull()
            Me(Me.tablePDF2.AppliedFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tablePDF2.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocLineNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.DocLineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocLineNull()
            Me(Me.tablePDF2.DocLineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tablePDF2.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tablePDF2.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceIdNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.InvoiceIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceIdNull()
            Me(Me.tablePDF2.InvoiceIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvTypeNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.InvTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvTypeNull()
            Me(Me.tablePDF2.InvTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumAppliedNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.SumAppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumAppliedNull()
            Me(Me.tablePDF2.SumAppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvatAppliedNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.vatAppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvatAppliedNull()
            Me(Me.tablePDF2.vatAppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvatAppldFCNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.vatAppldFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvatAppldFCNull()
            Me(Me.tablePDF2.vatAppldFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tablePDF2.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tablePDF2.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PDF3Row
        Inherits Global.System.Data.DataRow
        
        Private tablePDF3 As PDF3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePDF3 = CType(Me.Table,PDF3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.CreditAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditAcct' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.CreditAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditCard() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.CreditCardColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditCard' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.CreditCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditCur() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.CreditCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditCur' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.CreditCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.CreditRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditRate' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.CreditRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.CreditSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditSum' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.CreditSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstDue() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.FirstDueColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstDue' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.FirstDueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.FirstSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstSum' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.FirstSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherNum() As String
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.VoucherNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherNum' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.VoucherNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePDF3.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'PDF3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePDF3.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditAcctNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.CreditAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditAcctNull()
            Me(Me.tablePDF3.CreditAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditCardNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.CreditCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditCardNull()
            Me(Me.tablePDF3.CreditCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditCurNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.CreditCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditCurNull()
            Me(Me.tablePDF3.CreditCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditRateNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.CreditRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditRateNull()
            Me(Me.tablePDF3.CreditRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditSumNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.CreditSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditSumNull()
            Me(Me.tablePDF3.CreditSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tablePDF3.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstDueNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.FirstDueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstDueNull()
            Me(Me.tablePDF3.FirstDueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstSumNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.FirstSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstSumNull()
            Me(Me.tablePDF3.FirstSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherNumNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.VoucherNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherNumNull()
            Me(Me.tablePDF3.VoucherNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tablePDF3.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tablePDF3.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NCM_VIEW_DRAFTPV_INVOICERow
        Inherits Global.System.Data.DataRow
        
        Private tableNCM_VIEW_DRAFTPV_INVOICE As NCM_VIEW_DRAFTPV_INVOICEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNCM_VIEW_DRAFTPV_INVOICE = CType(Me.Table,NCM_VIEW_DRAFTPV_INVOICEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentDocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentDocType' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentDocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentDocEntry' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentDocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentDocNum' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvType() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.InvTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvType' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.InvTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceId() As Long
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.InvoiceIdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceId' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.InvoiceIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumApplied() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.SumAppliedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumApplied' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.SumAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AppliedFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.AppliedFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AppliedFC' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.AppliedFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentDocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentDocRate' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentObjType' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vatApplied() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.vatAppliedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatApplied' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.vatAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vatAppldFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.vatAppldFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatAppldFC' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.vatAppldFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VisOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisOrder' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VisOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dscription() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DscriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dscription' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DscriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.LineTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineTotal' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.LineTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalFrgn() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.TotalFrgnColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalFrgn' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.TotalFrgnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCur' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAtCard() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.NumAtCardColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAtCard' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.NumAtCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjType() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.ObjTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjType' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.ObjTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VatSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSum' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VatSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VatSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatSumFC' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VatSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'NCM_VIEW_DRAFTPV_INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentDocTypeNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentDocEntryNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentDocNumNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentDocNumNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvTypeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.InvTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvTypeNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.InvTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceIdNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.InvoiceIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceIdNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.InvoiceIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumAppliedNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.SumAppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumAppliedNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.SumAppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppliedFCNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.AppliedFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppliedFCNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.AppliedFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentDocRateNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentDocRateNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentDocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentObjTypeNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PaymentObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvatAppliedNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.vatAppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvatAppliedNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.vatAppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvatAppldFCNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.vatAppldFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvatAppldFCNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.vatAppldFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisOrderNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VisOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisOrderNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VisOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDscriptionNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DscriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDscriptionNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DscriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineTotalNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.LineTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineTotalNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.LineTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalFrgnNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.TotalFrgnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalFrgnNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.TotalFrgnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAtCardNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.NumAtCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAtCardNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.NumAtCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjTypeNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.ObjTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjTypeNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.ObjTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VatSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VatSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatSumFCNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VatSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatSumFCNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.VatSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableNCM_VIEW_DRAFTPV_INVOICE.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableNCM_VIEW_DRAFTPV_INVOICE.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORCTRow
        Inherits Global.System.Data.DataRow
        
        Private tableORCT As ORCTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORCT = CType(Me.Table,ORCTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BcgSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.BcgSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BcgSum' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.BcgSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BcgSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.BcgSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BcgSumFC' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.BcgSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardName() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.CardNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardName' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.CardNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.CashAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashAcct' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.CashAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.CashSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashSum' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.CashSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.CashSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashSumFC' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.CashSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CounterRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.CounterRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterRef' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.CounterRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocCurr() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocCurrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocCurr' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocCurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDueDate' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotal' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTotalFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocTotalFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTotalFC' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocTotalFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.Ref1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref1' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.Ref1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.Ref2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref2' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.Ref2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Series() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORCT.SeriesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Series' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.SeriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesStr() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.SeriesStrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesStr' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.SeriesStrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORCT.TaxDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxDate' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.TaxDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORCT.TransIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransId' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.TransIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.TrsfrAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrAcct' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.TrsfrAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORCT.TrsfrDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrDate' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.TrsfrDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.TrsfrRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrRef' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.TrsfrRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.TrsfrSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrSum' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.TrsfrSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrsfrSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.TrsfrSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrsfrSumFC' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.TrsfrSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORCT.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserSign() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORCT.UserSignColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserSign' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.UserSignColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayToCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.PayToCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayToCode' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.PayToCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoDocSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.NoDocSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoDocSum' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.NoDocSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoDocSumFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORCT.NoDocSumFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoDocSumFC' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.NoDocSumFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrjCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.PrjCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrjCode' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.PrjCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JrnlMemo() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.JrnlMemoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JrnlMemo' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.JrnlMemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPerson() As String
            Get
                Try 
                    Return CType(Me(Me.tableORCT.ContactPersonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPerson' in table 'ORCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORCT.ContactPersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableORCT.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableORCT.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBcgSumNull() As Boolean
            Return Me.IsNull(Me.tableORCT.BcgSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBcgSumNull()
            Me(Me.tableORCT.BcgSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBcgSumFCNull() As Boolean
            Return Me.IsNull(Me.tableORCT.BcgSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBcgSumFCNull()
            Me(Me.tableORCT.BcgSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableORCT.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableORCT.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardNameNull() As Boolean
            Return Me.IsNull(Me.tableORCT.CardNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardNameNull()
            Me(Me.tableORCT.CardNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashAcctNull() As Boolean
            Return Me.IsNull(Me.tableORCT.CashAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashAcctNull()
            Me(Me.tableORCT.CashAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashSumNull() As Boolean
            Return Me.IsNull(Me.tableORCT.CashSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashSumNull()
            Me(Me.tableORCT.CashSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashSumFCNull() As Boolean
            Return Me.IsNull(Me.tableORCT.CashSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashSumFCNull()
            Me(Me.tableORCT.CashSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableORCT.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentsNull()
            Me(Me.tableORCT.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterRefNull() As Boolean
            Return Me.IsNull(Me.tableORCT.CounterRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterRefNull()
            Me(Me.tableORCT.CounterRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocCurrNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocCurrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocCurrNull()
            Me(Me.tableORCT.DocCurrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableORCT.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDueDateNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDueDateNull()
            Me(Me.tableORCT.DocDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableORCT.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableORCT.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableORCT.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalNull()
            Me(Me.tableORCT.DocTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTotalFCNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocTotalFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTotalFCNull()
            Me(Me.tableORCT.DocTotalFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableORCT.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableORCT.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef1Null() As Boolean
            Return Me.IsNull(Me.tableORCT.Ref1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef1Null()
            Me(Me.tableORCT.Ref1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef2Null() As Boolean
            Return Me.IsNull(Me.tableORCT.Ref2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef2Null()
            Me(Me.tableORCT.Ref2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNull() As Boolean
            Return Me.IsNull(Me.tableORCT.SeriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNull()
            Me(Me.tableORCT.SeriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesStrNull() As Boolean
            Return Me.IsNull(Me.tableORCT.SeriesStrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesStrNull()
            Me(Me.tableORCT.SeriesStrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxDateNull() As Boolean
            Return Me.IsNull(Me.tableORCT.TaxDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxDateNull()
            Me(Me.tableORCT.TaxDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransIdNull() As Boolean
            Return Me.IsNull(Me.tableORCT.TransIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransIdNull()
            Me(Me.tableORCT.TransIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrAcctNull() As Boolean
            Return Me.IsNull(Me.tableORCT.TrsfrAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrAcctNull()
            Me(Me.tableORCT.TrsfrAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrDateNull() As Boolean
            Return Me.IsNull(Me.tableORCT.TrsfrDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrDateNull()
            Me(Me.tableORCT.TrsfrDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrRefNull() As Boolean
            Return Me.IsNull(Me.tableORCT.TrsfrRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrRefNull()
            Me(Me.tableORCT.TrsfrRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrSumNull() As Boolean
            Return Me.IsNull(Me.tableORCT.TrsfrSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrSumNull()
            Me(Me.tableORCT.TrsfrSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrsfrSumFCNull() As Boolean
            Return Me.IsNull(Me.tableORCT.TrsfrSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrsfrSumFCNull()
            Me(Me.tableORCT.TrsfrSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableORCT.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableORCT.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserSignNull() As Boolean
            Return Me.IsNull(Me.tableORCT.UserSignColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserSignNull()
            Me(Me.tableORCT.UserSignColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayToCodeNull() As Boolean
            Return Me.IsNull(Me.tableORCT.PayToCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayToCodeNull()
            Me(Me.tableORCT.PayToCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoDocSumNull() As Boolean
            Return Me.IsNull(Me.tableORCT.NoDocSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoDocSumNull()
            Me(Me.tableORCT.NoDocSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoDocSumFCNull() As Boolean
            Return Me.IsNull(Me.tableORCT.NoDocSumFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoDocSumFCNull()
            Me(Me.tableORCT.NoDocSumFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrjCodeNull() As Boolean
            Return Me.IsNull(Me.tableORCT.PrjCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrjCodeNull()
            Me(Me.tableORCT.PrjCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJrnlMemoNull() As Boolean
            Return Me.IsNull(Me.tableORCT.JrnlMemoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJrnlMemoNull()
            Me(Me.tableORCT.JrnlMemoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPersonNull() As Boolean
            Return Me.IsNull(Me.tableORCT.ContactPersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPersonNull()
            Me(Me.tableORCT.ContactPersonColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OUSRRow
        Inherits Global.System.Data.DataRow
        
        Private tableOUSR As OUSRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOUSR = CType(Me.Table,OUSRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTERNAL_K() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOUSR.INTERNAL_KColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INTERNAL_K' in table 'OUSR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOUSR.INTERNAL_KColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableOUSR.U_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_NAME' in table 'OUSR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOUSR.U_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTERNAL_KNull() As Boolean
            Return Me.IsNull(Me.tableOUSR.INTERNAL_KColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTERNAL_KNull()
            Me(Me.tableOUSR.INTERNAL_KColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_NAMENull() As Boolean
            Return Me.IsNull(Me.tableOUSR.U_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_NAMENull()
            Me(Me.tableOUSR.U_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RCT2Row
        Inherits Global.System.Data.DataRow
        
        Private tableRCT2 As RCT2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRCT2 = CType(Me.Table,RCT2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AppliedFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.AppliedFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AppliedFC' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.AppliedFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocEntry() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.DocEntryColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocEntry' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.DocEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocLine() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.DocLineColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocLine' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.DocLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.DocRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocRate' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.DocRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceId() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.InvoiceIdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceId' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.InvoiceIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.InvTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvType' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.InvTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumApplied() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.SumAppliedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumApplied' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.SumAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vatApplied() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.vatAppliedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatApplied' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.vatAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vatAppldFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.vatAppldFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatAppldFC' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.vatAppldFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRCT2.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'RCT2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT2.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppliedFCNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.AppliedFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppliedFCNull()
            Me(Me.tableRCT2.AppliedFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocEntryNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.DocEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocEntryNull()
            Me(Me.tableRCT2.DocEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocLineNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.DocLineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocLineNull()
            Me(Me.tableRCT2.DocLineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableRCT2.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocRateNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.DocRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocRateNull()
            Me(Me.tableRCT2.DocRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceIdNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.InvoiceIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceIdNull()
            Me(Me.tableRCT2.InvoiceIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvTypeNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.InvTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvTypeNull()
            Me(Me.tableRCT2.InvTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumAppliedNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.SumAppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumAppliedNull()
            Me(Me.tableRCT2.SumAppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvatAppliedNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.vatAppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvatAppliedNull()
            Me(Me.tableRCT2.vatAppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvatAppldFCNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.vatAppldFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvatAppldFCNull()
            Me(Me.tableRCT2.vatAppldFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableRCT2.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableRCT2.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RCT3Row
        Inherits Global.System.Data.DataRow
        
        Private tableRCT3 As RCT3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRCT3 = CType(Me.Table,RCT3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditAcct() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.CreditAcctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditAcct' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.CreditAcctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditCard() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.CreditCardColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditCard' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.CreditCardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.CreditCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditCur' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.CreditCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.CreditRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditRate' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.CreditRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.CreditSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditSum' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.CreditSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstDue() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.FirstDueColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstDue' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.FirstDueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.FirstSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstSum' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.FirstSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.VoucherNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherNum' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.VoucherNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRCT3.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'RCT3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT3.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditAcctNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.CreditAcctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditAcctNull()
            Me(Me.tableRCT3.CreditAcctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditCardNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.CreditCardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditCardNull()
            Me(Me.tableRCT3.CreditCardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditCurNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.CreditCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditCurNull()
            Me(Me.tableRCT3.CreditCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditRateNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.CreditRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditRateNull()
            Me(Me.tableRCT3.CreditRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditSumNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.CreditSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditSumNull()
            Me(Me.tableRCT3.CreditSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableRCT3.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstDueNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.FirstDueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstDueNull()
            Me(Me.tableRCT3.FirstDueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstSumNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.FirstSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstSumNull()
            Me(Me.tableRCT3.FirstSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherNumNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.VoucherNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherNumNull()
            Me(Me.tableRCT3.VoucherNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableRCT3.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableRCT3.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RCT4Row
        Inherits Global.System.Data.DataRow
        
        Private tableRCT4 As RCT4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRCT4 = CType(Me.Table,RCT4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.AcctCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctCode' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.AcctCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.AcctNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctName' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.AcctNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DesCrip() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.DesCripColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descrip' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.DesCripColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrossAmnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.GrossAmntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrossAmnt' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.GrossAmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrssAmntFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.GrssAmntFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrssAmntFC' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.GrssAmntFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatAmnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.VatAmntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatAmnt' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.VatAmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatAmntFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.VatAmntFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatAmntFC' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.VatAmntFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VatPrcnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.VatPrcntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VatPrcnt' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.VatPrcntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.OcrCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.OcrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.OcrCode2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode2' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.OcrCode2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode3() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.OcrCode3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode3' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.OcrCode3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode4() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.OcrCode4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode4' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.OcrCode4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcrCode5() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT4.OcrCode5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcrCode5' in table 'RCT4' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT4.OcrCode5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctCodeNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.AcctCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctCodeNull()
            Me(Me.tableRCT4.AcctCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctNameNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.AcctNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctNameNull()
            Me(Me.tableRCT4.AcctNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesCripNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.DesCripColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesCripNull()
            Me(Me.tableRCT4.DesCripColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableRCT4.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrossAmntNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.GrossAmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrossAmntNull()
            Me(Me.tableRCT4.GrossAmntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrssAmntFCNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.GrssAmntFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrssAmntFCNull()
            Me(Me.tableRCT4.GrssAmntFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatAmntNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.VatAmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatAmntNull()
            Me(Me.tableRCT4.VatAmntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatAmntFCNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.VatAmntFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatAmntFCNull()
            Me(Me.tableRCT4.VatAmntFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVatPrcntNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.VatPrcntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVatPrcntNull()
            Me(Me.tableRCT4.VatPrcntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableRCT4.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCodeNull() As Boolean
            Return Me.IsNull(Me.tableRCT4.OcrCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCodeNull()
            Me(Me.tableRCT4.OcrCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode2Null() As Boolean
            Return Me.IsNull(Me.tableRCT4.OcrCode2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode2Null()
            Me(Me.tableRCT4.OcrCode2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode3Null() As Boolean
            Return Me.IsNull(Me.tableRCT4.OcrCode3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode3Null()
            Me(Me.tableRCT4.OcrCode3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode4Null() As Boolean
            Return Me.IsNull(Me.tableRCT4.OcrCode4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode4Null()
            Me(Me.tableRCT4.OcrCode4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcrCode5Null() As Boolean
            Return Me.IsNull(Me.tableRCT4.OcrCode5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcrCode5Null()
            Me(Me.tableRCT4.OcrCode5Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RCT1Row
        Inherits Global.System.Data.DataRow
        
        Private tableRCT1 As RCT1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRCT1 = CType(Me.Table,RCT1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.AcctNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctNum' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.AcctNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BankCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.BankCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BankCode' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.BankCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.CheckNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckNum' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.CheckNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckSum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.CheckSumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckSum' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.CheckSumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Detais() As String
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.DetaisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Detais' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.DetaisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.DocNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.DueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DueDate' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.DueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogInstanc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRCT1.LogInstancColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogInstanc' in table 'RCT1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRCT1.LogInstancColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctNumNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.AcctNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctNumNull()
            Me(Me.tableRCT1.AcctNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBankCodeNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.BankCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBankCodeNull()
            Me(Me.tableRCT1.BankCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckNumNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.CheckNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckNumNull()
            Me(Me.tableRCT1.CheckNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.CheckSumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckSumNull()
            Me(Me.tableRCT1.CheckSumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyNull()
            Me(Me.tableRCT1.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetaisNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.DetaisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetaisNull()
            Me(Me.tableRCT1.DetaisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableRCT1.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.DueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDueDateNull()
            Me(Me.tableRCT1.DueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogInstancNull() As Boolean
            Return Me.IsNull(Me.tableRCT1.LogInstancColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogInstancNull()
            Me(Me.tableRCT1.LogInstancColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OVPMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OVPMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OVPMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OVPMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ADM1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ADM1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ADM1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ADM1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OADMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OADMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OADMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OADMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VPM1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VPM1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VPM1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VPM1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VPM4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VPM4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VPM4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VPM4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VPM3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VPM3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VPM3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VPM3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VPM2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VPM2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VPM2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VPM2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_NNM1_1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_NNM1_1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_NNM1_1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_NNM1_1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_NNM1_2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_NNM1_2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_NNM1_2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_NNM1_2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_NNM1_3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_NNM1_3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_NNM1_3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_NNM1_3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_NNM1_4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_NNM1_4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_NNM1_4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_NNM1_4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_NNM1_5RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_NNM1_5Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_NNM1_5Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_NNM1_5Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_NNM1_6RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_NNM1_6Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_NNM1_6Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_NNM1_6Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_NNM1_7RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_NNM1_7Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_NNM1_7Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_NNM1_7Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OJDTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OJDTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OJDTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OJDTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INV1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INV1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INV1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INV1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RIN1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RIN1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RIN1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RIN1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PCH1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PCH1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PCH1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PCH1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DPO1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DPO1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DPO1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DPO1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RPC1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RPC1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RPC1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RPC1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DPI1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DPI1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DPI1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DPI1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OINVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OINVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OINVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OINVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORPCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORPCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORPCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORPCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORINRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORINRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORINRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORINRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OPCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OPCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OPCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OPCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ODPIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ODPIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ODPIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ODPIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ODPORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ODPORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ODPORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ODPORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NNM1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NNM1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NNM1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NNM1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class __NCM_IMAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As __NCM_IMAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As __NCM_IMAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As __NCM_IMAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OPDFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OPDFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OPDFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OPDFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PDF1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PDF1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PDF1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PDF1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PDF4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PDF4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PDF4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PDF4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PDF2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PDF2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PDF2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PDF2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PDF3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PDF3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PDF3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PDF3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NCM_VIEW_DRAFTPV_INVOICERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NCM_VIEW_DRAFTPV_INVOICERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NCM_VIEW_DRAFTPV_INVOICERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NCM_VIEW_DRAFTPV_INVOICERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORCTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORCTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORCTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORCTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OUSRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OUSRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OUSRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OUSRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RCT2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RCT2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RCT2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RCT2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RCT3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RCT3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RCT3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RCT3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RCT4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RCT4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RCT4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RCT4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RCT1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RCT1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RCT1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RCT1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
