'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("XML_GLL"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class XML_GLL
    Inherits Global.System.Data.DataSet
    
    Private tableCommand As CommandDataTable
    
    Private _tableNCM_BANKRECON_1 As _NCM_BANKRECON_1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Command")) Is Nothing) Then
                MyBase.Tables.Add(New CommandDataTable(ds.Tables("Command")))
            End If
            If (Not (ds.Tables("NCM_BANKRECON;1")) Is Nothing) Then
                MyBase.Tables.Add(New _NCM_BANKRECON_1DataTable(ds.Tables("NCM_BANKRECON;1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Command() As CommandDataTable
        Get
            Return Me.tableCommand
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _NCM_BANKRECON_1() As _NCM_BANKRECON_1DataTable
        Get
            Return Me._tableNCM_BANKRECON_1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As XML_GLL = CType(MyBase.Clone,XML_GLL)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Command")) Is Nothing) Then
                MyBase.Tables.Add(New CommandDataTable(ds.Tables("Command")))
            End If
            If (Not (ds.Tables("NCM_BANKRECON;1")) Is Nothing) Then
                MyBase.Tables.Add(New _NCM_BANKRECON_1DataTable(ds.Tables("NCM_BANKRECON;1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCommand = CType(MyBase.Tables("Command"),CommandDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCommand) Is Nothing) Then
                Me.tableCommand.InitVars
            End If
        End If
        Me._tableNCM_BANKRECON_1 = CType(MyBase.Tables("NCM_BANKRECON;1"),_NCM_BANKRECON_1DataTable)
        If (initTable = true) Then
            If (Not (Me._tableNCM_BANKRECON_1) Is Nothing) Then
                Me._tableNCM_BANKRECON_1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "XML_GLL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/GST_Report_XML.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCommand = New CommandDataTable
        MyBase.Tables.Add(Me.tableCommand)
        Me._tableNCM_BANKRECON_1 = New _NCM_BANKRECON_1DataTable
        MyBase.Tables.Add(Me._tableNCM_BANKRECON_1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCommand() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_NCM_BANKRECON_1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As XML_GLL = New XML_GLL
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CommandRowChangeEventHandler(ByVal sender As Object, ByVal e As CommandRowChangeEvent)
    
    Public Delegate Sub _NCM_BANKRECON_1RowChangeEventHandler(ByVal sender As Object, ByVal e As _NCM_BANKRECON_1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CommandDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDim1 As Global.System.Data.DataColumn
        
        Private columnDim2 As Global.System.Data.DataColumn
        
        Private columnDim3 As Global.System.Data.DataColumn
        
        Private columnDim4 As Global.System.Data.DataColumn
        
        Private columnDim5 As Global.System.Data.DataColumn
        
        Private columnDimDesc1 As Global.System.Data.DataColumn
        
        Private columnDimDesc2 As Global.System.Data.DataColumn
        
        Private columnDimDesc3 As Global.System.Data.DataColumn
        
        Private columnDimDesc4 As Global.System.Data.DataColumn
        
        Private columnDimDesc5 As Global.System.Data.DataColumn
        
        Private columnRef1 As Global.System.Data.DataColumn
        
        Private columnRef2 As Global.System.Data.DataColumn
        
        Private columnRef3 As Global.System.Data.DataColumn
        
        Private columnFinancialPeriodName As Global.System.Data.DataColumn
        
        Private columnGLAccount As Global.System.Data.DataColumn
        
        Private columnAcctName As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnRefDate As Global.System.Data.DataColumn
        
        Private columnLineMemo As Global.System.Data.DataColumn
        
        Private columnProjectCode As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnDocTypeDesc As Global.System.Data.DataColumn
        
        Private columnSeriesName As Global.System.Data.DataColumn
        
        Private columnAmountLC As Global.System.Data.DataColumn
        
        Private columnAmountFC As Global.System.Data.DataColumn
        
        Private columnUnitPriceLC As Global.System.Data.DataColumn
        
        Private columnUnitPriceFC As Global.System.Data.DataColumn
        
        Private columnPaymentNumber As Global.System.Data.DataColumn
        
        Private columnPaymentRef As Global.System.Data.DataColumn
        
        Private columnPaymentDate As Global.System.Data.DataColumn
        
        Private columnCardCode As Global.System.Data.DataColumn
        
        Private columnCardName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Command"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dim1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDim1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dim2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDim2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dim3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDim3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dim4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDim4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dim5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDim5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DimDesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDimDesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DimDesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDimDesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DimDesc3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDimDesc3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DimDesc4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDimDesc4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DimDesc5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDimDesc5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinancialPeriodNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinancialPeriodName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLAccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineMemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineMemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocTypeDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeriesNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeriesName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountLCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountLC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceLCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPriceLC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPriceFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CommandRow
            Get
                Return CType(Me.Rows(index),CommandRow)
            End Get
        End Property
        
        Public Event CommandRowChanging As CommandRowChangeEventHandler
        
        Public Event CommandRowChanged As CommandRowChangeEventHandler
        
        Public Event CommandRowDeleting As CommandRowChangeEventHandler
        
        Public Event CommandRowDeleted As CommandRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCommandRow(ByVal row As CommandRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCommandRow( _
                    ByVal Dim1 As String,  _
                    ByVal Dim2 As String,  _
                    ByVal Dim3 As String,  _
                    ByVal Dim4 As String,  _
                    ByVal Dim5 As String,  _
                    ByVal DimDesc1 As String,  _
                    ByVal DimDesc2 As String,  _
                    ByVal DimDesc3 As String,  _
                    ByVal DimDesc4 As String,  _
                    ByVal DimDesc5 As String,  _
                    ByVal Ref1 As String,  _
                    ByVal Ref2 As String,  _
                    ByVal Ref3 As String,  _
                    ByVal FinancialPeriodName As String,  _
                    ByVal GLAccount As String,  _
                    ByVal AcctName As String,  _
                    ByVal Number As Long,  _
                    ByVal RefDate As Date,  _
                    ByVal LineMemo As String,  _
                    ByVal ProjectCode As String,  _
                    ByVal DocNum As String,  _
                    ByVal DocTypeDesc As String,  _
                    ByVal SeriesName As String,  _
                    ByVal AmountLC As Decimal,  _
                    ByVal AmountFC As Decimal,  _
                    ByVal UnitPriceLC As Decimal,  _
                    ByVal UnitPriceFC As Decimal,  _
                    ByVal PaymentNumber As Integer,  _
                    ByVal PaymentRef As String,  _
                    ByVal PaymentDate As Date,  _
                    ByVal CardCode As String,  _
                    ByVal CardName As String) As CommandRow
            Dim rowCommandRow As CommandRow = CType(Me.NewRow,CommandRow)
            Dim columnValuesArray() As Object = New Object() {Dim1, Dim2, Dim3, Dim4, Dim5, DimDesc1, DimDesc2, DimDesc3, DimDesc4, DimDesc5, Ref1, Ref2, Ref3, FinancialPeriodName, GLAccount, AcctName, Number, RefDate, LineMemo, ProjectCode, DocNum, DocTypeDesc, SeriesName, AmountLC, AmountFC, UnitPriceLC, UnitPriceFC, PaymentNumber, PaymentRef, PaymentDate, CardCode, CardName}
            rowCommandRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCommandRow)
            Return rowCommandRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CommandDataTable = CType(MyBase.Clone,CommandDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CommandDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDim1 = MyBase.Columns("Dim1")
            Me.columnDim2 = MyBase.Columns("Dim2")
            Me.columnDim3 = MyBase.Columns("Dim3")
            Me.columnDim4 = MyBase.Columns("Dim4")
            Me.columnDim5 = MyBase.Columns("Dim5")
            Me.columnDimDesc1 = MyBase.Columns("DimDesc1")
            Me.columnDimDesc2 = MyBase.Columns("DimDesc2")
            Me.columnDimDesc3 = MyBase.Columns("DimDesc3")
            Me.columnDimDesc4 = MyBase.Columns("DimDesc4")
            Me.columnDimDesc5 = MyBase.Columns("DimDesc5")
            Me.columnRef1 = MyBase.Columns("Ref1")
            Me.columnRef2 = MyBase.Columns("Ref2")
            Me.columnRef3 = MyBase.Columns("Ref3")
            Me.columnFinancialPeriodName = MyBase.Columns("FinancialPeriodName")
            Me.columnGLAccount = MyBase.Columns("GLAccount")
            Me.columnAcctName = MyBase.Columns("AcctName")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnRefDate = MyBase.Columns("RefDate")
            Me.columnLineMemo = MyBase.Columns("LineMemo")
            Me.columnProjectCode = MyBase.Columns("ProjectCode")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnDocTypeDesc = MyBase.Columns("DocTypeDesc")
            Me.columnSeriesName = MyBase.Columns("SeriesName")
            Me.columnAmountLC = MyBase.Columns("AmountLC")
            Me.columnAmountFC = MyBase.Columns("AmountFC")
            Me.columnUnitPriceLC = MyBase.Columns("UnitPriceLC")
            Me.columnUnitPriceFC = MyBase.Columns("UnitPriceFC")
            Me.columnPaymentNumber = MyBase.Columns("PaymentNumber")
            Me.columnPaymentRef = MyBase.Columns("PaymentRef")
            Me.columnPaymentDate = MyBase.Columns("PaymentDate")
            Me.columnCardCode = MyBase.Columns("CardCode")
            Me.columnCardName = MyBase.Columns("CardName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDim1 = New Global.System.Data.DataColumn("Dim1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDim1)
            Me.columnDim2 = New Global.System.Data.DataColumn("Dim2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDim2)
            Me.columnDim3 = New Global.System.Data.DataColumn("Dim3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDim3)
            Me.columnDim4 = New Global.System.Data.DataColumn("Dim4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDim4)
            Me.columnDim5 = New Global.System.Data.DataColumn("Dim5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDim5)
            Me.columnDimDesc1 = New Global.System.Data.DataColumn("DimDesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDimDesc1)
            Me.columnDimDesc2 = New Global.System.Data.DataColumn("DimDesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDimDesc2)
            Me.columnDimDesc3 = New Global.System.Data.DataColumn("DimDesc3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDimDesc3)
            Me.columnDimDesc4 = New Global.System.Data.DataColumn("DimDesc4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDimDesc4)
            Me.columnDimDesc5 = New Global.System.Data.DataColumn("DimDesc5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDimDesc5)
            Me.columnRef1 = New Global.System.Data.DataColumn("Ref1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef1)
            Me.columnRef2 = New Global.System.Data.DataColumn("Ref2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef2)
            Me.columnRef3 = New Global.System.Data.DataColumn("Ref3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef3)
            Me.columnFinancialPeriodName = New Global.System.Data.DataColumn("FinancialPeriodName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinancialPeriodName)
            Me.columnGLAccount = New Global.System.Data.DataColumn("GLAccount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLAccount)
            Me.columnAcctName = New Global.System.Data.DataColumn("AcctName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctName)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnRefDate = New Global.System.Data.DataColumn("RefDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefDate)
            Me.columnLineMemo = New Global.System.Data.DataColumn("LineMemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineMemo)
            Me.columnProjectCode = New Global.System.Data.DataColumn("ProjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectCode)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnDocTypeDesc = New Global.System.Data.DataColumn("DocTypeDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocTypeDesc)
            Me.columnSeriesName = New Global.System.Data.DataColumn("SeriesName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeriesName)
            Me.columnAmountLC = New Global.System.Data.DataColumn("AmountLC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountLC)
            Me.columnAmountFC = New Global.System.Data.DataColumn("AmountFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountFC)
            Me.columnUnitPriceLC = New Global.System.Data.DataColumn("UnitPriceLC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPriceLC)
            Me.columnUnitPriceFC = New Global.System.Data.DataColumn("UnitPriceFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPriceFC)
            Me.columnPaymentNumber = New Global.System.Data.DataColumn("PaymentNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentNumber)
            Me.columnPaymentRef = New Global.System.Data.DataColumn("PaymentRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentRef)
            Me.columnPaymentDate = New Global.System.Data.DataColumn("PaymentDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentDate)
            Me.columnCardCode = New Global.System.Data.DataColumn("CardCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardCode)
            Me.columnCardName = New Global.System.Data.DataColumn("CardName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardName)
            Me.columnDim1.Caption = "Column1"
            Me.columnDim2.Caption = "Column1"
            Me.columnDim3.Caption = "Column1"
            Me.columnDim4.Caption = "Column1"
            Me.columnDim5.Caption = "Column1"
            Me.columnDimDesc1.Caption = "Column1"
            Me.columnDimDesc2.Caption = "Column1"
            Me.columnDimDesc3.Caption = "Column1"
            Me.columnDimDesc4.Caption = "Column1"
            Me.columnRef1.Caption = "DimDesc5"
            Me.columnRef2.Caption = "DimDesc5"
            Me.columnRef3.Caption = "DimDesc5"
            Me.columnFinancialPeriodName.Caption = "Ref"
            Me.columnGLAccount.Caption = "Ref"
            Me.columnAcctName.Caption = "Ref"
            Me.columnNumber.Caption = "Ref"
            Me.columnRefDate.Caption = "Ref"
            Me.columnLineMemo.Caption = "Ref"
            Me.columnProjectCode.Caption = "Ref"
            Me.columnDocNum.Caption = "Ref"
            Me.columnSeriesName.Caption = "Ref"
            Me.columnAmountLC.Caption = "AmountFC"
            Me.columnUnitPriceLC.Caption = "AmountFC"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCommandRow() As CommandRow
            Return CType(Me.NewRow,CommandRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CommandRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CommandRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CommandRowChangedEvent) Is Nothing) Then
                RaiseEvent CommandRowChanged(Me, New CommandRowChangeEvent(CType(e.Row,CommandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CommandRowChangingEvent) Is Nothing) Then
                RaiseEvent CommandRowChanging(Me, New CommandRowChangeEvent(CType(e.Row,CommandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CommandRowDeletedEvent) Is Nothing) Then
                RaiseEvent CommandRowDeleted(Me, New CommandRowChangeEvent(CType(e.Row,CommandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CommandRowDeletingEvent) Is Nothing) Then
                RaiseEvent CommandRowDeleting(Me, New CommandRowChangeEvent(CType(e.Row,CommandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCommandRow(ByVal row As CommandRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As XML_GLL = New XML_GLL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CommandDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _NCM_BANKRECON_1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAccountCode As Global.System.Data.DataColumn
        
        Private columnAccountName As Global.System.Data.DataColumn
        
        Private columnReconciled As Global.System.Data.DataColumn
        
        Private columnReconNo As Global.System.Data.DataColumn
        
        Private columnTransId As Global.System.Data.DataColumn
        
        Private columnNumber As Global.System.Data.DataColumn
        
        Private columnRefDateHeader As Global.System.Data.DataColumn
        
        Private columnDueDateHeader As Global.System.Data.DataColumn
        
        Private columnRef1Header As Global.System.Data.DataColumn
        
        Private columnRef2Header As Global.System.Data.DataColumn
        
        Private columnRef3Header As Global.System.Data.DataColumn
        
        Private columnRemarkHeader As Global.System.Data.DataColumn
        
        Private columnRef1Line As Global.System.Data.DataColumn
        
        Private columnRef2Line As Global.System.Data.DataColumn
        
        Private columnRef3Line As Global.System.Data.DataColumn
        
        Private columnRemarkLine As Global.System.Data.DataColumn
        
        Private columnMainCurrency As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnDebit As Global.System.Data.DataColumn
        
        Private columnCredit As Global.System.Data.DataColumn
        
        Private columnFCDebit As Global.System.Data.DataColumn
        
        Private columnFCCredit As Global.System.Data.DataColumn
        
        Private columnSumLCDebit As Global.System.Data.DataColumn
        
        Private columnSumLCCredit As Global.System.Data.DataColumn
        
        Private columnSumFCDebit As Global.System.Data.DataColumn
        
        Private columnSumFCCredit As Global.System.Data.DataColumn
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnCardName As Global.System.Data.DataColumn
        
        Private columnCounterRef As Global.System.Data.DataColumn
        
        Private _columnNumber_1_ As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnOriginDoc As Global.System.Data.DataColumn
        
        Private columnUnRecSumLCDebit As Global.System.Data.DataColumn
        
        Private columnUnRecSumLCCredit As Global.System.Data.DataColumn
        
        Private columnUnRecSumFCDebit As Global.System.Data.DataColumn
        
        Private columnUnRecSumFCCredit As Global.System.Data.DataColumn
        
        Private columnBankBookBal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NCM_BANKRECON;1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccountCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccountNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReconciledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReconciled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReconNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReconNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefDateHeaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefDateHeader
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DueDateHeaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDueDateHeader
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref1HeaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef1Header
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref2HeaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef2Header
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref3HeaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef3Header
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkHeaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarkHeader
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref1LineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef1Line
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref2LineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef2Line
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref3LineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef3Line
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarkLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MainCurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMainCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCDebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumLCDebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumLCDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumLCCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumLCCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumFCDebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumFCDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumFCCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumFCCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Number_1_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnNumber_1_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OriginDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOriginDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnRecSumLCDebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnRecSumLCDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnRecSumLCCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnRecSumLCCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnRecSumFCDebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnRecSumFCDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnRecSumFCCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnRecSumFCCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BankBookBalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBankBookBal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _NCM_BANKRECON_1Row
            Get
                Return CType(Me.Rows(index),_NCM_BANKRECON_1Row)
            End Get
        End Property
        
        Public Event _NCM_BANKRECON_1RowChanging As _NCM_BANKRECON_1RowChangeEventHandler
        
        Public Event _NCM_BANKRECON_1RowChanged As _NCM_BANKRECON_1RowChangeEventHandler
        
        Public Event _NCM_BANKRECON_1RowDeleting As _NCM_BANKRECON_1RowChangeEventHandler
        
        Public Event _NCM_BANKRECON_1RowDeleted As _NCM_BANKRECON_1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Add_NCM_BANKRECON_1Row(ByVal row As _NCM_BANKRECON_1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Add_NCM_BANKRECON_1Row( _
                    ByVal AccountCode As String,  _
                    ByVal AccountName As String,  _
                    ByVal Reconciled As Integer,  _
                    ByVal ReconNo As Integer,  _
                    ByVal TransId As Integer,  _
                    ByVal Number As Integer,  _
                    ByVal RefDateHeader As Date,  _
                    ByVal DueDateHeader As Date,  _
                    ByVal Ref1Header As String,  _
                    ByVal Ref2Header As String,  _
                    ByVal Ref3Header As String,  _
                    ByVal RemarkHeader As String,  _
                    ByVal Ref1Line As String,  _
                    ByVal Ref2Line As String,  _
                    ByVal Ref3Line As String,  _
                    ByVal RemarkLine As String,  _
                    ByVal MainCurrency As String,  _
                    ByVal Company As String,  _
                    ByVal Currency As String,  _
                    ByVal Debit As Decimal,  _
                    ByVal Credit As Decimal,  _
                    ByVal FCDebit As Decimal,  _
                    ByVal FCCredit As Decimal,  _
                    ByVal SumLCDebit As Decimal,  _
                    ByVal SumLCCredit As Decimal,  _
                    ByVal SumFCDebit As Decimal,  _
                    ByVal SumFCCredit As Decimal,  _
                    ByVal DocNum As String,  _
                    ByVal CardName As String,  _
                    ByVal CounterRef As String,  _
                    ByVal _Number_1_ As Integer,  _
                    ByVal DocDate As Date,  _
                    ByVal OriginDoc As String,  _
                    ByVal UnRecSumLCDebit As Decimal,  _
                    ByVal UnRecSumLCCredit As Decimal,  _
                    ByVal UnRecSumFCDebit As Decimal,  _
                    ByVal UnRecSumFCCredit As Decimal,  _
                    ByVal BankBookBal As Decimal) As _NCM_BANKRECON_1Row
            Dim row_NCM_BANKRECON_1Row As _NCM_BANKRECON_1Row = CType(Me.NewRow,_NCM_BANKRECON_1Row)
            Dim columnValuesArray() As Object = New Object() {AccountCode, AccountName, Reconciled, ReconNo, TransId, Number, RefDateHeader, DueDateHeader, Ref1Header, Ref2Header, Ref3Header, RemarkHeader, Ref1Line, Ref2Line, Ref3Line, RemarkLine, MainCurrency, Company, Currency, Debit, Credit, FCDebit, FCCredit, SumLCDebit, SumLCCredit, SumFCDebit, SumFCCredit, DocNum, CardName, CounterRef, _Number_1_, DocDate, OriginDoc, UnRecSumLCDebit, UnRecSumLCCredit, UnRecSumFCDebit, UnRecSumFCCredit, BankBookBal}
            row_NCM_BANKRECON_1Row.ItemArray = columnValuesArray
            Me.Rows.Add(row_NCM_BANKRECON_1Row)
            Return row_NCM_BANKRECON_1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _NCM_BANKRECON_1DataTable = CType(MyBase.Clone,_NCM_BANKRECON_1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _NCM_BANKRECON_1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAccountCode = MyBase.Columns("AccountCode")
            Me.columnAccountName = MyBase.Columns("AccountName")
            Me.columnReconciled = MyBase.Columns("Reconciled")
            Me.columnReconNo = MyBase.Columns("ReconNo")
            Me.columnTransId = MyBase.Columns("TransId")
            Me.columnNumber = MyBase.Columns("Number")
            Me.columnRefDateHeader = MyBase.Columns("RefDateHeader")
            Me.columnDueDateHeader = MyBase.Columns("DueDateHeader")
            Me.columnRef1Header = MyBase.Columns("Ref1Header")
            Me.columnRef2Header = MyBase.Columns("Ref2Header")
            Me.columnRef3Header = MyBase.Columns("Ref3Header")
            Me.columnRemarkHeader = MyBase.Columns("RemarkHeader")
            Me.columnRef1Line = MyBase.Columns("Ref1Line")
            Me.columnRef2Line = MyBase.Columns("Ref2Line")
            Me.columnRef3Line = MyBase.Columns("Ref3Line")
            Me.columnRemarkLine = MyBase.Columns("RemarkLine")
            Me.columnMainCurrency = MyBase.Columns("MainCurrency")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnDebit = MyBase.Columns("Debit")
            Me.columnCredit = MyBase.Columns("Credit")
            Me.columnFCDebit = MyBase.Columns("FCDebit")
            Me.columnFCCredit = MyBase.Columns("FCCredit")
            Me.columnSumLCDebit = MyBase.Columns("SumLCDebit")
            Me.columnSumLCCredit = MyBase.Columns("SumLCCredit")
            Me.columnSumFCDebit = MyBase.Columns("SumFCDebit")
            Me.columnSumFCCredit = MyBase.Columns("SumFCCredit")
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnCardName = MyBase.Columns("CardName")
            Me.columnCounterRef = MyBase.Columns("CounterRef")
            Me._columnNumber_1_ = MyBase.Columns("Number(1)")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnOriginDoc = MyBase.Columns("OriginDoc")
            Me.columnUnRecSumLCDebit = MyBase.Columns("UnRecSumLCDebit")
            Me.columnUnRecSumLCCredit = MyBase.Columns("UnRecSumLCCredit")
            Me.columnUnRecSumFCDebit = MyBase.Columns("UnRecSumFCDebit")
            Me.columnUnRecSumFCCredit = MyBase.Columns("UnRecSumFCCredit")
            Me.columnBankBookBal = MyBase.Columns("BankBookBal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAccountCode = New Global.System.Data.DataColumn("AccountCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountCode)
            Me.columnAccountName = New Global.System.Data.DataColumn("AccountName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountName)
            Me.columnReconciled = New Global.System.Data.DataColumn("Reconciled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReconciled)
            Me.columnReconNo = New Global.System.Data.DataColumn("ReconNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReconNo)
            Me.columnTransId = New Global.System.Data.DataColumn("TransId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransId)
            Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumber)
            Me.columnRefDateHeader = New Global.System.Data.DataColumn("RefDateHeader", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefDateHeader)
            Me.columnDueDateHeader = New Global.System.Data.DataColumn("DueDateHeader", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDueDateHeader)
            Me.columnRef1Header = New Global.System.Data.DataColumn("Ref1Header", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef1Header)
            Me.columnRef2Header = New Global.System.Data.DataColumn("Ref2Header", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef2Header)
            Me.columnRef3Header = New Global.System.Data.DataColumn("Ref3Header", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef3Header)
            Me.columnRemarkHeader = New Global.System.Data.DataColumn("RemarkHeader", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarkHeader)
            Me.columnRef1Line = New Global.System.Data.DataColumn("Ref1Line", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef1Line)
            Me.columnRef2Line = New Global.System.Data.DataColumn("Ref2Line", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef2Line)
            Me.columnRef3Line = New Global.System.Data.DataColumn("Ref3Line", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef3Line)
            Me.columnRemarkLine = New Global.System.Data.DataColumn("RemarkLine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarkLine)
            Me.columnMainCurrency = New Global.System.Data.DataColumn("MainCurrency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainCurrency)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnDebit = New Global.System.Data.DataColumn("Debit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDebit)
            Me.columnCredit = New Global.System.Data.DataColumn("Credit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredit)
            Me.columnFCDebit = New Global.System.Data.DataColumn("FCDebit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCDebit)
            Me.columnFCCredit = New Global.System.Data.DataColumn("FCCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCCredit)
            Me.columnSumLCDebit = New Global.System.Data.DataColumn("SumLCDebit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumLCDebit)
            Me.columnSumLCCredit = New Global.System.Data.DataColumn("SumLCCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumLCCredit)
            Me.columnSumFCDebit = New Global.System.Data.DataColumn("SumFCDebit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumFCDebit)
            Me.columnSumFCCredit = New Global.System.Data.DataColumn("SumFCCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumFCCredit)
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnCardName = New Global.System.Data.DataColumn("CardName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardName)
            Me.columnCounterRef = New Global.System.Data.DataColumn("CounterRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterRef)
            Me._columnNumber_1_ = New Global.System.Data.DataColumn("Number(1)", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnNumber_1_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnNumber_1_")
            Me._columnNumber_1_.ExtendedProperties.Add("Generator_UserColumnName", "Number(1)")
            MyBase.Columns.Add(Me._columnNumber_1_)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnOriginDoc = New Global.System.Data.DataColumn("OriginDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOriginDoc)
            Me.columnUnRecSumLCDebit = New Global.System.Data.DataColumn("UnRecSumLCDebit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnRecSumLCDebit)
            Me.columnUnRecSumLCCredit = New Global.System.Data.DataColumn("UnRecSumLCCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnRecSumLCCredit)
            Me.columnUnRecSumFCDebit = New Global.System.Data.DataColumn("UnRecSumFCDebit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnRecSumFCDebit)
            Me.columnUnRecSumFCCredit = New Global.System.Data.DataColumn("UnRecSumFCCredit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnRecSumFCCredit)
            Me.columnBankBookBal = New Global.System.Data.DataColumn("BankBookBal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBankBookBal)
            Me.ExtendedProperties.Add("Generator_TableVarName", "_tableNCM_BANKRECON_1")
            Me.ExtendedProperties.Add("Generator_UserTableName", "NCM_BANKRECON;1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function New_NCM_BANKRECON_1Row() As _NCM_BANKRECON_1Row
            Return CType(Me.NewRow,_NCM_BANKRECON_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _NCM_BANKRECON_1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_NCM_BANKRECON_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._NCM_BANKRECON_1RowChangedEvent) Is Nothing) Then
                RaiseEvent _NCM_BANKRECON_1RowChanged(Me, New _NCM_BANKRECON_1RowChangeEvent(CType(e.Row,_NCM_BANKRECON_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._NCM_BANKRECON_1RowChangingEvent) Is Nothing) Then
                RaiseEvent _NCM_BANKRECON_1RowChanging(Me, New _NCM_BANKRECON_1RowChangeEvent(CType(e.Row,_NCM_BANKRECON_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._NCM_BANKRECON_1RowDeletedEvent) Is Nothing) Then
                RaiseEvent _NCM_BANKRECON_1RowDeleted(Me, New _NCM_BANKRECON_1RowChangeEvent(CType(e.Row,_NCM_BANKRECON_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._NCM_BANKRECON_1RowDeletingEvent) Is Nothing) Then
                RaiseEvent _NCM_BANKRECON_1RowDeleting(Me, New _NCM_BANKRECON_1RowChangeEvent(CType(e.Row,_NCM_BANKRECON_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Remove_NCM_BANKRECON_1Row(ByVal row As _NCM_BANKRECON_1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As XML_GLL = New XML_GLL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_NCM_BANKRECON_1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CommandRow
        Inherits Global.System.Data.DataRow
        
        Private tableCommand As CommandDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCommand = CType(Me.Table,CommandDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dim1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.Dim1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dim1' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.Dim1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dim2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.Dim2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dim2' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.Dim2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dim3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.Dim3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dim3' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.Dim3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dim4() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.Dim4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dim4' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.Dim4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dim5() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.Dim5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dim5' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.Dim5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DimDesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.DimDesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DimDesc1' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.DimDesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DimDesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.DimDesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DimDesc2' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.DimDesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DimDesc3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.DimDesc3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DimDesc3' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.DimDesc3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DimDesc4() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.DimDesc4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DimDesc4' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.DimDesc4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DimDesc5() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.DimDesc5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DimDesc5' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.DimDesc5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.Ref1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref1' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.Ref1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.Ref2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref2' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.Ref2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.Ref3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref3' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.Ref3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinancialPeriodName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.FinancialPeriodNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinancialPeriodName' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.FinancialPeriodNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLAccount() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.GLAccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLAccount' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.GLAccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.AcctNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcctName' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.AcctNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Long
            Get
                Try 
                    Return CType(Me(Me.tableCommand.NumberColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCommand.RefDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefDate' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.RefDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineMemo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.LineMemoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineMemo' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.LineMemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.ProjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProjectCode' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.ProjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.DocNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocTypeDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.DocTypeDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocTypeDesc' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.DocTypeDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeriesName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.SeriesNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesName' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.SeriesNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountLC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCommand.AmountLCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountLC' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.AmountLCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCommand.AmountFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountFC' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.AmountFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPriceLC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCommand.UnitPriceLCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPriceLC' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.UnitPriceLCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPriceFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCommand.UnitPriceFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPriceFC' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.UnitPriceFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCommand.PaymentNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentNumber' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.PaymentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.PaymentRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentRef' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.PaymentRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCommand.PaymentDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentDate' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.PaymentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.CardCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardCode' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.CardCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommand.CardNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardName' in table 'Command' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommand.CardNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDim1Null() As Boolean
            Return Me.IsNull(Me.tableCommand.Dim1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDim1Null()
            Me(Me.tableCommand.Dim1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDim2Null() As Boolean
            Return Me.IsNull(Me.tableCommand.Dim2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDim2Null()
            Me(Me.tableCommand.Dim2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDim3Null() As Boolean
            Return Me.IsNull(Me.tableCommand.Dim3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDim3Null()
            Me(Me.tableCommand.Dim3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDim4Null() As Boolean
            Return Me.IsNull(Me.tableCommand.Dim4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDim4Null()
            Me(Me.tableCommand.Dim4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDim5Null() As Boolean
            Return Me.IsNull(Me.tableCommand.Dim5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDim5Null()
            Me(Me.tableCommand.Dim5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDimDesc1Null() As Boolean
            Return Me.IsNull(Me.tableCommand.DimDesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDimDesc1Null()
            Me(Me.tableCommand.DimDesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDimDesc2Null() As Boolean
            Return Me.IsNull(Me.tableCommand.DimDesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDimDesc2Null()
            Me(Me.tableCommand.DimDesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDimDesc3Null() As Boolean
            Return Me.IsNull(Me.tableCommand.DimDesc3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDimDesc3Null()
            Me(Me.tableCommand.DimDesc3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDimDesc4Null() As Boolean
            Return Me.IsNull(Me.tableCommand.DimDesc4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDimDesc4Null()
            Me(Me.tableCommand.DimDesc4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDimDesc5Null() As Boolean
            Return Me.IsNull(Me.tableCommand.DimDesc5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDimDesc5Null()
            Me(Me.tableCommand.DimDesc5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef1Null() As Boolean
            Return Me.IsNull(Me.tableCommand.Ref1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef1Null()
            Me(Me.tableCommand.Ref1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef2Null() As Boolean
            Return Me.IsNull(Me.tableCommand.Ref2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef2Null()
            Me(Me.tableCommand.Ref2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef3Null() As Boolean
            Return Me.IsNull(Me.tableCommand.Ref3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef3Null()
            Me(Me.tableCommand.Ref3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinancialPeriodNameNull() As Boolean
            Return Me.IsNull(Me.tableCommand.FinancialPeriodNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinancialPeriodNameNull()
            Me(Me.tableCommand.FinancialPeriodNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLAccountNull() As Boolean
            Return Me.IsNull(Me.tableCommand.GLAccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLAccountNull()
            Me(Me.tableCommand.GLAccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcctNameNull() As Boolean
            Return Me.IsNull(Me.tableCommand.AcctNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcctNameNull()
            Me(Me.tableCommand.AcctNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me.tableCommand.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me.tableCommand.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefDateNull() As Boolean
            Return Me.IsNull(Me.tableCommand.RefDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefDateNull()
            Me(Me.tableCommand.RefDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineMemoNull() As Boolean
            Return Me.IsNull(Me.tableCommand.LineMemoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineMemoNull()
            Me(Me.tableCommand.LineMemoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableCommand.ProjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectCodeNull()
            Me(Me.tableCommand.ProjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me.tableCommand.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me.tableCommand.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeDescNull() As Boolean
            Return Me.IsNull(Me.tableCommand.DocTypeDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeDescNull()
            Me(Me.tableCommand.DocTypeDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeriesNameNull() As Boolean
            Return Me.IsNull(Me.tableCommand.SeriesNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeriesNameNull()
            Me(Me.tableCommand.SeriesNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountLCNull() As Boolean
            Return Me.IsNull(Me.tableCommand.AmountLCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountLCNull()
            Me(Me.tableCommand.AmountLCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountFCNull() As Boolean
            Return Me.IsNull(Me.tableCommand.AmountFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountFCNull()
            Me(Me.tableCommand.AmountFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceLCNull() As Boolean
            Return Me.IsNull(Me.tableCommand.UnitPriceLCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceLCNull()
            Me(Me.tableCommand.UnitPriceLCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceFCNull() As Boolean
            Return Me.IsNull(Me.tableCommand.UnitPriceFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceFCNull()
            Me(Me.tableCommand.UnitPriceFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentNumberNull() As Boolean
            Return Me.IsNull(Me.tableCommand.PaymentNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentNumberNull()
            Me(Me.tableCommand.PaymentNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentRefNull() As Boolean
            Return Me.IsNull(Me.tableCommand.PaymentRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentRefNull()
            Me(Me.tableCommand.PaymentRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentDateNull() As Boolean
            Return Me.IsNull(Me.tableCommand.PaymentDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentDateNull()
            Me(Me.tableCommand.PaymentDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardCodeNull() As Boolean
            Return Me.IsNull(Me.tableCommand.CardCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardCodeNull()
            Me(Me.tableCommand.CardCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardNameNull() As Boolean
            Return Me.IsNull(Me.tableCommand.CardNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardNameNull()
            Me(Me.tableCommand.CardNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class _NCM_BANKRECON_1Row
        Inherits Global.System.Data.DataRow
        
        Private _tableNCM_BANKRECON_1 As _NCM_BANKRECON_1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me._tableNCM_BANKRECON_1 = CType(Me.Table,_NCM_BANKRECON_1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccountCode() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.AccountCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountCode' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.AccountCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccountName() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.AccountNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccountName' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.AccountNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reconciled() As Integer
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.ReconciledColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reconciled' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.ReconciledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReconNo() As Integer
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.ReconNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReconNo' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.ReconNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransId() As Integer
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.TransIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransId' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.TransIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Number() As Integer
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.NumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefDateHeader() As Date
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.RefDateHeaderColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefDateHeader' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.RefDateHeaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DueDateHeader() As Date
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.DueDateHeaderColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DueDateHeader' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.DueDateHeaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref1Header() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.Ref1HeaderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref1Header' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.Ref1HeaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref2Header() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.Ref2HeaderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref2Header' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.Ref2HeaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref3Header() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.Ref3HeaderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref3Header' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.Ref3HeaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RemarkHeader() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.RemarkHeaderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RemarkHeader' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.RemarkHeaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref1Line() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.Ref1LineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref1Line' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.Ref1LineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref2Line() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.Ref2LineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref2Line' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.Ref2LineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref3Line() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.Ref3LineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref3Line' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.Ref3LineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RemarkLine() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.RemarkLineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RemarkLine' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.RemarkLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MainCurrency() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.MainCurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MainCurrency' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.MainCurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Debit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.DebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Debit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.DebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Credit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.CreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Credit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.CreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCDebit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.FCDebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCDebit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.FCDebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCCredit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.FCCreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCCredit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.FCCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumLCDebit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.SumLCDebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumLCDebit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.SumLCDebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumLCCredit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.SumLCCreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumLCCredit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.SumLCCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumFCDebit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.SumFCDebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumFCDebit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.SumFCDebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumFCCredit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.SumFCCreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumFCCredit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.SumFCCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.DocNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNum' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardName() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.CardNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CardName' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.CardNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CounterRef() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.CounterRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CounterRef' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.CounterRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Number_1_() As Integer
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1._Number_1_Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Number(1)' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1._Number_1_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As Date
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.DocDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OriginDoc() As String
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.OriginDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OriginDoc' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.OriginDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnRecSumLCDebit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.UnRecSumLCDebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnRecSumLCDebit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.UnRecSumLCDebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnRecSumLCCredit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.UnRecSumLCCreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnRecSumLCCredit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.UnRecSumLCCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnRecSumFCDebit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.UnRecSumFCDebitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnRecSumFCDebit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.UnRecSumFCDebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnRecSumFCCredit() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.UnRecSumFCCreditColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnRecSumFCCredit' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.UnRecSumFCCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BankBookBal() As Decimal
            Get
                Try 
                    Return CType(Me(Me._tableNCM_BANKRECON_1.BankBookBalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BankBookBal' in table 'NCM_BANKRECON;1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableNCM_BANKRECON_1.BankBookBalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccountCodeNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.AccountCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccountCodeNull()
            Me(Me._tableNCM_BANKRECON_1.AccountCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccountNameNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.AccountNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccountNameNull()
            Me(Me._tableNCM_BANKRECON_1.AccountNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReconciledNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.ReconciledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReconciledNull()
            Me(Me._tableNCM_BANKRECON_1.ReconciledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReconNoNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.ReconNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReconNoNull()
            Me(Me._tableNCM_BANKRECON_1.ReconNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransIdNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.TransIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransIdNull()
            Me(Me._tableNCM_BANKRECON_1.TransIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberNull()
            Me(Me._tableNCM_BANKRECON_1.NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefDateHeaderNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.RefDateHeaderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefDateHeaderNull()
            Me(Me._tableNCM_BANKRECON_1.RefDateHeaderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDueDateHeaderNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.DueDateHeaderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDueDateHeaderNull()
            Me(Me._tableNCM_BANKRECON_1.DueDateHeaderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef1HeaderNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.Ref1HeaderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef1HeaderNull()
            Me(Me._tableNCM_BANKRECON_1.Ref1HeaderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef2HeaderNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.Ref2HeaderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef2HeaderNull()
            Me(Me._tableNCM_BANKRECON_1.Ref2HeaderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef3HeaderNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.Ref3HeaderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef3HeaderNull()
            Me(Me._tableNCM_BANKRECON_1.Ref3HeaderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkHeaderNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.RemarkHeaderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkHeaderNull()
            Me(Me._tableNCM_BANKRECON_1.RemarkHeaderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef1LineNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.Ref1LineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef1LineNull()
            Me(Me._tableNCM_BANKRECON_1.Ref1LineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef2LineNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.Ref2LineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef2LineNull()
            Me(Me._tableNCM_BANKRECON_1.Ref2LineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef3LineNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.Ref3LineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef3LineNull()
            Me(Me._tableNCM_BANKRECON_1.Ref3LineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkLineNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.RemarkLineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkLineNull()
            Me(Me._tableNCM_BANKRECON_1.RemarkLineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMainCurrencyNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.MainCurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMainCurrencyNull()
            Me(Me._tableNCM_BANKRECON_1.MainCurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNull()
            Me(Me._tableNCM_BANKRECON_1.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyNull()
            Me(Me._tableNCM_BANKRECON_1.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDebitNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.DebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDebitNull()
            Me(Me._tableNCM_BANKRECON_1.DebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.CreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditNull()
            Me(Me._tableNCM_BANKRECON_1.CreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCDebitNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.FCDebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCDebitNull()
            Me(Me._tableNCM_BANKRECON_1.FCDebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCCreditNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.FCCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCCreditNull()
            Me(Me._tableNCM_BANKRECON_1.FCCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumLCDebitNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.SumLCDebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumLCDebitNull()
            Me(Me._tableNCM_BANKRECON_1.SumLCDebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumLCCreditNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.SumLCCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumLCCreditNull()
            Me(Me._tableNCM_BANKRECON_1.SumLCCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumFCDebitNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.SumFCDebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumFCDebitNull()
            Me(Me._tableNCM_BANKRECON_1.SumFCDebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumFCCreditNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.SumFCCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumFCCreditNull()
            Me(Me._tableNCM_BANKRECON_1.SumFCCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNumNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.DocNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNumNull()
            Me(Me._tableNCM_BANKRECON_1.DocNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardNameNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.CardNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardNameNull()
            Me(Me._tableNCM_BANKRECON_1.CardNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterRefNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.CounterRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterRefNull()
            Me(Me._tableNCM_BANKRECON_1.CounterRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Number_1_Null() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1._Number_1_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Number_1_Null()
            Me(Me._tableNCM_BANKRECON_1._Number_1_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me._tableNCM_BANKRECON_1.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOriginDocNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.OriginDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOriginDocNull()
            Me(Me._tableNCM_BANKRECON_1.OriginDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnRecSumLCDebitNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.UnRecSumLCDebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnRecSumLCDebitNull()
            Me(Me._tableNCM_BANKRECON_1.UnRecSumLCDebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnRecSumLCCreditNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.UnRecSumLCCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnRecSumLCCreditNull()
            Me(Me._tableNCM_BANKRECON_1.UnRecSumLCCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnRecSumFCDebitNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.UnRecSumFCDebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnRecSumFCDebitNull()
            Me(Me._tableNCM_BANKRECON_1.UnRecSumFCDebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnRecSumFCCreditNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.UnRecSumFCCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnRecSumFCCreditNull()
            Me(Me._tableNCM_BANKRECON_1.UnRecSumFCCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBankBookBalNull() As Boolean
            Return Me.IsNull(Me._tableNCM_BANKRECON_1.BankBookBalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBankBookBalNull()
            Me(Me._tableNCM_BANKRECON_1.BankBookBalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CommandRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CommandRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CommandRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CommandRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class _NCM_BANKRECON_1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _NCM_BANKRECON_1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As _NCM_BANKRECON_1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As _NCM_BANKRECON_1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
